
PCRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00002048  000020dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002048  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030b  008001cc  008001cc  000021a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c38  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  00003f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000851  00000000  00000000  00004725  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000762  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000148b  00000000  00000000  000059ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_3>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_7>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_14>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_19>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	38 0b       	sbc	r19, r24
      6a:	2f 0b       	sbc	r18, r31
      6c:	25 0b       	sbc	r18, r21
      6e:	1c 0b       	sbc	r17, r28
      70:	14 0b       	sbc	r17, r20
      72:	0b 0b       	sbc	r16, r27
      74:	03 0b       	sbc	r16, r19
      76:	fc 0a       	sbc	r15, r28
      78:	f9 0a       	sbc	r15, r25
      7a:	76 0c       	add	r7, r6
      7c:	36 0c       	add	r3, r6
      7e:	c4 0c       	add	r12, r4
      80:	c4 0c       	add	r12, r4
      82:	c4 0c       	add	r12, r4
      84:	84 0c       	add	r8, r4
      86:	68 0c       	add	r6, r8
      88:	b5 0c       	add	r11, r5
      8a:	a3 0c       	add	r10, r3
      8c:	97 0c       	add	r9, r7
      8e:	5c 0c       	add	r5, r12
      90:	5c 0c       	add	r5, r12
      92:	5c 0c       	add	r5, r12
      94:	5c 0c       	add	r5, r12
      96:	5c 0c       	add	r5, r12
      98:	5c 0c       	add	r5, r12
      9a:	5c 0c       	add	r5, r12
      9c:	42 0c       	add	r4, r2
      9e:	4e 0c       	add	r4, r14

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	11 e0       	ldi	r17, 0x01	; 1
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e8 e4       	ldi	r30, 0x48	; 72
      b4:	f0 e2       	ldi	r31, 0x20	; 32
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	ac 3c       	cpi	r26, 0xCC	; 204
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	24 e0       	ldi	r18, 0x04	; 4
      c4:	ac ec       	ldi	r26, 0xCC	; 204
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a7 3d       	cpi	r26, 0xD7	; 215
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
      d6:	0c 94 22 10 	jmp	0x2044	; 0x2044 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <send_break_for_ircode>:
    debug_log("\r\n");
}

static void send_break_for_ircode(unsigned long ircode)
{
    send_kbcode_for_ir(ircode,BREAK);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	0e 94 3f 01 	call	0x27e	; 0x27e <send_kbcode_for_ir>
    debug_log("B 0x");
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
    sprintf(strbuf1,"%lx",decode_results.value);
      ec:	80 91 cf 04 	lds	r24, 0x04CF
      f0:	90 91 d0 04 	lds	r25, 0x04D0
      f4:	a0 91 d1 04 	lds	r26, 0x04D1
      f8:	b0 91 d2 04 	lds	r27, 0x04D2
      fc:	bf 93       	push	r27
      fe:	af 93       	push	r26
     100:	9f 93       	push	r25
     102:	8f 93       	push	r24
     104:	88 e0       	ldi	r24, 0x08	; 8
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	9f 93       	push	r25
     10a:	8f 93       	push	r24
     10c:	82 ed       	ldi	r24, 0xD2	; 210
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	9f 93       	push	r25
     112:	8f 93       	push	r24
     114:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <sprintf>
    debug_log(strbuf1);
     118:	82 ed       	ldi	r24, 0xD2	; 210
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
    debug_log("\r\n");
     120:	8b e9       	ldi	r24, 0x9B	; 155
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
     128:	8d b7       	in	r24, 0x3d	; 61
     12a:	9e b7       	in	r25, 0x3e	; 62
     12c:	08 96       	adiw	r24, 0x08	; 8
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	9e bf       	out	0x3e, r25	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	8d bf       	out	0x3d, r24	; 61
     138:	08 95       	ret

0000013a <main>:
}

int main(void)
{
	init_debug_log();
     13a:	0e 94 4a 05 	call	0xa94	; 0xa94 <init_debug_log>
	enableIRRecv();
     13e:	0e 94 d4 06 	call	0xda8	; 0xda8 <enableIRRecv>
	setup_ps2device(PINB2, PINB1);
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 cf 0b 	call	0x179e	; 0x179e <setup_ps2device>

static void send_make_for_ircode(unsigned long ircode)
{
    send_kbcode_for_ir(ircode,MAKE);
    debug_log("M 0x");
    sprintf(strbuf1,"%lx",decode_results.value);
     14a:	08 e0       	ldi	r16, 0x08	; 8
     14c:	11 e0       	ldi	r17, 0x01	; 1
     14e:	0f 2e       	mov	r0, r31
     150:	f2 ed       	ldi	r31, 0xD2	; 210
     152:	cf 2e       	mov	r12, r31
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	df 2e       	mov	r13, r31
     158:	f0 2d       	mov	r31, r0
			    }
                */
                if (prev_ir_value && prev_ir_value != decode_results.value)
                {
                    send_break_for_ircode(prev_ir_value);
                    same_ir_code_count = 1;
     15a:	ee 24       	eor	r14, r14
     15c:	e3 94       	inc	r14
     15e:	f1 2c       	mov	r15, r1
	enableIRRecv();
	setup_ps2device(PINB2, PINB1);
//    debug_log("init\r\n");
    while (1) 
    {
		do_ps2device_work();
     160:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
        switch(decodeHashIRRecv(&decode_results))
     164:	8d ec       	ldi	r24, 0xCD	; 205
     166:	94 e0       	ldi	r25, 0x04	; 4
     168:	0e 94 2b 06 	call	0xc56	; 0xc56 <decodeHashIRRecv>
     16c:	88 23       	and	r24, r24
     16e:	21 f0       	breq	.+8      	; 0x178 <main+0x3e>
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	09 f4       	brne	.+2      	; 0x176 <main+0x3c>
     174:	6d c0       	rjmp	.+218    	; 0x250 <main+0x116>
     176:	f4 cf       	rjmp	.-24     	; 0x160 <main+0x26>
                    {
					    debug_log(",");
				    }
			    }
                */
                if (prev_ir_value && prev_ir_value != decode_results.value)
     178:	60 91 ce 01 	lds	r22, 0x01CE
     17c:	70 91 cf 01 	lds	r23, 0x01CF
     180:	80 91 d0 01 	lds	r24, 0x01D0
     184:	90 91 d1 01 	lds	r25, 0x01D1
     188:	61 15       	cp	r22, r1
     18a:	71 05       	cpc	r23, r1
     18c:	81 05       	cpc	r24, r1
     18e:	91 05       	cpc	r25, r1
     190:	a1 f0       	breq	.+40     	; 0x1ba <main+0x80>
     192:	80 90 cf 04 	lds	r8, 0x04CF
     196:	90 90 d0 04 	lds	r9, 0x04D0
     19a:	a0 90 d1 04 	lds	r10, 0x04D1
     19e:	b0 90 d2 04 	lds	r11, 0x04D2
     1a2:	68 15       	cp	r22, r8
     1a4:	79 05       	cpc	r23, r9
     1a6:	8a 05       	cpc	r24, r10
     1a8:	9b 05       	cpc	r25, r11
     1aa:	39 f0       	breq	.+14     	; 0x1ba <main+0x80>
                {
                    send_break_for_ircode(prev_ir_value);
     1ac:	0e 94 6f 00 	call	0xde	; 0xde <send_break_for_ircode>
                    same_ir_code_count = 1;
     1b0:	f0 92 cd 01 	sts	0x01CD, r15
     1b4:	e0 92 cc 01 	sts	0x01CC, r14
     1b8:	10 c0       	rjmp	.+32     	; 0x1da <main+0xa0>
                } else {
                    same_ir_code_count++;
     1ba:	20 91 cc 01 	lds	r18, 0x01CC
     1be:	30 91 cd 01 	lds	r19, 0x01CD
     1c2:	2f 5f       	subi	r18, 0xFF	; 255
     1c4:	3f 4f       	sbci	r19, 0xFF	; 255
     1c6:	30 93 cd 01 	sts	0x01CD, r19
     1ca:	20 93 cc 01 	sts	0x01CC, r18
                }
                if (same_ir_code_count == 1 || same_ir_code_count > AUTO_REPEAT_LIMIT)
     1ce:	21 30       	cpi	r18, 0x01	; 1
     1d0:	31 05       	cpc	r19, r1
     1d2:	19 f0       	breq	.+6      	; 0x1da <main+0xa0>
     1d4:	25 30       	cpi	r18, 0x05	; 5
     1d6:	31 05       	cpc	r19, r1
     1d8:	50 f1       	brcs	.+84     	; 0x22e <main+0xf4>
                {
                    send_make_for_ircode(decode_results.value);
     1da:	cd ec       	ldi	r28, 0xCD	; 205
     1dc:	d4 e0       	ldi	r29, 0x04	; 4
     1de:	6a 81       	ldd	r22, Y+2	; 0x02
     1e0:	7b 81       	ldd	r23, Y+3	; 0x03
     1e2:	8c 81       	ldd	r24, Y+4	; 0x04
     1e4:	9d 81       	ldd	r25, Y+5	; 0x05
static unsigned long prev_ir_value = 0;
static unsigned int same_ir_code_count = 0;

static void send_make_for_ircode(unsigned long ircode)
{
    send_kbcode_for_ir(ircode,MAKE);
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	0e 94 3f 01 	call	0x27e	; 0x27e <send_kbcode_for_ir>
    debug_log("M 0x");
     1ec:	8c e0       	ldi	r24, 0x0C	; 12
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
    sprintf(strbuf1,"%lx",decode_results.value);
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	9b 81       	ldd	r25, Y+3	; 0x03
     1f8:	ac 81       	ldd	r26, Y+4	; 0x04
     1fa:	bd 81       	ldd	r27, Y+5	; 0x05
     1fc:	bf 93       	push	r27
     1fe:	af 93       	push	r26
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	1f 93       	push	r17
     206:	0f 93       	push	r16
     208:	df 92       	push	r13
     20a:	cf 92       	push	r12
     20c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <sprintf>
    debug_log(strbuf1);
     210:	c6 01       	movw	r24, r12
     212:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
    debug_log("\r\n");
     216:	8b e9       	ldi	r24, 0x9B	; 155
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
     21e:	8d b7       	in	r24, 0x3d	; 61
     220:	9e b7       	in	r25, 0x3e	; 62
     222:	08 96       	adiw	r24, 0x08	; 8
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	9e bf       	out	0x3e, r25	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	8d bf       	out	0x3d, r24	; 61
                }
                if (same_ir_code_count == 1 || same_ir_code_count > AUTO_REPEAT_LIMIT)
                {
                    send_make_for_ircode(decode_results.value);
                }
                prev_ir_value = decode_results.value;
     22e:	80 91 cf 04 	lds	r24, 0x04CF
     232:	90 91 d0 04 	lds	r25, 0x04D0
     236:	a0 91 d1 04 	lds	r26, 0x04D1
     23a:	b0 91 d2 04 	lds	r27, 0x04D2
     23e:	80 93 ce 01 	sts	0x01CE, r24
     242:	90 93 cf 01 	sts	0x01CF, r25
     246:	a0 93 d0 01 	sts	0x01D0, r26
     24a:	b0 93 d1 01 	sts	0x01D1, r27
                break;
     24e:	88 cf       	rjmp	.-240    	; 0x160 <main+0x26>
            }
            case BUTTON_RELEASED:
            {
                send_break_for_ircode(prev_ir_value);
     250:	60 91 ce 01 	lds	r22, 0x01CE
     254:	70 91 cf 01 	lds	r23, 0x01CF
     258:	80 91 d0 01 	lds	r24, 0x01D0
     25c:	90 91 d1 01 	lds	r25, 0x01D1
     260:	0e 94 6f 00 	call	0xde	; 0xde <send_break_for_ircode>
                prev_ir_value = 0;
     264:	10 92 ce 01 	sts	0x01CE, r1
     268:	10 92 cf 01 	sts	0x01CF, r1
     26c:	10 92 d0 01 	sts	0x01D0, r1
     270:	10 92 d1 01 	sts	0x01D1, r1
                same_ir_code_count = 0;
     274:	10 92 cd 01 	sts	0x01CD, r1
     278:	10 92 cc 01 	sts	0x01CC, r1
                break;
     27c:	71 cf       	rjmp	.-286    	; 0x160 <main+0x26>

0000027e <send_kbcode_for_ir>:
#include "../PS2KBDevice/PS2KBDevice.h"
#include "../PS2KBDevice/PS2DevCodes.h"

void send_kbcode_for_ir(unsigned long ircode, MK_OR_BK mk_or_bk)
{
    switch (ircode)
     27e:	6b 39       	cpi	r22, 0x9B	; 155
     280:	2d ee       	ldi	r18, 0xED	; 237
     282:	72 07       	cpc	r23, r18
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	82 07       	cpc	r24, r18
     288:	2f e8       	ldi	r18, 0x8F	; 143
     28a:	92 07       	cpc	r25, r18
     28c:	09 f4       	brne	.+2      	; 0x290 <send_kbcode_for_ir+0x12>
     28e:	b7 c2       	rjmp	.+1390   	; 0x7fe <send_kbcode_for_ir+0x580>
     290:	08 f0       	brcs	.+2      	; 0x294 <send_kbcode_for_ir+0x16>
     292:	b4 c0       	rjmp	.+360    	; 0x3fc <send_kbcode_for_ir+0x17e>
     294:	64 3a       	cpi	r22, 0xA4	; 164
     296:	23 ee       	ldi	r18, 0xE3	; 227
     298:	72 07       	cpc	r23, r18
     29a:	28 e8       	ldi	r18, 0x88	; 136
     29c:	82 07       	cpc	r24, r18
     29e:	2a e4       	ldi	r18, 0x4A	; 74
     2a0:	92 07       	cpc	r25, r18
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <send_kbcode_for_ir+0x28>
     2a4:	44 c2       	rjmp	.+1160   	; 0x72e <send_kbcode_for_ir+0x4b0>
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <send_kbcode_for_ir+0x2c>
     2a8:	54 c0       	rjmp	.+168    	; 0x352 <send_kbcode_for_ir+0xd4>
     2aa:	65 3b       	cpi	r22, 0xB5	; 181
     2ac:	28 ed       	ldi	r18, 0xD8	; 216
     2ae:	72 07       	cpc	r23, r18
     2b0:	25 e3       	ldi	r18, 0x35	; 53
     2b2:	82 07       	cpc	r24, r18
     2b4:	2b e0       	ldi	r18, 0x0B	; 11
     2b6:	92 07       	cpc	r25, r18
     2b8:	09 f4       	brne	.+2      	; 0x2bc <send_kbcode_for_ir+0x3e>
     2ba:	23 c3       	rjmp	.+1606   	; 0x902 <__stack+0x3>
     2bc:	00 f5       	brcc	.+64     	; 0x2fe <send_kbcode_for_ir+0x80>
     2be:	6e 3e       	cpi	r22, 0xEE	; 238
     2c0:	26 e9       	ldi	r18, 0x96	; 150
     2c2:	72 07       	cpc	r23, r18
     2c4:	26 ee       	ldi	r18, 0xE6	; 230
     2c6:	82 07       	cpc	r24, r18
     2c8:	91 05       	cpc	r25, r1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <send_kbcode_for_ir+0x50>
     2cc:	ba c1       	rjmp	.+884    	; 0x642 <send_kbcode_for_ir+0x3c4>
     2ce:	38 f4       	brcc	.+14     	; 0x2de <send_kbcode_for_ir+0x60>
     2d0:	61 34       	cpi	r22, 0x41	; 65
     2d2:	7b 45       	sbci	r23, 0x5B	; 91
     2d4:	82 41       	sbci	r24, 0x12	; 18
     2d6:	91 05       	cpc	r25, r1
     2d8:	09 f4       	brne	.+2      	; 0x2dc <send_kbcode_for_ir+0x5e>
     2da:	43 c2       	rjmp	.+1158   	; 0x762 <send_kbcode_for_ir+0x4e4>
     2dc:	08 95       	ret
     2de:	69 37       	cpi	r22, 0x79	; 121
     2e0:	2a eb       	ldi	r18, 0xBA	; 186
     2e2:	72 07       	cpc	r23, r18
     2e4:	2b e1       	ldi	r18, 0x1B	; 27
     2e6:	82 07       	cpc	r24, r18
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	92 07       	cpc	r25, r18
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <send_kbcode_for_ir+0x72>
     2ee:	f7 c1       	rjmp	.+1006   	; 0x6de <send_kbcode_for_ir+0x460>
     2f0:	63 38       	cpi	r22, 0x83	; 131
     2f2:	78 49       	sbci	r23, 0x98	; 152
     2f4:	86 4e       	sbci	r24, 0xE6	; 230
     2f6:	91 40       	sbci	r25, 0x01	; 1
     2f8:	09 f4       	brne	.+2      	; 0x2fc <send_kbcode_for_ir+0x7e>
     2fa:	89 c1       	rjmp	.+786    	; 0x60e <send_kbcode_for_ir+0x390>
     2fc:	08 95       	ret
     2fe:	66 3c       	cpi	r22, 0xC6	; 198
     300:	25 ec       	ldi	r18, 0xC5	; 197
     302:	72 07       	cpc	r23, r18
     304:	22 ef       	ldi	r18, 0xF2	; 242
     306:	82 07       	cpc	r24, r18
     308:	2e e1       	ldi	r18, 0x1E	; 30
     30a:	92 07       	cpc	r25, r18
     30c:	09 f4       	brne	.+2      	; 0x310 <send_kbcode_for_ir+0x92>
     30e:	43 c2       	rjmp	.+1158   	; 0x796 <send_kbcode_for_ir+0x518>
     310:	80 f4       	brcc	.+32     	; 0x332 <send_kbcode_for_ir+0xb4>
     312:	65 38       	cpi	r22, 0x85	; 133
     314:	2d e4       	ldi	r18, 0x4D	; 77
     316:	72 07       	cpc	r23, r18
     318:	22 e9       	ldi	r18, 0x92	; 146
     31a:	82 07       	cpc	r24, r18
     31c:	24 e1       	ldi	r18, 0x14	; 20
     31e:	92 07       	cpc	r25, r18
     320:	09 f4       	brne	.+2      	; 0x324 <send_kbcode_for_ir+0xa6>
     322:	1f c2       	rjmp	.+1086   	; 0x762 <send_kbcode_for_ir+0x4e4>
     324:	6c 32       	cpi	r22, 0x2C	; 44
     326:	71 49       	sbci	r23, 0x91	; 145
     328:	8c 49       	sbci	r24, 0x9C	; 156
     32a:	96 41       	sbci	r25, 0x16	; 22
     32c:	09 f4       	brne	.+2      	; 0x330 <send_kbcode_for_ir+0xb2>
     32e:	2a c3       	rjmp	.+1620   	; 0x984 <__stack+0x85>
     330:	08 95       	ret
     332:	69 3f       	cpi	r22, 0xF9	; 249
     334:	2a ec       	ldi	r18, 0xCA	; 202
     336:	72 07       	cpc	r23, r18
     338:	25 eb       	ldi	r18, 0xB5	; 181
     33a:	82 07       	cpc	r24, r18
     33c:	2f e1       	ldi	r18, 0x1F	; 31
     33e:	92 07       	cpc	r25, r18
     340:	09 f4       	brne	.+2      	; 0x344 <send_kbcode_for_ir+0xc6>
     342:	df c2       	rjmp	.+1470   	; 0x902 <__stack+0x3>
     344:	6a 30       	cpi	r22, 0x0A	; 10
     346:	78 4b       	sbci	r23, 0xB8	; 184
     348:	82 47       	sbci	r24, 0x72	; 114
     34a:	93 43       	sbci	r25, 0x33	; 51
     34c:	09 f4       	brne	.+2      	; 0x350 <send_kbcode_for_ir+0xd2>
     34e:	23 c2       	rjmp	.+1094   	; 0x796 <send_kbcode_for_ir+0x518>
     350:	08 95       	ret
     352:	63 39       	cpi	r22, 0x93	; 147
     354:	28 e8       	ldi	r18, 0x88	; 136
     356:	72 07       	cpc	r23, r18
     358:	24 ed       	ldi	r18, 0xD4	; 212
     35a:	82 07       	cpc	r24, r18
     35c:	2a e6       	ldi	r18, 0x6A	; 106
     35e:	92 07       	cpc	r25, r18
     360:	09 f4       	brne	.+2      	; 0x364 <send_kbcode_for_ir+0xe6>
     362:	21 c1       	rjmp	.+578    	; 0x5a6 <send_kbcode_for_ir+0x328>
     364:	08 f5       	brcc	.+66     	; 0x3a8 <send_kbcode_for_ir+0x12a>
     366:	6c 31       	cpi	r22, 0x1C	; 28
     368:	26 e6       	ldi	r18, 0x66	; 102
     36a:	72 07       	cpc	r23, r18
     36c:	2f e3       	ldi	r18, 0x3F	; 63
     36e:	82 07       	cpc	r24, r18
     370:	27 e5       	ldi	r18, 0x57	; 87
     372:	92 07       	cpc	r25, r18
     374:	09 f4       	brne	.+2      	; 0x378 <send_kbcode_for_ir+0xfa>
     376:	ab c2       	rjmp	.+1366   	; 0x8ce <send_kbcode_for_ir+0x650>
     378:	38 f4       	brcc	.+14     	; 0x388 <send_kbcode_for_ir+0x10a>
     37a:	64 39       	cpi	r22, 0x94	; 148
     37c:	76 40       	sbci	r23, 0x06	; 6
     37e:	89 47       	sbci	r24, 0x79	; 121
     380:	9b 44       	sbci	r25, 0x4B	; 75
     382:	09 f4       	brne	.+2      	; 0x386 <send_kbcode_for_ir+0x108>
     384:	2a c1       	rjmp	.+596    	; 0x5da <send_kbcode_for_ir+0x35c>
     386:	08 95       	ret
     388:	68 36       	cpi	r22, 0x68	; 104
     38a:	26 e7       	ldi	r18, 0x76	; 118
     38c:	72 07       	cpc	r23, r18
     38e:	2a e4       	ldi	r18, 0x4A	; 74
     390:	82 07       	cpc	r24, r18
     392:	23 e6       	ldi	r18, 0x63	; 99
     394:	92 07       	cpc	r25, r18
     396:	09 f4       	brne	.+2      	; 0x39a <send_kbcode_for_ir+0x11c>
     398:	6e c1       	rjmp	.+732    	; 0x676 <send_kbcode_for_ir+0x3f8>
     39a:	62 35       	cpi	r22, 0x52	; 82
     39c:	78 4c       	sbci	r23, 0xC8	; 200
     39e:	8b 48       	sbci	r24, 0x8B	; 139
     3a0:	9a 46       	sbci	r25, 0x6A	; 106
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <send_kbcode_for_ir+0x128>
     3a4:	46 c2       	rjmp	.+1164   	; 0x832 <send_kbcode_for_ir+0x5b4>
     3a6:	08 95       	ret
     3a8:	65 38       	cpi	r22, 0x85	; 133
     3aa:	29 e4       	ldi	r18, 0x49	; 73
     3ac:	72 07       	cpc	r23, r18
     3ae:	2d e3       	ldi	r18, 0x3D	; 61
     3b0:	82 07       	cpc	r24, r18
     3b2:	2e e7       	ldi	r18, 0x7E	; 126
     3b4:	92 07       	cpc	r25, r18
     3b6:	09 f4       	brne	.+2      	; 0x3ba <send_kbcode_for_ir+0x13c>
     3b8:	56 c2       	rjmp	.+1196   	; 0x866 <send_kbcode_for_ir+0x5e8>
     3ba:	80 f4       	brcc	.+32     	; 0x3dc <send_kbcode_for_ir+0x15e>
     3bc:	65 36       	cpi	r22, 0x65	; 101
     3be:	27 e5       	ldi	r18, 0x57	; 87
     3c0:	72 07       	cpc	r23, r18
     3c2:	24 e9       	ldi	r18, 0x94	; 148
     3c4:	82 07       	cpc	r24, r18
     3c6:	29 e7       	ldi	r18, 0x79	; 121
     3c8:	92 07       	cpc	r25, r18
     3ca:	09 f4       	brne	.+2      	; 0x3ce <send_kbcode_for_ir+0x150>
     3cc:	6e c1       	rjmp	.+732    	; 0x6aa <send_kbcode_for_ir+0x42c>
     3ce:	6c 3c       	cpi	r22, 0xCC	; 204
     3d0:	74 44       	sbci	r23, 0x44	; 68
     3d2:	8d 43       	sbci	r24, 0x3D	; 61
     3d4:	9b 47       	sbci	r25, 0x7B	; 123
     3d6:	09 f4       	brne	.+2      	; 0x3da <send_kbcode_for_ir+0x15c>
     3d8:	60 c2       	rjmp	.+1216   	; 0x89a <send_kbcode_for_ir+0x61c>
     3da:	08 95       	ret
     3dc:	68 30       	cpi	r22, 0x08	; 8
     3de:	2c ee       	ldi	r18, 0xEC	; 236
     3e0:	72 07       	cpc	r23, r18
     3e2:	2a e0       	ldi	r18, 0x0A	; 10
     3e4:	82 07       	cpc	r24, r18
     3e6:	2e e8       	ldi	r18, 0x8E	; 142
     3e8:	92 07       	cpc	r25, r18
     3ea:	09 f4       	brne	.+2      	; 0x3ee <send_kbcode_for_ir+0x170>
     3ec:	ee c1       	rjmp	.+988    	; 0x7ca <send_kbcode_for_ir+0x54c>
     3ee:	69 3a       	cpi	r22, 0xA9	; 169
     3f0:	79 44       	sbci	r23, 0x49	; 73
     3f2:	84 41       	sbci	r24, 0x14	; 20
     3f4:	9e 48       	sbci	r25, 0x8E	; 142
     3f6:	09 f4       	brne	.+2      	; 0x3fa <send_kbcode_for_ir+0x17c>
     3f8:	58 c1       	rjmp	.+688    	; 0x6aa <send_kbcode_for_ir+0x42c>
     3fa:	08 95       	ret
     3fc:	6c 34       	cpi	r22, 0x4C	; 76
     3fe:	2c e3       	ldi	r18, 0x3C	; 60
     400:	72 07       	cpc	r23, r18
     402:	21 ec       	ldi	r18, 0xC1	; 193
     404:	82 07       	cpc	r24, r18
     406:	92 07       	cpc	r25, r18
     408:	09 f4       	brne	.+2      	; 0x40c <send_kbcode_for_ir+0x18e>
     40a:	35 c1       	rjmp	.+618    	; 0x676 <send_kbcode_for_ir+0x3f8>
     40c:	08 f0       	brcs	.+2      	; 0x410 <send_kbcode_for_ir+0x192>
     40e:	54 c0       	rjmp	.+168    	; 0x4b8 <send_kbcode_for_ir+0x23a>
     410:	6c 34       	cpi	r22, 0x4C	; 76
     412:	2e ed       	ldi	r18, 0xDE	; 222
     414:	72 07       	cpc	r23, r18
     416:	2a e8       	ldi	r18, 0x8A	; 138
     418:	82 07       	cpc	r24, r18
     41a:	22 ea       	ldi	r18, 0xA2	; 162
     41c:	92 07       	cpc	r25, r18
     41e:	09 f4       	brne	.+2      	; 0x422 <send_kbcode_for_ir+0x1a4>
     420:	d4 c1       	rjmp	.+936    	; 0x7ca <send_kbcode_for_ir+0x54c>
     422:	08 f5       	brcc	.+66     	; 0x466 <send_kbcode_for_ir+0x1e8>
     424:	6b 36       	cpi	r22, 0x6B	; 107
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	72 07       	cpc	r23, r18
     42a:	27 ed       	ldi	r18, 0xD7	; 215
     42c:	82 07       	cpc	r24, r18
     42e:	2f e8       	ldi	r18, 0x8F	; 143
     430:	92 07       	cpc	r25, r18
     432:	09 f4       	brne	.+2      	; 0x436 <send_kbcode_for_ir+0x1b8>
     434:	9e c0       	rjmp	.+316    	; 0x572 <send_kbcode_for_ir+0x2f4>
     436:	38 f4       	brcc	.+14     	; 0x446 <send_kbcode_for_ir+0x1c8>
     438:	60 31       	cpi	r22, 0x10	; 16
     43a:	77 43       	sbci	r23, 0x37	; 55
     43c:	8d 4b       	sbci	r24, 0xBD	; 189
     43e:	9f 48       	sbci	r25, 0x8F	; 143
     440:	09 f4       	brne	.+2      	; 0x444 <send_kbcode_for_ir+0x1c6>
     442:	2b c2       	rjmp	.+1110   	; 0x89a <send_kbcode_for_ir+0x61c>
     444:	08 95       	ret
     446:	69 3c       	cpi	r22, 0xC9	; 201
     448:	2b e3       	ldi	r18, 0x3B	; 59
     44a:	72 07       	cpc	r23, r18
     44c:	2d eb       	ldi	r18, 0xBD	; 189
     44e:	82 07       	cpc	r24, r18
     450:	22 e9       	ldi	r18, 0x92	; 146
     452:	92 07       	cpc	r25, r18
     454:	09 f4       	brne	.+2      	; 0x458 <send_kbcode_for_ir+0x1da>
     456:	07 c2       	rjmp	.+1038   	; 0x866 <send_kbcode_for_ir+0x5e8>
     458:	6a 30       	cpi	r22, 0x0A	; 10
     45a:	71 4d       	sbci	r23, 0xD1	; 209
     45c:	8f 46       	sbci	r24, 0x6F	; 111
     45e:	92 4a       	sbci	r25, 0xA2	; 162
     460:	09 f4       	brne	.+2      	; 0x464 <send_kbcode_for_ir+0x1e6>
     462:	ef c0       	rjmp	.+478    	; 0x642 <send_kbcode_for_ir+0x3c4>
     464:	08 95       	ret
     466:	68 38       	cpi	r22, 0x88	; 136
     468:	29 ea       	ldi	r18, 0xA9	; 169
     46a:	72 07       	cpc	r23, r18
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	82 07       	cpc	r24, r18
     470:	28 ea       	ldi	r18, 0xA8	; 168
     472:	92 07       	cpc	r25, r18
     474:	09 f4       	brne	.+2      	; 0x478 <send_kbcode_for_ir+0x1fa>
     476:	5b c1       	rjmp	.+694    	; 0x72e <send_kbcode_for_ir+0x4b0>
     478:	80 f4       	brcc	.+32     	; 0x49a <send_kbcode_for_ir+0x21c>
     47a:	6f 39       	cpi	r22, 0x9F	; 159
     47c:	22 ed       	ldi	r18, 0xD2	; 210
     47e:	72 07       	cpc	r23, r18
     480:	2f e6       	ldi	r18, 0x6F	; 111
     482:	82 07       	cpc	r24, r18
     484:	23 ea       	ldi	r18, 0xA3	; 163
     486:	92 07       	cpc	r25, r18
     488:	09 f4       	brne	.+2      	; 0x48c <send_kbcode_for_ir+0x20e>
     48a:	c1 c0       	rjmp	.+386    	; 0x60e <send_kbcode_for_ir+0x390>
     48c:	6f 3d       	cpi	r22, 0xDF	; 223
     48e:	7f 4d       	sbci	r23, 0xDF	; 223
     490:	8a 48       	sbci	r24, 0x8A	; 138
     492:	93 4a       	sbci	r25, 0xA3	; 163
     494:	09 f4       	brne	.+2      	; 0x498 <send_kbcode_for_ir+0x21a>
     496:	b3 c1       	rjmp	.+870    	; 0x7fe <send_kbcode_for_ir+0x580>
     498:	08 95       	ret
     49a:	60 3d       	cpi	r22, 0xD0	; 208
     49c:	71 05       	cpc	r23, r1
     49e:	23 e0       	ldi	r18, 0x03	; 3
     4a0:	82 07       	cpc	r24, r18
     4a2:	29 ea       	ldi	r18, 0xA9	; 169
     4a4:	92 07       	cpc	r25, r18
     4a6:	09 f4       	brne	.+2      	; 0x4aa <send_kbcode_for_ir+0x22c>
     4a8:	6d c2       	rjmp	.+1242   	; 0x984 <__stack+0x85>
     4aa:	68 37       	cpi	r22, 0x78	; 120
     4ac:	7c 4c       	sbci	r23, 0xCC	; 204
     4ae:	8f 4e       	sbci	r24, 0xEF	; 239
     4b0:	99 4a       	sbci	r25, 0xA9	; 169
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <send_kbcode_for_ir+0x238>
     4b4:	92 c0       	rjmp	.+292    	; 0x5da <send_kbcode_for_ir+0x35c>
     4b6:	08 95       	ret
     4b8:	6c 37       	cpi	r22, 0x7C	; 124
     4ba:	23 ec       	ldi	r18, 0xC3	; 195
     4bc:	72 07       	cpc	r23, r18
     4be:	2b e9       	ldi	r18, 0x9B	; 155
     4c0:	82 07       	cpc	r24, r18
     4c2:	29 ee       	ldi	r18, 0xE9	; 233
     4c4:	92 07       	cpc	r25, r18
     4c6:	09 f4       	brne	.+2      	; 0x4ca <send_kbcode_for_ir+0x24c>
     4c8:	1e c1       	rjmp	.+572    	; 0x706 <send_kbcode_for_ir+0x488>
     4ca:	50 f5       	brcc	.+84     	; 0x520 <send_kbcode_for_ir+0x2a2>
     4cc:	6f 3e       	cpi	r22, 0xEF	; 239
     4ce:	28 e1       	ldi	r18, 0x18	; 24
     4d0:	72 07       	cpc	r23, r18
     4d2:	2e e6       	ldi	r18, 0x6E	; 110
     4d4:	82 07       	cpc	r24, r18
     4d6:	28 ed       	ldi	r18, 0xD8	; 216
     4d8:	92 07       	cpc	r25, r18
     4da:	09 f4       	brne	.+2      	; 0x4de <send_kbcode_for_ir+0x260>
     4dc:	64 c0       	rjmp	.+200    	; 0x5a6 <send_kbcode_for_ir+0x328>
     4de:	80 f4       	brcc	.+32     	; 0x500 <send_kbcode_for_ir+0x282>
     4e0:	61 37       	cpi	r22, 0x71	; 113
     4e2:	27 e2       	ldi	r18, 0x27	; 39
     4e4:	72 07       	cpc	r23, r18
     4e6:	2d e9       	ldi	r18, 0x9D	; 157
     4e8:	82 07       	cpc	r24, r18
     4ea:	2e ec       	ldi	r18, 0xCE	; 206
     4ec:	92 07       	cpc	r25, r18
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <send_kbcode_for_ir+0x274>
     4f0:	22 c2       	rjmp	.+1092   	; 0x936 <__stack+0x37>
     4f2:	6e 3a       	cpi	r22, 0xAE	; 174
     4f4:	78 45       	sbci	r23, 0x58	; 88
     4f6:	85 42       	sbci	r24, 0x25	; 37
     4f8:	98 4d       	sbci	r25, 0xD8	; 216
     4fa:	09 f4       	brne	.+2      	; 0x4fe <send_kbcode_for_ir+0x280>
     4fc:	9a c1       	rjmp	.+820    	; 0x832 <send_kbcode_for_ir+0x5b4>
     4fe:	08 95       	ret
     500:	63 3a       	cpi	r22, 0xA3	; 163
     502:	25 e1       	ldi	r18, 0x15	; 21
     504:	72 07       	cpc	r23, r18
     506:	2c e0       	ldi	r18, 0x0C	; 12
     508:	82 07       	cpc	r24, r18
     50a:	22 ee       	ldi	r18, 0xE2	; 226
     50c:	92 07       	cpc	r25, r18
     50e:	09 f4       	brne	.+2      	; 0x512 <send_kbcode_for_ir+0x294>
     510:	0e c1       	rjmp	.+540    	; 0x72e <send_kbcode_for_ir+0x4b0>
     512:	65 3b       	cpi	r22, 0xB5	; 181
     514:	79 41       	sbci	r23, 0x19	; 25
     516:	8d 41       	sbci	r24, 0x1D	; 29
     518:	93 4e       	sbci	r25, 0xE3	; 227
     51a:	09 f4       	brne	.+2      	; 0x51e <send_kbcode_for_ir+0x2a0>
     51c:	0c c2       	rjmp	.+1048   	; 0x936 <__stack+0x37>
     51e:	08 95       	ret
     520:	68 33       	cpi	r22, 0x38	; 56
     522:	20 ea       	ldi	r18, 0xA0	; 160
     524:	72 07       	cpc	r23, r18
     526:	28 ec       	ldi	r18, 0xC8	; 200
     528:	82 07       	cpc	r24, r18
     52a:	28 ef       	ldi	r18, 0xF8	; 248
     52c:	92 07       	cpc	r25, r18
     52e:	09 f4       	brne	.+2      	; 0x532 <send_kbcode_for_ir+0x2b4>
     530:	ce c1       	rjmp	.+924    	; 0x8ce <send_kbcode_for_ir+0x650>
     532:	80 f4       	brcc	.+32     	; 0x554 <send_kbcode_for_ir+0x2d6>
     534:	65 33       	cpi	r22, 0x35	; 53
     536:	28 ec       	ldi	r18, 0xC8	; 200
     538:	72 07       	cpc	r23, r18
     53a:	2b e9       	ldi	r18, 0x9B	; 155
     53c:	82 07       	cpc	r24, r18
     53e:	2c ee       	ldi	r18, 0xEC	; 236
     540:	92 07       	cpc	r25, r18
     542:	09 f4       	brne	.+2      	; 0x546 <send_kbcode_for_ir+0x2c8>
     544:	cc c0       	rjmp	.+408    	; 0x6de <send_kbcode_for_ir+0x460>
     546:	67 3e       	cpi	r22, 0xE7	; 231
     548:	77 40       	sbci	r23, 0x07	; 7
     54a:	8c 48       	sbci	r24, 0x8C	; 140
     54c:	96 4f       	sbci	r25, 0xF6	; 246
     54e:	09 f4       	brne	.+2      	; 0x552 <send_kbcode_for_ir+0x2d4>
     550:	ee c0       	rjmp	.+476    	; 0x72e <send_kbcode_for_ir+0x4b0>
     552:	08 95       	ret
     554:	67 3c       	cpi	r22, 0xC7	; 199
     556:	21 e9       	ldi	r18, 0x91	; 145
     558:	72 07       	cpc	r23, r18
     55a:	20 e7       	ldi	r18, 0x70	; 112
     55c:	82 07       	cpc	r24, r18
     55e:	2d ef       	ldi	r18, 0xFD	; 253
     560:	92 07       	cpc	r25, r18
     562:	39 f0       	breq	.+14     	; 0x572 <send_kbcode_for_ir+0x2f4>
     564:	60 3c       	cpi	r22, 0xC0	; 192
     566:	75 4b       	sbci	r23, 0xB5	; 181
     568:	8b 41       	sbci	r24, 0x1B	; 27
     56a:	9e 4f       	sbci	r25, 0xFE	; 254
     56c:	09 f4       	brne	.+2      	; 0x570 <send_kbcode_for_ir+0x2f2>
     56e:	cb c0       	rjmp	.+406    	; 0x706 <send_kbcode_for_ir+0x488>
     570:	08 95       	ret
    {
        // power buttons
        case MCEH_POWER_ON_1:
        case MCEH_POWER_ON_2:
            SEND_EXT_CODE(PS2DC_PWR_WAKE_EXT, mk_or_bk);
     572:	44 23       	and	r20, r20
     574:	19 f0       	breq	.+6      	; 0x57c <send_kbcode_for_ir+0x2fe>
     576:	41 30       	cpi	r20, 0x01	; 1
     578:	51 f0       	breq	.+20     	; 0x58e <send_kbcode_for_ir+0x310>
     57a:	15 c0       	rjmp	.+42     	; 0x5a6 <send_kbcode_for_ir+0x328>
     57c:	80 ee       	ldi	r24, 0xE0	; 224
     57e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     582:	8e e5       	ldi	r24, 0x5E	; 94
     584:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     588:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     58c:	08 95       	ret
     58e:	80 ef       	ldi	r24, 0xF0	; 240
     590:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     594:	80 ee       	ldi	r24, 0xE0	; 224
     596:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     59a:	8e e5       	ldi	r24, 0x5E	; 94
     59c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5a0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     5a4:	08 95       	ret
        case MCEH_POWER_OFF_1:
        case MCEH_POWER_OFF_2:
            SEND_EXT_CODE(PS2DC_PWR_SLEEP_EXT, mk_or_bk);
     5a6:	44 23       	and	r20, r20
     5a8:	19 f0       	breq	.+6      	; 0x5b0 <send_kbcode_for_ir+0x332>
     5aa:	41 30       	cpi	r20, 0x01	; 1
     5ac:	51 f0       	breq	.+20     	; 0x5c2 <send_kbcode_for_ir+0x344>
     5ae:	15 c0       	rjmp	.+42     	; 0x5da <send_kbcode_for_ir+0x35c>
     5b0:	80 ee       	ldi	r24, 0xE0	; 224
     5b2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5b6:	8f e3       	ldi	r24, 0x3F	; 63
     5b8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5bc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     5c0:	08 95       	ret
     5c2:	80 ef       	ldi	r24, 0xF0	; 240
     5c4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5c8:	80 ee       	ldi	r24, 0xE0	; 224
     5ca:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5ce:	8f e3       	ldi	r24, 0x3F	; 63
     5d0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5d4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     5d8:	08 95       	ret
        case MCEH_POWER_TOGGLE_1:
        case MCEH_POWER_TOGGLE_2:
            SEND_EXT_CODE(PS2DC_PWR_POWER_EXT, mk_or_bk);
     5da:	44 23       	and	r20, r20
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <send_kbcode_for_ir+0x366>
     5de:	41 30       	cpi	r20, 0x01	; 1
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <send_kbcode_for_ir+0x378>
     5e2:	15 c0       	rjmp	.+42     	; 0x60e <send_kbcode_for_ir+0x390>
     5e4:	80 ee       	ldi	r24, 0xE0	; 224
     5e6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5ea:	87 e3       	ldi	r24, 0x37	; 55
     5ec:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5f0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     5f4:	08 95       	ret
     5f6:	80 ef       	ldi	r24, 0xF0	; 240
     5f8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     5fc:	80 ee       	ldi	r24, 0xE0	; 224
     5fe:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     602:	87 e3       	ldi	r24, 0x37	; 55
     604:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     608:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     60c:	08 95       	ret
            
        // cursor keys
        case MCEH_DIR_UP_1:
        case MCEH_DIR_UP_2:
            SEND_EXT_CODE(PS2DC_U_ARROW_EXT, mk_or_bk);
     60e:	44 23       	and	r20, r20
     610:	19 f0       	breq	.+6      	; 0x618 <send_kbcode_for_ir+0x39a>
     612:	41 30       	cpi	r20, 0x01	; 1
     614:	51 f0       	breq	.+20     	; 0x62a <send_kbcode_for_ir+0x3ac>
     616:	15 c0       	rjmp	.+42     	; 0x642 <send_kbcode_for_ir+0x3c4>
     618:	80 ee       	ldi	r24, 0xE0	; 224
     61a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     61e:	85 e7       	ldi	r24, 0x75	; 117
     620:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     624:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     628:	08 95       	ret
     62a:	80 ef       	ldi	r24, 0xF0	; 240
     62c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     630:	80 ee       	ldi	r24, 0xE0	; 224
     632:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     636:	85 e7       	ldi	r24, 0x75	; 117
     638:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     63c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     640:	08 95       	ret
        case MCEH_DIR_DOWN_1:
        case MCEH_DIR_DOWN_2:
            SEND_EXT_CODE(PS2DC_D_ARROW_EXT, mk_or_bk);
     642:	44 23       	and	r20, r20
     644:	19 f0       	breq	.+6      	; 0x64c <send_kbcode_for_ir+0x3ce>
     646:	41 30       	cpi	r20, 0x01	; 1
     648:	51 f0       	breq	.+20     	; 0x65e <send_kbcode_for_ir+0x3e0>
     64a:	15 c0       	rjmp	.+42     	; 0x676 <send_kbcode_for_ir+0x3f8>
     64c:	80 ee       	ldi	r24, 0xE0	; 224
     64e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     652:	82 e7       	ldi	r24, 0x72	; 114
     654:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     658:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     65c:	08 95       	ret
     65e:	80 ef       	ldi	r24, 0xF0	; 240
     660:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     664:	80 ee       	ldi	r24, 0xE0	; 224
     666:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     66a:	82 e7       	ldi	r24, 0x72	; 114
     66c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     670:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     674:	08 95       	ret
        case MCEH_DIR_LEFT_1:
        case MCEH_DIR_LEFT_2:
            SEND_EXT_CODE(PS2DC_L_ARROW_EXT, mk_or_bk);
     676:	44 23       	and	r20, r20
     678:	19 f0       	breq	.+6      	; 0x680 <send_kbcode_for_ir+0x402>
     67a:	41 30       	cpi	r20, 0x01	; 1
     67c:	51 f0       	breq	.+20     	; 0x692 <send_kbcode_for_ir+0x414>
     67e:	15 c0       	rjmp	.+42     	; 0x6aa <send_kbcode_for_ir+0x42c>
     680:	80 ee       	ldi	r24, 0xE0	; 224
     682:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     686:	8b e6       	ldi	r24, 0x6B	; 107
     688:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     68c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     690:	08 95       	ret
     692:	80 ef       	ldi	r24, 0xF0	; 240
     694:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     698:	80 ee       	ldi	r24, 0xE0	; 224
     69a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     69e:	8b e6       	ldi	r24, 0x6B	; 107
     6a0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6a4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     6a8:	08 95       	ret
        case MCEH_DIR_RIGHT_1:
        case MCEH_DIR_RIGHT_2:
            SEND_EXT_CODE(PS2DC_R_ARROW_EXT, mk_or_bk);
     6aa:	44 23       	and	r20, r20
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <send_kbcode_for_ir+0x436>
     6ae:	41 30       	cpi	r20, 0x01	; 1
     6b0:	51 f0       	breq	.+20     	; 0x6c6 <send_kbcode_for_ir+0x448>
     6b2:	15 c0       	rjmp	.+42     	; 0x6de <send_kbcode_for_ir+0x460>
     6b4:	80 ee       	ldi	r24, 0xE0	; 224
     6b6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6ba:	84 e7       	ldi	r24, 0x74	; 116
     6bc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6c0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     6c4:	08 95       	ret
     6c6:	80 ef       	ldi	r24, 0xF0	; 240
     6c8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6cc:	80 ee       	ldi	r24, 0xE0	; 224
     6ce:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6d2:	84 e7       	ldi	r24, 0x74	; 116
     6d4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6d8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     6dc:	08 95       	ret
        case MCEH_OK_1:
        case MCEH_OK_2:
            SEND_CODE(PS2DC_ENTER, mk_or_bk);
     6de:	44 23       	and	r20, r20
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <send_kbcode_for_ir+0x46a>
     6e2:	41 30       	cpi	r20, 0x01	; 1
     6e4:	39 f0       	breq	.+14     	; 0x6f4 <send_kbcode_for_ir+0x476>
     6e6:	0f c0       	rjmp	.+30     	; 0x706 <send_kbcode_for_ir+0x488>
     6e8:	8a e5       	ldi	r24, 0x5A	; 90
     6ea:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6ee:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     6f2:	08 95       	ret
     6f4:	80 ef       	ldi	r24, 0xF0	; 240
     6f6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     6fa:	8a e5       	ldi	r24, 0x5A	; 90
     6fc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     700:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     704:	08 95       	ret
        case MCEH_BACK_1:
        case MCEH_BACK_2:
            SEND_CODE(PS2DC_ESC, mk_or_bk);
     706:	44 23       	and	r20, r20
     708:	19 f0       	breq	.+6      	; 0x710 <send_kbcode_for_ir+0x492>
     70a:	41 30       	cpi	r20, 0x01	; 1
     70c:	39 f0       	breq	.+14     	; 0x71c <send_kbcode_for_ir+0x49e>
     70e:	0f c0       	rjmp	.+30     	; 0x72e <send_kbcode_for_ir+0x4b0>
     710:	86 e7       	ldi	r24, 0x76	; 118
     712:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     716:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     71a:	08 95       	ret
     71c:	80 ef       	ldi	r24, 0xF0	; 240
     71e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     722:	86 e7       	ldi	r24, 0x76	; 118
     724:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     728:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     72c:	08 95       	ret
        // Play control keys
        case MCEH_PLAY_1:
        case MCEH_PLAY_2:
        case MCEH_PAUSE_1:
        case MCEH_PAUSE_2:
            SEND_EXT_CODE(PS2DC_MM_PLAY_PAUSE_EXT, mk_or_bk);
     72e:	44 23       	and	r20, r20
     730:	19 f0       	breq	.+6      	; 0x738 <send_kbcode_for_ir+0x4ba>
     732:	41 30       	cpi	r20, 0x01	; 1
     734:	51 f0       	breq	.+20     	; 0x74a <send_kbcode_for_ir+0x4cc>
     736:	15 c0       	rjmp	.+42     	; 0x762 <send_kbcode_for_ir+0x4e4>
     738:	80 ee       	ldi	r24, 0xE0	; 224
     73a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     73e:	84 e3       	ldi	r24, 0x34	; 52
     740:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     744:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     748:	08 95       	ret
     74a:	80 ef       	ldi	r24, 0xF0	; 240
     74c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     750:	80 ee       	ldi	r24, 0xE0	; 224
     752:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     756:	84 e3       	ldi	r24, 0x34	; 52
     758:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     75c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     760:	08 95       	ret
        case MCEH_STOP_1:
        case MCEH_STOP_2:
            SEND_EXT_CODE(PS2DC_MM_STOP_EXT, mk_or_bk);
     762:	44 23       	and	r20, r20
     764:	19 f0       	breq	.+6      	; 0x76c <send_kbcode_for_ir+0x4ee>
     766:	41 30       	cpi	r20, 0x01	; 1
     768:	51 f0       	breq	.+20     	; 0x77e <send_kbcode_for_ir+0x500>
     76a:	15 c0       	rjmp	.+42     	; 0x796 <send_kbcode_for_ir+0x518>
     76c:	80 ee       	ldi	r24, 0xE0	; 224
     76e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     772:	8b e3       	ldi	r24, 0x3B	; 59
     774:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     778:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     77c:	08 95       	ret
     77e:	80 ef       	ldi	r24, 0xF0	; 240
     780:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     784:	80 ee       	ldi	r24, 0xE0	; 224
     786:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     78a:	8b e3       	ldi	r24, 0x3B	; 59
     78c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     790:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     794:	08 95       	ret
        case MCEH_FAST_FORWARD_1:
        case MCEH_FAST_FORWARD_2:
            SEND_EXT_CODE(PS2DC_MM_FWD_EXT, mk_or_bk);
     796:	44 23       	and	r20, r20
     798:	19 f0       	breq	.+6      	; 0x7a0 <send_kbcode_for_ir+0x522>
     79a:	41 30       	cpi	r20, 0x01	; 1
     79c:	51 f0       	breq	.+20     	; 0x7b2 <send_kbcode_for_ir+0x534>
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <send_kbcode_for_ir+0x54c>
     7a0:	80 ee       	ldi	r24, 0xE0	; 224
     7a2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7a6:	8d e4       	ldi	r24, 0x4D	; 77
     7a8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7ac:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     7b0:	08 95       	ret
     7b2:	80 ef       	ldi	r24, 0xF0	; 240
     7b4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7b8:	80 ee       	ldi	r24, 0xE0	; 224
     7ba:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7be:	8d e4       	ldi	r24, 0x4D	; 77
     7c0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7c4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     7c8:	08 95       	ret
        case MCEH_REPLAY_1:
        case MCEH_REPLAY_2:
            SEND_EXT_CODE(PS2DC_MM_PREV_EXT, mk_or_bk);
     7ca:	44 23       	and	r20, r20
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <send_kbcode_for_ir+0x556>
     7ce:	41 30       	cpi	r20, 0x01	; 1
     7d0:	51 f0       	breq	.+20     	; 0x7e6 <send_kbcode_for_ir+0x568>
     7d2:	15 c0       	rjmp	.+42     	; 0x7fe <send_kbcode_for_ir+0x580>
     7d4:	80 ee       	ldi	r24, 0xE0	; 224
     7d6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7da:	85 e1       	ldi	r24, 0x15	; 21
     7dc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7e0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     7e4:	08 95       	ret
     7e6:	80 ef       	ldi	r24, 0xF0	; 240
     7e8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7ec:	80 ee       	ldi	r24, 0xE0	; 224
     7ee:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7f2:	85 e1       	ldi	r24, 0x15	; 21
     7f4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     7f8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     7fc:	08 95       	ret
        case MCEH_SKIP_1:
        case MCEH_SKIP_2:
            SEND_EXT_CODE(PS2DC_PG_UP_EXT, mk_or_bk); // we send PageUp here
     7fe:	44 23       	and	r20, r20
     800:	19 f0       	breq	.+6      	; 0x808 <send_kbcode_for_ir+0x58a>
     802:	41 30       	cpi	r20, 0x01	; 1
     804:	51 f0       	breq	.+20     	; 0x81a <send_kbcode_for_ir+0x59c>
     806:	15 c0       	rjmp	.+42     	; 0x832 <send_kbcode_for_ir+0x5b4>
     808:	80 ee       	ldi	r24, 0xE0	; 224
     80a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     80e:	8d e7       	ldi	r24, 0x7D	; 125
     810:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     814:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     818:	08 95       	ret
     81a:	80 ef       	ldi	r24, 0xF0	; 240
     81c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     820:	80 ee       	ldi	r24, 0xE0	; 224
     822:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     826:	8d e7       	ldi	r24, 0x7D	; 125
     828:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     82c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     830:	08 95       	ret
        case MCEH_REWIND_1:
        case MCEH_REWIND_2:
            SEND_EXT_CODE(PS2DC_PG_DN_EXT, mk_or_bk); // we send PageDown here
     832:	44 23       	and	r20, r20
     834:	19 f0       	breq	.+6      	; 0x83c <send_kbcode_for_ir+0x5be>
     836:	41 30       	cpi	r20, 0x01	; 1
     838:	51 f0       	breq	.+20     	; 0x84e <send_kbcode_for_ir+0x5d0>
     83a:	15 c0       	rjmp	.+42     	; 0x866 <send_kbcode_for_ir+0x5e8>
     83c:	80 ee       	ldi	r24, 0xE0	; 224
     83e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     842:	8a e7       	ldi	r24, 0x7A	; 122
     844:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     848:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     84c:	08 95       	ret
     84e:	80 ef       	ldi	r24, 0xF0	; 240
     850:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     854:	80 ee       	ldi	r24, 0xE0	; 224
     856:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     85a:	8a e7       	ldi	r24, 0x7A	; 122
     85c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     860:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     864:	08 95       	ret
        case MCEH_CHANNEL_UP_1:
        case MCEH_CHANNEL_UP_2:
            SEND_EXT_CODE(PS2DC_PG_UP_EXT, mk_or_bk);
     866:	44 23       	and	r20, r20
     868:	19 f0       	breq	.+6      	; 0x870 <send_kbcode_for_ir+0x5f2>
     86a:	41 30       	cpi	r20, 0x01	; 1
     86c:	51 f0       	breq	.+20     	; 0x882 <send_kbcode_for_ir+0x604>
     86e:	15 c0       	rjmp	.+42     	; 0x89a <send_kbcode_for_ir+0x61c>
     870:	80 ee       	ldi	r24, 0xE0	; 224
     872:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     876:	8d e7       	ldi	r24, 0x7D	; 125
     878:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     87c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     880:	08 95       	ret
     882:	80 ef       	ldi	r24, 0xF0	; 240
     884:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     888:	80 ee       	ldi	r24, 0xE0	; 224
     88a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     88e:	8d e7       	ldi	r24, 0x7D	; 125
     890:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     894:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     898:	08 95       	ret
        case MCEH_CHANNEL_DOWN_1:
        case MCEH_CHANNEL_DOWN_2:
            SEND_EXT_CODE(PS2DC_PG_DN_EXT, mk_or_bk);
     89a:	44 23       	and	r20, r20
     89c:	19 f0       	breq	.+6      	; 0x8a4 <send_kbcode_for_ir+0x626>
     89e:	41 30       	cpi	r20, 0x01	; 1
     8a0:	51 f0       	breq	.+20     	; 0x8b6 <send_kbcode_for_ir+0x638>
     8a2:	15 c0       	rjmp	.+42     	; 0x8ce <send_kbcode_for_ir+0x650>
     8a4:	80 ee       	ldi	r24, 0xE0	; 224
     8a6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8aa:	8a e7       	ldi	r24, 0x7A	; 122
     8ac:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8b0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     8b4:	08 95       	ret
     8b6:	80 ef       	ldi	r24, 0xF0	; 240
     8b8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8bc:	80 ee       	ldi	r24, 0xE0	; 224
     8be:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8c2:	8a e7       	ldi	r24, 0x7A	; 122
     8c4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8c8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     8cc:	08 95       	ret
            
        // volume keys
        case MCEH_VOL_UP_1:
        case MCEH_VOL_UP_2:
            SEND_EXT_CODE(PS2DC_MM_VOL_UP_EXT, mk_or_bk);
     8ce:	44 23       	and	r20, r20
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <send_kbcode_for_ir+0x65a>
     8d2:	41 30       	cpi	r20, 0x01	; 1
     8d4:	51 f0       	breq	.+20     	; 0x8ea <send_kbcode_for_ir+0x66c>
     8d6:	15 c0       	rjmp	.+42     	; 0x902 <__stack+0x3>
     8d8:	80 ee       	ldi	r24, 0xE0	; 224
     8da:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8de:	82 e3       	ldi	r24, 0x32	; 50
     8e0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8e4:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     8e8:	08 95       	ret
     8ea:	80 ef       	ldi	r24, 0xF0	; 240
     8ec:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8f0:	80 ee       	ldi	r24, 0xE0	; 224
     8f2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8f6:	82 e3       	ldi	r24, 0x32	; 50
     8f8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     8fc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     900:	08 95       	ret
        case MCEH_VOL_DOWN_1:
        case MCEH_VOL_DOWN_2:
            SEND_EXT_CODE(PS2DC_MM_VOL_DOWN_EXT, mk_or_bk);
     902:	44 23       	and	r20, r20
     904:	19 f0       	breq	.+6      	; 0x90c <__stack+0xd>
     906:	41 30       	cpi	r20, 0x01	; 1
     908:	51 f0       	breq	.+20     	; 0x91e <__stack+0x1f>
     90a:	15 c0       	rjmp	.+42     	; 0x936 <__stack+0x37>
     90c:	80 ee       	ldi	r24, 0xE0	; 224
     90e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     912:	81 e2       	ldi	r24, 0x21	; 33
     914:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     918:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     91c:	08 95       	ret
     91e:	80 ef       	ldi	r24, 0xF0	; 240
     920:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     924:	80 ee       	ldi	r24, 0xE0	; 224
     926:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     92a:	81 e2       	ldi	r24, 0x21	; 33
     92c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     930:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     934:	08 95       	ret
        // special mappings
        case MCEH_GUIDE_1:
        case MCEH_GUIDE_2:
            SEND_2KEY_CODE(PS2DC_R_GUI_EXT, 1, PS2DC_1, 0, mk_or_bk);
     936:	44 23       	and	r20, r20
     938:	19 f0       	breq	.+6      	; 0x940 <__stack+0x41>
     93a:	41 30       	cpi	r20, 0x01	; 1
     93c:	79 f0       	breq	.+30     	; 0x95c <__stack+0x5d>
     93e:	22 c0       	rjmp	.+68     	; 0x984 <__stack+0x85>
     940:	80 ee       	ldi	r24, 0xE0	; 224
     942:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     946:	87 e2       	ldi	r24, 0x27	; 39
     948:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     94c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     950:	86 e1       	ldi	r24, 0x16	; 22
     952:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     956:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     95a:	08 95       	ret
     95c:	80 ef       	ldi	r24, 0xF0	; 240
     95e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     962:	86 e1       	ldi	r24, 0x16	; 22
     964:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     968:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     96c:	80 ef       	ldi	r24, 0xF0	; 240
     96e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     972:	80 ee       	ldi	r24, 0xE0	; 224
     974:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     978:	87 e2       	ldi	r24, 0x27	; 39
     97a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     97e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     982:	08 95       	ret

        // F2 key to be able to enter BIOS Setup
        case MCEH_RED_1:
        case MCEH_RED_2:
            SEND_CODE(PS2DC_F2, mk_or_bk);
     984:	44 23       	and	r20, r20
     986:	19 f0       	breq	.+6      	; 0x98e <__stack+0x8f>
     988:	41 30       	cpi	r20, 0x01	; 1
     98a:	39 f0       	breq	.+14     	; 0x99a <__stack+0x9b>
     98c:	08 95       	ret
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     994:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     998:	08 95       	ret
     99a:	80 ef       	ldi	r24, 0xF0	; 240
     99c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <add_char_to_send_buf>
     9a6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <do_ps2device_work>
     9aa:	08 95       	ret

000009ac <_get_char_from_log_buf>:
static volatile uint8_t _log_buf_head = 0;
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
     9ac:	80 91 dc 01 	lds	r24, 0x01DC
     9b0:	88 23       	and	r24, r24
     9b2:	99 f0       	breq	.+38     	; 0x9da <_get_char_from_log_buf+0x2e>
		return 0;
	}
	char c = _log_buf[_log_buf_head];
     9b4:	e0 91 dd 01 	lds	r30, 0x01DD
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	e2 52       	subi	r30, 0x22	; 34
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	80 81       	ld	r24, Z
	_log_buf_head++;
     9c0:	90 91 dd 01 	lds	r25, 0x01DD
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
     9c6:	90 93 dd 01 	sts	0x01DD, r25
	_log_buf_len--;
     9ca:	90 91 dc 01 	lds	r25, 0x01DC
     9ce:	91 50       	subi	r25, 0x01	; 1
     9d0:	90 93 dc 01 	sts	0x01DC, r25
	if (_log_buf_head >= LOG_BUF_SIZE) {
     9d4:	90 91 dd 01 	lds	r25, 0x01DD
		_log_buf_head = 0;
	}
	return c;
     9d8:	08 95       	ret
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
		return 0;
     9da:	80 e0       	ldi	r24, 0x00	; 0
	_log_buf_len--;
	if (_log_buf_head >= LOG_BUF_SIZE) {
		_log_buf_head = 0;
	}
	return c;
}
     9dc:	08 95       	ret

000009de <__vector_19>:
	_log_buf_len++;
	sei();
	return true;
}

ISR(USART_UDRE_vect) {
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	// if num char in buf <= 1 then disable this int
	// if char in buf -> get char from bug and put in UART
	char c = _get_char_from_log_buf();
     a00:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_get_char_from_log_buf>
	if (c) {
     a04:	88 23       	and	r24, r24
     a06:	19 f0       	breq	.+6      	; 0xa0e <__vector_19+0x30>
		UDR0 = c;
     a08:	80 93 c6 00 	sts	0x00C6, r24
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <__vector_19+0x3a>
	} else {
		UCSR0B &= ~_BV(UDRIE0);
     a0e:	e1 ec       	ldi	r30, 0xC1	; 193
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8f 7d       	andi	r24, 0xDF	; 223
     a16:	80 83       	st	Z, r24
	}
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <debug_log>:

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 81       	ld	r18, Z
     a3e:	22 23       	and	r18, r18
     a40:	b9 f0       	breq	.+46     	; 0xa70 <debug_log+0x36>
     a42:	dc 01       	movw	r26, r24
     a44:	11 96       	adiw	r26, 0x01	; 1
	return c;
}

// returns true if successful and false if buffer full
static bool _put_char_into_log_buf(char c) {
	cli();
     a46:	f8 94       	cli
	if (_log_buf_len >= LOG_BUF_SIZE) {
     a48:	80 91 dc 01 	lds	r24, 0x01DC
		sei();
		return false;
	}
	uint8_t i = _log_buf_head + _log_buf_len;
     a4c:	90 91 dd 01 	lds	r25, 0x01DD
     a50:	e0 91 dc 01 	lds	r30, 0x01DC
     a54:	e9 0f       	add	r30, r25
	if (i >= LOG_BUF_SIZE) {
		i -= LOG_BUF_SIZE;
	}
	_log_buf[i] = c;
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	e2 52       	subi	r30, 0x22	; 34
     a5a:	fe 4f       	sbci	r31, 0xFE	; 254
     a5c:	20 83       	st	Z, r18
	_log_buf_len++;
     a5e:	90 91 dc 01 	lds	r25, 0x01DC
     a62:	9f 5f       	subi	r25, 0xFF	; 255
     a64:	90 93 dc 01 	sts	0x01DC, r25
	sei();
     a68:	78 94       	sei
	}
}

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     a6a:	2d 91       	ld	r18, X+
     a6c:	21 11       	cpse	r18, r1
     a6e:	eb cf       	rjmp	.-42     	; 0xa46 <debug_log+0xc>
		if (!_put_char_into_log_buf(str[i])) {
			break;
		}
	}
	// if !(USART_UDRE enabled) then enabled it and put first char in UART
	if (!(UCSR0B & _BV(UDRIE0))) {
     a70:	80 91 c1 00 	lds	r24, 0x00C1
     a74:	85 fd       	sbrc	r24, 5
     a76:	0d c0       	rjmp	.+26     	; 0xa92 <debug_log+0x58>
		cli();
     a78:	f8 94       	cli
		char c = _get_char_from_log_buf();
     a7a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_get_char_from_log_buf>
		if (c) {
     a7e:	88 23       	and	r24, r24
     a80:	39 f0       	breq	.+14     	; 0xa90 <debug_log+0x56>
			UCSR0B |= _BV(UDRIE0);
     a82:	e1 ec       	ldi	r30, 0xC1	; 193
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	90 81       	ld	r25, Z
     a88:	90 62       	ori	r25, 0x20	; 32
     a8a:	90 83       	st	Z, r25
			UDR0 = c;
     a8c:	80 93 c6 00 	sts	0x00C6, r24
		}
		sei();		
     a90:	78 94       	sei
     a92:	08 95       	ret

00000a94 <init_debug_log>:
	}
}

void init_debug_log() {
	UCSR0A = _BV(U2X0);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 93 c0 00 	sts	0x00C0, r24
	UBRR0L = 8; //115200 baud - see page 188 of ATmega328 book
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(TXEN0); /* only tx enable */
     aa0:	80 93 c1 00 	sts	0x00C1, r24
     aa4:	08 95       	ret

00000aa6 <__vector_7>:
// First entry is the SPACE between transmissions.
//    -> we don't need that at all. carries no information since the counter overflows without detection
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
ISR(TIMER2_COMPA_vect)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31

	uint8_t irdata = bit_is_set(_IRPIN,IR_RECV_PIN) ? SPACE : MARK;
     ac4:	89 b1       	in	r24, 0x09	; 9
     ac6:	82 fb       	bst	r24, 2
     ac8:	88 27       	eor	r24, r24
     aca:	80 f9       	bld	r24, 0

	if (irparams.rawlen >= RAWBUF) {
     acc:	90 91 a9 04 	lds	r25, 0x04A9
     ad0:	94 36       	cpi	r25, 0x64	; 100
     ad2:	18 f0       	brcs	.+6      	; 0xada <__vector_7+0x34>
		// Buffer overflow
		irparams.rcvstate = STATE_TRANSMISSION_COMPLETED;
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	90 93 de 03 	sts	0x03DE, r25
	}
	switch(irparams.rcvstate) {
     ada:	90 91 de 03 	lds	r25, 0x03DE
     ade:	91 30       	cpi	r25, 0x01	; 1
     ae0:	11 f1       	breq	.+68     	; 0xb26 <__vector_7+0x80>
     ae2:	38 f0       	brcs	.+14     	; 0xaf2 <__vector_7+0x4c>
     ae4:	92 30       	cpi	r25, 0x02	; 2
     ae6:	09 f4       	brne	.+2      	; 0xaea <__vector_7+0x44>
     ae8:	4a c0       	rjmp	.+148    	; 0xb7e <__vector_7+0xd8>
     aea:	93 30       	cpi	r25, 0x03	; 3
     aec:	09 f4       	brne	.+2      	; 0xaf0 <__vector_7+0x4a>
     aee:	7c c0       	rjmp	.+248    	; 0xbe8 <__vector_7+0x142>
     af0:	8a c0       	rjmp	.+276    	; 0xc06 <__vector_7+0x160>
		case STATE_IDLE: // In the middle of a gap
            INC_TIMER;
     af2:	20 91 df 03 	lds	r18, 0x03DF
     af6:	30 91 e0 03 	lds	r19, 0x03E0
     afa:	29 3b       	cpi	r18, 0xB9	; 185
     afc:	3b 40       	sbci	r19, 0x0B	; 11
     afe:	40 f4       	brcc	.+16     	; 0xb10 <__vector_7+0x6a>
     b00:	ee ed       	ldi	r30, 0xDE	; 222
     b02:	f3 e0       	ldi	r31, 0x03	; 3
     b04:	21 81       	ldd	r18, Z+1	; 0x01
     b06:	32 81       	ldd	r19, Z+2	; 0x02
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	32 83       	std	Z+2, r19	; 0x02
     b0e:	21 83       	std	Z+1, r18	; 0x01
			if (irdata == MARK) {
     b10:	81 11       	cpse	r24, r1
     b12:	7d c0       	rjmp	.+250    	; 0xc0e <__vector_7+0x168>
				irparams.timer = 0;
     b14:	ee ed       	ldi	r30, 0xDE	; 222
     b16:	f3 e0       	ldi	r31, 0x03	; 3
     b18:	12 82       	std	Z+2, r1	; 0x02
     b1a:	11 82       	std	Z+1, r1	; 0x01
				irparams.rawlen = 0;
     b1c:	10 92 a9 04 	sts	0x04A9, r1
				irparams.rcvstate = STATE_MARK;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 83       	st	Z, r24
     b24:	72 c0       	rjmp	.+228    	; 0xc0a <__vector_7+0x164>
                // original had GAP handling here. Need to check if it is necessary.
			}
			break;
		case STATE_MARK: // timing MARK
			if (irdata == SPACE) {   // MARK ended, record time
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	c9 f4       	brne	.+50     	; 0xb5c <__vector_7+0xb6>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     b2a:	ae ed       	ldi	r26, 0xDE	; 222
     b2c:	b3 e0       	ldi	r27, 0x03	; 3
     b2e:	c9 ea       	ldi	r28, 0xA9	; 169
     b30:	d4 e0       	ldi	r29, 0x04	; 4
     b32:	e8 81       	ld	r30, Y
     b34:	8e 0f       	add	r24, r30
     b36:	88 83       	st	Y, r24
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	8d 91       	ld	r24, X+
     b3e:	9c 91       	ld	r25, X
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	ee 0f       	add	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	e2 52       	subi	r30, 0x22	; 34
     b48:	fc 4f       	sbci	r31, 0xFC	; 252
     b4a:	94 83       	std	Z+4, r25	; 0x04
     b4c:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	1c 92       	st	X, r1
     b52:	1e 92       	st	-X, r1
     b54:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_SPACE;
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	8c 93       	st	X, r24
     b5a:	59 c0       	rjmp	.+178    	; 0xc0e <__vector_7+0x168>
			}
            else
            {
                INC_TIMER;
     b5c:	20 91 df 03 	lds	r18, 0x03DF
     b60:	30 91 e0 03 	lds	r19, 0x03E0
     b64:	29 3b       	cpi	r18, 0xB9	; 185
     b66:	3b 40       	sbci	r19, 0x0B	; 11
     b68:	08 f0       	brcs	.+2      	; 0xb6c <__vector_7+0xc6>
     b6a:	4d c0       	rjmp	.+154    	; 0xc06 <__vector_7+0x160>
     b6c:	ee ed       	ldi	r30, 0xDE	; 222
     b6e:	f3 e0       	ldi	r31, 0x03	; 3
     b70:	21 81       	ldd	r18, Z+1	; 0x01
     b72:	32 81       	ldd	r19, Z+2	; 0x02
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	32 83       	std	Z+2, r19	; 0x02
     b7a:	21 83       	std	Z+1, r18	; 0x01
     b7c:	44 c0       	rjmp	.+136    	; 0xc06 <__vector_7+0x160>
            }                
			break;
		case STATE_SPACE: // timing SPACE
			if (irdata == MARK) { // SPACE just ended, record it
     b7e:	81 11       	cpse	r24, r1
     b80:	1a c0       	rjmp	.+52     	; 0xbb6 <__vector_7+0x110>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     b82:	ae ed       	ldi	r26, 0xDE	; 222
     b84:	b3 e0       	ldi	r27, 0x03	; 3
     b86:	c9 ea       	ldi	r28, 0xA9	; 169
     b88:	d4 e0       	ldi	r29, 0x04	; 4
     b8a:	e8 81       	ld	r30, Y
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8e 0f       	add	r24, r30
     b90:	88 83       	st	Y, r24
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	8d 91       	ld	r24, X+
     b98:	9c 91       	ld	r25, X
     b9a:	12 97       	sbiw	r26, 0x02	; 2
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	e2 52       	subi	r30, 0x22	; 34
     ba2:	fc 4f       	sbci	r31, 0xFC	; 252
     ba4:	94 83       	std	Z+4, r25	; 0x04
     ba6:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     ba8:	12 96       	adiw	r26, 0x02	; 2
     baa:	1c 92       	st	X, r1
     bac:	1e 92       	st	-X, r1
     bae:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_MARK;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	8c 93       	st	X, r24
     bb4:	2a c0       	rjmp	.+84     	; 0xc0a <__vector_7+0x164>
			}
			else { // SPACE
                INC_TIMER;
     bb6:	80 91 df 03 	lds	r24, 0x03DF
     bba:	90 91 e0 03 	lds	r25, 0x03E0
     bbe:	89 3b       	cpi	r24, 0xB9	; 185
     bc0:	9b 40       	sbci	r25, 0x0B	; 11
     bc2:	38 f4       	brcc	.+14     	; 0xbd2 <__vector_7+0x12c>
     bc4:	ee ed       	ldi	r30, 0xDE	; 222
     bc6:	f3 e0       	ldi	r31, 0x03	; 3
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	92 81       	ldd	r25, Z+2	; 0x02
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	92 83       	std	Z+2, r25	; 0x02
     bd0:	81 83       	std	Z+1, r24	; 0x01
				if (irparams.timer > GAP_TICKS) {
     bd2:	80 91 df 03 	lds	r24, 0x03DF
     bd6:	90 91 e0 03 	lds	r25, 0x03E0
     bda:	85 36       	cpi	r24, 0x65	; 101
     bdc:	91 05       	cpc	r25, r1
     bde:	b8 f0       	brcs	.+46     	; 0xc0e <__vector_7+0x168>
					// big SPACE, indicates gap between codes
					// Mark current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting space width
					irparams.rcvstate = STATE_TRANSMISSION_COMPLETED;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 de 03 	sts	0x03DE, r24
     be6:	13 c0       	rjmp	.+38     	; 0xc0e <__vector_7+0x168>
				}
			}
			break;
		case STATE_TRANSMISSION_COMPLETED: // waiting, measuring gap
            INC_TIMER;
     be8:	20 91 df 03 	lds	r18, 0x03DF
     bec:	30 91 e0 03 	lds	r19, 0x03E0
     bf0:	29 3b       	cpi	r18, 0xB9	; 185
     bf2:	3b 40       	sbci	r19, 0x0B	; 11
     bf4:	40 f4       	brcc	.+16     	; 0xc06 <__vector_7+0x160>
     bf6:	ee ed       	ldi	r30, 0xDE	; 222
     bf8:	f3 e0       	ldi	r31, 0x03	; 3
     bfa:	21 81       	ldd	r18, Z+1	; 0x01
     bfc:	32 81       	ldd	r19, Z+2	; 0x02
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	32 83       	std	Z+2, r19	; 0x02
     c04:	21 83       	std	Z+1, r18	; 0x01
            // we stay in stop until decode_hash resurrects us.
			break;
	}

#ifdef BLINK_LED
	if (irdata == MARK)
     c06:	81 11       	cpse	r24, r1
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <__vector_7+0x168>
    {
		_LED_PORT |= _BV(BLINK_LED_PIN);
     c0a:	45 9a       	sbi	0x08, 5	; 8
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__vector_7+0x16a>
	}
	else
    {
		_LED_PORT &=~ _BV(BLINK_LED_PIN);
     c0e:	45 98       	cbi	0x08, 5	; 8
	}
#endif
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <compare>:
// ----Use a tolerance of 20%
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
    unsigned int tolerance = 4;
	if (newval < oldval - tolerance) {
     c2e:	9c 01       	movw	r18, r24
     c30:	24 50       	subi	r18, 0x04	; 4
     c32:	31 09       	sbc	r19, r1
     c34:	62 17       	cp	r22, r18
     c36:	73 07       	cpc	r23, r19
     c38:	40 f0       	brcs	.+16     	; 0xc4a <compare+0x1c>
		return 0;
	}
	else if (oldval < newval - tolerance) {
     c3a:	64 50       	subi	r22, 0x04	; 4
     c3c:	71 09       	sbc	r23, r1
     c3e:	86 17       	cp	r24, r22
     c40:	97 07       	cpc	r25, r23
     c42:	30 f0       	brcs	.+12     	; 0xc50 <compare+0x22>
		return 2;
	}
	else {
		return 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	08 95       	ret
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
    unsigned int tolerance = 4;
	if (newval < oldval - tolerance) {
		return 0;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	08 95       	ret
	}
	else if (oldval < newval - tolerance) {
		return 2;
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 1;
	}
}
     c54:	08 95       	ret

00000c56 <decodeHashIRRecv>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
DECODE_STATE decodeHashIRRecv(volatile decode_results_t *results) {
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	8c 01       	movw	r16, r24
    switch (irparams.rcvstate)
     c6c:	90 91 de 03 	lds	r25, 0x03DE
     c70:	99 23       	and	r25, r25
     c72:	19 f0       	breq	.+6      	; 0xc7a <decodeHashIRRecv+0x24>
     c74:	93 30       	cpi	r25, 0x03	; 3
     c76:	88 f4       	brcc	.+34     	; 0xc9a <decodeHashIRRecv+0x44>
     c78:	87 c0       	rjmp	.+270    	; 0xd88 <decodeHashIRRecv+0x132>
        case STATE_MARK:
        case STATE_SPACE:
            return IN_TRANSMISSION;
        case STATE_IDLE:
        {
            if (!break_sent && irparams.timer >= BTN_RELEASE_GAP_TICKS)
     c7a:	80 91 00 01 	lds	r24, 0x0100
     c7e:	81 11       	cpse	r24, r1
     c80:	85 c0       	rjmp	.+266    	; 0xd8c <decodeHashIRRecv+0x136>
     c82:	80 91 df 03 	lds	r24, 0x03DF
     c86:	90 91 e0 03 	lds	r25, 0x03E0
     c8a:	88 3b       	cpi	r24, 0xB8	; 184
     c8c:	9b 40       	sbci	r25, 0x0B	; 11
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <decodeHashIRRecv+0x3c>
     c90:	7f c0       	rjmp	.+254    	; 0xd90 <decodeHashIRRecv+0x13a>
            {
                break_sent = true;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 00 01 	sts	0x0100, r24
                return BUTTON_RELEASED;
     c98:	7c c0       	rjmp	.+248    	; 0xd92 <decodeHashIRRecv+0x13c>
            }
        }
        case STATE_TRANSMISSION_COMPLETED:
        default:
        {
            results->rawbuf = irparams.rawbuf;
     c9a:	81 ee       	ldi	r24, 0xE1	; 225
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	d8 01       	movw	r26, r16
     ca0:	18 96       	adiw	r26, 0x08	; 8
     ca2:	9c 93       	st	X, r25
     ca4:	8e 93       	st	-X, r24
     ca6:	17 97       	sbiw	r26, 0x07	; 7
            results->rawlen = irparams.rawlen;
     ca8:	80 91 a9 04 	lds	r24, 0x04A9
     cac:	19 96       	adiw	r26, 0x09	; 9
     cae:	8c 93       	st	X, r24
     cb0:	19 97       	sbiw	r26, 0x09	; 9
    
            long hash = FNV_BASIS_32;
            for (int i = 0; i+2 < results->rawlen; i++)
     cb2:	19 96       	adiw	r26, 0x09	; 9
     cb4:	8c 91       	ld	r24, X
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	03 97       	sbiw	r24, 0x03	; 3
     cba:	0c f4       	brge	.+2      	; 0xcbe <decodeHashIRRecv+0x68>
     cbc:	43 c0       	rjmp	.+134    	; 0xd44 <decodeHashIRRecv+0xee>
     cbe:	0f 2e       	mov	r0, r31
     cc0:	f3 e0       	ldi	r31, 0x03	; 3
     cc2:	af 2e       	mov	r10, r31
     cc4:	b1 2c       	mov	r11, r1
     cc6:	f0 2d       	mov	r31, r0
     cc8:	c0 e0       	ldi	r28, 0x00	; 0
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	0f 2e       	mov	r0, r31
     cce:	f5 ec       	ldi	r31, 0xC5	; 197
     cd0:	cf 2e       	mov	r12, r31
     cd2:	fd e9       	ldi	r31, 0x9D	; 157
     cd4:	df 2e       	mov	r13, r31
     cd6:	fc e1       	ldi	r31, 0x1C	; 28
     cd8:	ef 2e       	mov	r14, r31
     cda:	f1 e8       	ldi	r31, 0x81	; 129
     cdc:	ff 2e       	mov	r15, r31
     cde:	f0 2d       	mov	r31, r0
            {
                int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
     ce0:	d8 01       	movw	r26, r16
     ce2:	17 96       	adiw	r26, 0x07	; 7
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	18 97       	sbiw	r26, 0x08	; 8
     cea:	ce 01       	movw	r24, r28
     cec:	04 96       	adiw	r24, 0x04	; 4
     cee:	e8 0f       	add	r30, r24
     cf0:	f9 1f       	adc	r31, r25
     cf2:	60 81       	ld	r22, Z
     cf4:	71 81       	ldd	r23, Z+1	; 0x01
     cf6:	17 96       	adiw	r26, 0x07	; 7
     cf8:	ed 91       	ld	r30, X+
     cfa:	fc 91       	ld	r31, X
     cfc:	18 97       	sbiw	r26, 0x08	; 8
     cfe:	ec 0f       	add	r30, r28
     d00:	fd 1f       	adc	r31, r29
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	0e 94 17 06 	call	0xc2e	; 0xc2e <compare>
     d0a:	fc 01       	movw	r30, r24
                // Add value into the hash
                hash = (hash * FNV_PRIME_32) ^ value;
     d0c:	a7 01       	movw	r20, r14
     d0e:	96 01       	movw	r18, r12
     d10:	63 e9       	ldi	r22, 0x93	; 147
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__mulsi3>
     d1c:	6f 01       	movw	r12, r30
     d1e:	ff 0f       	add	r31, r31
     d20:	ee 08       	sbc	r14, r14
     d22:	ff 08       	sbc	r15, r15
     d24:	c6 26       	eor	r12, r22
     d26:	d7 26       	eor	r13, r23
     d28:	e8 26       	eor	r14, r24
     d2a:	f9 26       	eor	r15, r25
        {
            results->rawbuf = irparams.rawbuf;
            results->rawlen = irparams.rawlen;
    
            long hash = FNV_BASIS_32;
            for (int i = 0; i+2 < results->rawlen; i++)
     d2c:	95 01       	movw	r18, r10
     d2e:	f8 01       	movw	r30, r16
     d30:	81 85       	ldd	r24, Z+9	; 0x09
     d32:	22 96       	adiw	r28, 0x02	; 2
     d34:	ff ef       	ldi	r31, 0xFF	; 255
     d36:	af 1a       	sub	r10, r31
     d38:	bf 0a       	sbc	r11, r31
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	7c f2       	brlt	.-98     	; 0xce0 <decodeHashIRRecv+0x8a>
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <decodeHashIRRecv+0x102>
        default:
        {
            results->rawbuf = irparams.rawbuf;
            results->rawlen = irparams.rawlen;
    
            long hash = FNV_BASIS_32;
     d44:	0f 2e       	mov	r0, r31
     d46:	f5 ec       	ldi	r31, 0xC5	; 197
     d48:	cf 2e       	mov	r12, r31
     d4a:	fd e9       	ldi	r31, 0x9D	; 157
     d4c:	df 2e       	mov	r13, r31
     d4e:	fc e1       	ldi	r31, 0x1C	; 28
     d50:	ef 2e       	mov	r14, r31
     d52:	f1 e8       	ldi	r31, 0x81	; 129
     d54:	ff 2e       	mov	r15, r31
     d56:	f0 2d       	mov	r31, r0
            {
                int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
                // Add value into the hash
                hash = (hash * FNV_PRIME_32) ^ value;
            }
            results->value = hash;
     d58:	d8 01       	movw	r26, r16
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	cd 92       	st	X+, r12
     d5e:	dd 92       	st	X+, r13
     d60:	ed 92       	st	X+, r14
     d62:	fc 92       	st	X, r15
     d64:	15 97       	sbiw	r26, 0x05	; 5
            results->bits = 32;
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	16 96       	adiw	r26, 0x06	; 6
     d6a:	8c 93       	st	X, r24
     d6c:	16 97       	sbiw	r26, 0x06	; 6
            results->decode_type = HASH;
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	9c 93       	st	X, r25
     d76:	8e 93       	st	-X, r24

            irparams.rcvstate = STATE_IDLE;
     d78:	10 92 de 03 	sts	0x03DE, r1
            break_sent = false;
     d7c:	10 92 00 01 	sts	0x0100, r1
            irparams.rawlen = 0;
     d80:	10 92 a9 04 	sts	0x04A9, r1

            return DECODED;
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <decodeHashIRRecv+0x13c>
DECODE_STATE decodeHashIRRecv(volatile decode_results_t *results) {
    switch (irparams.rcvstate)
    {
        case STATE_MARK:
        case STATE_SPACE:
            return IN_TRANSMISSION;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <decodeHashIRRecv+0x13c>
                break_sent = true;
                return BUTTON_RELEASED;
            }
            else
            {
                return IDLE;
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <decodeHashIRRecv+0x13c>
     d90:	83 e0       	ldi	r24, 0x03	; 3
            irparams.rawlen = 0;

            return DECODED;
        }
    }
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <enableIRRecv>:

// initialization
void enableIRRecv() {
	cli();
     da8:	f8 94       	cli
	// setup pulse clock timer interrupt
	//Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	80 93 b0 00 	sts	0x00B0, r24
     db0:	80 93 b1 00 	sts	0x00B1, r24
     db4:	92 e3       	ldi	r25, 0x32	; 50
     db6:	90 93 b3 00 	sts	0x00B3, r25
     dba:	10 92 b2 00 	sts	0x00B2, r1

	//Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
     dbe:	17 ba       	out	0x17, r1	; 23
     dc0:	80 93 70 00 	sts	0x0070, r24

	sei();  // enable interrupts
     dc4:	78 94       	sei

	// initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
     dc6:	10 92 de 03 	sts	0x03DE, r1
	irparams.rawlen = 0;
     dca:	10 92 a9 04 	sts	0x04A9, r1

	// set pin modes
	_IRDDR &= ~_BV(IR_RECV_PIN);
     dce:	52 98       	cbi	0x0a, 2	; 10
	
#ifdef BLINK_LED
	_LED_DDR |= _BV(BLINK_LED_PIN);
     dd0:	3d 9a       	sbi	0x07, 5	; 7
	_LED_PORT |= _BV(BLINK_LED_PIN);
     dd2:	45 9a       	sbi	0x08, 5	; 8
     dd4:	08 95       	ret

00000dd6 <_send_char_to_host>:
	y ^= (y >> 2);
	y ^= (y >> 4);
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
     dd6:	28 2f       	mov	r18, r24
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <_send_char_to_host+0x8>
     ddc:	9b c0       	rjmp	.+310    	; 0xf14 <_send_char_to_host+0x13e>
     dde:	80 91 02 01 	lds	r24, 0x0102
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <_send_char_to_host+0x12>
     de6:	97 c0       	rjmp	.+302    	; 0xf16 <_send_char_to_host+0x140>
		return false;
	}
	while(_trans_in_progress) {}
     de8:	90 91 b0 04 	lds	r25, 0x04B0
     dec:	91 11       	cpse	r25, r1
     dee:	fc cf       	rjmp	.-8      	; 0xde8 <_send_char_to_host+0x12>
	_trans_in_progress = true;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 b0 04 	sts	0x04B0, r24
	_char_to_send = c;
     df6:	20 93 b2 04 	sts	0x04B2, r18
	}
	sei();
}

static uint8_t _parity(uint8_t x) {
	uint8_t y = x ^ (x >> 1);
     dfa:	82 2f       	mov	r24, r18
     dfc:	86 95       	lsr	r24
     dfe:	28 27       	eor	r18, r24
	y ^= (y >> 2);
     e00:	82 2f       	mov	r24, r18
     e02:	86 95       	lsr	r24
     e04:	86 95       	lsr	r24
     e06:	28 27       	eor	r18, r24
	y ^= (y >> 4);
     e08:	82 2f       	mov	r24, r18
     e0a:	82 95       	swap	r24
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	28 27       	eor	r18, r24
	return y & 1;
     e10:	21 70       	andi	r18, 0x01	; 1
		return false;
	}
	while(_trans_in_progress) {}
	_trans_in_progress = true;
	_char_to_send = c;
	_char_to_send_parity = _parity(c);
     e12:	20 93 b1 04 	sts	0x04B1, r18
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	00 90 ad 04 	lds	r0, 0x04AD
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <_send_char_to_host+0x4e>
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <_send_char_to_host+0x4a>
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
     e28:	83 b1       	in	r24, 0x03	; 3
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	82 23       	and	r24, r18
     e2e:	93 23       	and	r25, r19
     e30:	89 2b       	or	r24, r25
     e32:	d1 f3       	breq	.-12     	; 0xe28 <_send_char_to_host+0x52>
	ENABLE_PCINT_DATA;
	ENABLE_PCINT0S;
}

static inline void _conf_pins_output() {
	DISABLE_PCINT0S;
     e34:	e8 e6       	ldi	r30, 0x68	; 104
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	80 83       	st	Z, r24
	DISABLE_PCINT_DATA;
     e3e:	eb e6       	ldi	r30, 0x6B	; 107
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	30 81       	ld	r19, Z
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	ac 01       	movw	r20, r24
     e4a:	00 90 ac 04 	lds	r0, 0x04AC
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_send_char_to_host+0x7e>
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <_send_char_to_host+0x7a>
     e58:	24 2f       	mov	r18, r20
     e5a:	20 95       	com	r18
     e5c:	23 23       	and	r18, r19
     e5e:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     e60:	30 81       	ld	r19, Z
     e62:	ac 01       	movw	r20, r24
     e64:	00 90 ad 04 	lds	r0, 0x04AD
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <_send_char_to_host+0x98>
     e6a:	44 0f       	add	r20, r20
     e6c:	55 1f       	adc	r21, r21
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <_send_char_to_host+0x94>
     e72:	24 2f       	mov	r18, r20
     e74:	20 95       	com	r18
     e76:	23 23       	and	r18, r19
     e78:	20 83       	st	Z, r18
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
     e7a:	34 b1       	in	r19, 0x04	; 4
     e7c:	bc 01       	movw	r22, r24
     e7e:	00 90 ad 04 	lds	r0, 0x04AD
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <_send_char_to_host+0xb2>
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <_send_char_to_host+0xae>
     e8c:	ac 01       	movw	r20, r24
     e8e:	00 90 ac 04 	lds	r0, 0x04AC
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <_send_char_to_host+0xc2>
     e94:	44 0f       	add	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <_send_char_to_host+0xbe>
     e9c:	26 2f       	mov	r18, r22
     e9e:	24 2b       	or	r18, r20
     ea0:	23 2b       	or	r18, r19
     ea2:	24 b9       	out	0x04, r18	; 4
	_char_to_send_parity = _parity(c);
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
		//wait for the clock pin to become high
	}
	_conf_pins_output();
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
     ea4:	35 b1       	in	r19, 0x05	; 5
     ea6:	ac 01       	movw	r20, r24
     ea8:	00 90 ac 04 	lds	r0, 0x04AC
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <_send_char_to_host+0xdc>
     eae:	44 0f       	add	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <_send_char_to_host+0xd8>
     eb6:	24 2f       	mov	r18, r20
     eb8:	20 95       	com	r18
     eba:	23 23       	and	r18, r19
     ebc:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~_BV(_clock_pin_port_b);
     ebe:	25 b1       	in	r18, 0x05	; 5
     ec0:	00 90 ad 04 	lds	r0, 0x04AD
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <_send_char_to_host+0xf4>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <_send_char_to_host+0xf0>
     ece:	80 95       	com	r24
     ed0:	82 23       	and	r24, r18
     ed2:	85 b9       	out	0x05, r24	; 5
	_bit_index = BIT_0_INDEX;
     ed4:	8a e0       	ldi	r24, 0x0A	; 10
     ed6:	80 93 ae 04 	sts	0x04AE, r24
	_clock_state = 0;
     eda:	10 92 01 01 	sts	0x0101, r1
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     ede:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     ee0:	85 b5       	in	r24, 0x25	; 37
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     ee6:	85 b5       	in	r24, 0x25	; 37
     ee8:	8a 7f       	andi	r24, 0xFA	; 250
     eea:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     eec:	84 b5       	in	r24, 0x24	; 36
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     ef2:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     ef4:	ee e6       	ldi	r30, 0x6E	; 110
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	82 60       	ori	r24, 0x02	; 2
     efc:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     efe:	88 e2       	ldi	r24, 0x28	; 40
     f00:	87 bd       	out	0x27, r24	; 39
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
	PORTB &= ~_BV(_clock_pin_port_b);
	_bit_index = BIT_0_INDEX;
	_clock_state = 0;
	_enable_timer0();
	while(_trans_in_progress) {
     f02:	80 91 b0 04 	lds	r24, 0x04B0
     f06:	81 11       	cpse	r24, r1
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <_send_char_to_host+0x12c>
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
     f0a:	80 91 af 04 	lds	r24, 0x04AF
	_trans_interrupted = false;
     f0e:	10 92 af 04 	sts	0x04AF, r1
	return x;
     f12:	08 95       	ret
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
		return false;
     f14:	80 e0       	ldi	r24, 0x00	; 0
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}
     f16:	08 95       	ret

00000f18 <_reset_state>:
	_send_buf_len=0;
	sei();
}

static void _reset_state() {
	cli();
     f18:	f8 94       	cli
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     f1a:	a8 e6       	ldi	r26, 0x68	; 104
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	8c 91       	ld	r24, X
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     f24:	eb e6       	ldi	r30, 0x6B	; 107
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	30 81       	ld	r19, Z
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	ac 01       	movw	r20, r24
     f30:	00 90 ac 04 	lds	r0, 0x04AC
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <_reset_state+0x22>
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <_reset_state+0x1e>
     f3e:	24 2f       	mov	r18, r20
     f40:	20 95       	com	r18
     f42:	23 23       	and	r18, r19
     f44:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     f46:	30 81       	ld	r19, Z
     f48:	ac 01       	movw	r20, r24
     f4a:	00 90 ad 04 	lds	r0, 0x04AD
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <_reset_state+0x3c>
     f50:	44 0f       	add	r20, r20
     f52:	55 1f       	adc	r21, r21
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <_reset_state+0x38>
     f58:	24 2f       	mov	r18, r20
     f5a:	20 95       	com	r18
     f5c:	23 23       	and	r18, r19
     f5e:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     f60:	44 b1       	in	r20, 0x04	; 4
     f62:	bc 01       	movw	r22, r24
     f64:	00 90 ac 04 	lds	r0, 0x04AC
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <_reset_state+0x56>
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <_reset_state+0x52>
     f72:	9c 01       	movw	r18, r24
     f74:	00 90 ad 04 	lds	r0, 0x04AD
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <_reset_state+0x66>
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <_reset_state+0x62>
     f82:	26 2b       	or	r18, r22
     f84:	20 95       	com	r18
     f86:	24 23       	and	r18, r20
     f88:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     f8a:	35 b1       	in	r19, 0x05	; 5
     f8c:	bc 01       	movw	r22, r24
     f8e:	00 90 ad 04 	lds	r0, 0x04AD
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <_reset_state+0x80>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <_reset_state+0x7c>
     f9c:	ac 01       	movw	r20, r24
     f9e:	00 90 ac 04 	lds	r0, 0x04AC
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <_reset_state+0x90>
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <_reset_state+0x8c>
     fac:	26 2f       	mov	r18, r22
     fae:	24 2b       	or	r18, r20
     fb0:	23 2b       	or	r18, r19
     fb2:	25 b9       	out	0x05, r18	; 5
	_NOP();
     fb4:	00 00       	nop
	ENABLE_PCINT_CLK;
     fb6:	40 81       	ld	r20, Z
     fb8:	9c 01       	movw	r18, r24
     fba:	00 90 ad 04 	lds	r0, 0x04AD
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_reset_state+0xac>
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <_reset_state+0xa8>
     fc8:	24 2b       	or	r18, r20
     fca:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     fcc:	20 81       	ld	r18, Z
     fce:	00 90 ac 04 	lds	r0, 0x04AC
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <_reset_state+0xc0>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <_reset_state+0xbc>
     fdc:	82 2b       	or	r24, r18
     fde:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     fe0:	8c 91       	ld	r24, X
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	8c 93       	st	X, r24
}

static void _reset_state() {
	cli();
	_conf_pins_input();
	_ps2dev_enabled = true;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 02 01 	sts	0x0102, r24
	_recv_buf_overflow=false;
     fec:	10 92 b9 04 	sts	0x04B9, r1
	_rcvd_char = 0;
     ff0:	10 92 b4 04 	sts	0x04B4, r1
	_rcvd_char_parity = 0;
     ff4:	10 92 b3 04 	sts	0x04B3, r1
	_char_to_send = 0;
     ff8:	10 92 b2 04 	sts	0x04B2, r1
	_char_to_send_parity = 0;
     ffc:	10 92 b1 04 	sts	0x04B1, r1
	_trans_in_progress = false;
    1000:	10 92 b0 04 	sts	0x04B0, r1
	_recv_in_progress = false;
    1004:	10 92 aa 04 	sts	0x04AA, r1
	_host_req_dev_rcv = false;
    1008:	10 92 ab 04 	sts	0x04AB, r1
	_clock_state = 1;
    100c:	80 93 01 01 	sts	0x0101, r24
	_bit_index = BIT_ACK_INDEX;
    1010:	10 92 ae 04 	sts	0x04AE, r1
	_next_byte_led = false;
    1014:	10 92 b5 04 	sts	0x04B5, r1
	_next_byte_typematic_rate = false;
    1018:	10 92 b6 04 	sts	0x04B6, r1
		_bit_index--;
	}
}

static void _clear_rcv_buf() {
	cli();
    101c:	f8 94       	cli
	_recv_buf_head=0;
    101e:	10 92 bb 04 	sts	0x04BB, r1
	_recv_buf_len=0;
    1022:	10 92 ba 04 	sts	0x04BA, r1
	sei();
    1026:	78 94       	sei
}

static void _clear_send_buf() {
	cli();
    1028:	f8 94       	cli
	_send_buf_head=0;
    102a:	10 92 b8 04 	sts	0x04B8, r1
	_send_buf_len=0;
    102e:	10 92 b7 04 	sts	0x04B7, r1
	sei();
    1032:	78 94       	sei
	_bit_index = BIT_ACK_INDEX;
	_next_byte_led = false;
	_next_byte_typematic_rate = false;
	_clear_rcv_buf();
	_clear_send_buf();
	sei();
    1034:	78 94       	sei
	_send_char_to_host(PS2DEVICE_BAT_OK);
    1036:	8a ea       	ldi	r24, 0xAA	; 170
    1038:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
	debug_log("<BAT_OK\r\n");
    103c:	81 e1       	ldi	r24, 0x11	; 17
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
    1044:	08 95       	ret

00001046 <__vector_3>:
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}

ISR(PCINT0_vect) {
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	1f 92       	push	r1
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	uint8_t p = PINB; // save the value of the interrupt source pins
    106a:	83 b1       	in	r24, 0x03	; 3
    106c:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b)) {
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	20 91 ad 04 	lds	r18, 0x04AD
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <__vector_3+0x38>
    107a:	95 95       	asr	r25
    107c:	87 95       	ror	r24
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <__vector_3+0x34>
    1082:	80 fd       	sbrc	r24, 0
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <__vector_3+0x5e>
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	00 90 ac 04 	lds	r0, 0x04AC
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <__vector_3+0x4e>
    1090:	95 95       	asr	r25
    1092:	87 95       	ror	r24
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <__vector_3+0x4a>
    1098:	80 fd       	sbrc	r24, 0
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <__vector_3+0x5e>
		_host_req_dev_rcv = 1; // get ready for the action
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 ab 04 	sts	0x04AB, r24
    10a2:	5d c0       	rjmp	.+186    	; 0x115e <__vector_3+0x118>
	} else if (bit_is_set(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b) && _host_req_dev_rcv && !_recv_in_progress) {
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <__vector_3+0x68>
    10aa:	95 95       	asr	r25
    10ac:	87 95       	ror	r24
    10ae:	2a 95       	dec	r18
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <__vector_3+0x64>
    10b2:	80 ff       	sbrs	r24, 0
    10b4:	52 c0       	rjmp	.+164    	; 0x115a <__vector_3+0x114>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	00 90 ac 04 	lds	r0, 0x04AC
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <__vector_3+0x7e>
    10c0:	95 95       	asr	r25
    10c2:	87 95       	ror	r24
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <__vector_3+0x7a>
    10c8:	80 fd       	sbrc	r24, 0
    10ca:	47 c0       	rjmp	.+142    	; 0x115a <__vector_3+0x114>
    10cc:	80 91 ab 04 	lds	r24, 0x04AB
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__vector_3+0x90>
    10d4:	42 c0       	rjmp	.+132    	; 0x115a <__vector_3+0x114>
    10d6:	80 91 aa 04 	lds	r24, 0x04AA
    10da:	81 11       	cpse	r24, r1
    10dc:	3e c0       	rjmp	.+124    	; 0x115a <__vector_3+0x114>
		DISABLE_PCINT0S;
    10de:	e8 e6       	ldi	r30, 0x68	; 104
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	80 83       	st	Z, r24
		DISABLE_PCINT_DATA;
    10e8:	eb e6       	ldi	r30, 0x6B	; 107
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	30 81       	ld	r19, Z
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	ac 01       	movw	r20, r24
    10f4:	00 90 ac 04 	lds	r0, 0x04AC
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <__vector_3+0xb8>
    10fa:	44 0f       	add	r20, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <__vector_3+0xb4>
    1102:	24 2f       	mov	r18, r20
    1104:	20 95       	com	r18
    1106:	23 23       	and	r18, r19
    1108:	20 83       	st	Z, r18
		DISABLE_PCINT_CLK;
    110a:	20 81       	ld	r18, Z
    110c:	00 90 ad 04 	lds	r0, 0x04AD
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <__vector_3+0xd0>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <__vector_3+0xcc>
    111a:	80 95       	com	r24
    111c:	82 23       	and	r24, r18
    111e:	80 83       	st	Z, r24
		_clock_state = 1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 01 01 	sts	0x0101, r24
		_bit_index = BIT_0_INDEX;
    1126:	9a e0       	ldi	r25, 0x0A	; 10
    1128:	90 93 ae 04 	sts	0x04AE, r25
		_host_req_dev_rcv = 0;
    112c:	10 92 ab 04 	sts	0x04AB, r1
		_recv_in_progress = 1;
    1130:	80 93 aa 04 	sts	0x04AA, r24
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
    1134:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
    1136:	85 b5       	in	r24, 0x25	; 37
    1138:	82 60       	ori	r24, 0x02	; 2
    113a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
    113c:	85 b5       	in	r24, 0x25	; 37
    113e:	8a 7f       	andi	r24, 0xFA	; 250
    1140:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
    1142:	84 b5       	in	r24, 0x24	; 36
    1144:	82 60       	ori	r24, 0x02	; 2
    1146:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
    1148:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
    114a:	ee e6       	ldi	r30, 0x6E	; 110
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
    1154:	88 e2       	ldi	r24, 0x28	; 40
    1156:	87 bd       	out	0x27, r24	; 39
    1158:	02 c0       	rjmp	.+4      	; 0x115e <__vector_3+0x118>
		_host_req_dev_rcv = 0;
		_recv_in_progress = 1;
		_enable_timer0();
	} else {
		// reset the state
		_host_req_dev_rcv = 0;
    115a:	10 92 ab 04 	sts	0x04AB, r1
	}
}
    115e:	0f 90       	pop	r0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <__vector_14>:

ISR(TIMER0_COMPA_vect) {
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
	if (_clock_state) {
    11a4:	80 91 01 01 	lds	r24, 0x0101
    11a8:	88 23       	and	r24, r24
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_14+0x30>
    11ac:	e5 c1       	rjmp	.+970    	; 0x1578 <__vector_14+0x3fa>
		if (bit_is_set(PINB,_clock_pin_port_b)) {
    11ae:	83 b1       	in	r24, 0x03	; 3
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	00 90 ad 04 	lds	r0, 0x04AD
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <__vector_14+0x3e>
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <__vector_14+0x3a>
    11c0:	80 ff       	sbrs	r24, 0
    11c2:	65 c1       	rjmp	.+714    	; 0x148e <__vector_14+0x310>
			if (_recv_in_progress) {
    11c4:	80 91 aa 04 	lds	r24, 0x04AA
    11c8:	88 23       	and	r24, r24
    11ca:	09 f4       	brne	.+2      	; 0x11ce <__vector_14+0x50>
    11cc:	ca c0       	rjmp	.+404    	; 0x1362 <__vector_14+0x1e4>
				if (_bit_index == BIT_ACK_INDEX) {
    11ce:	90 91 ae 04 	lds	r25, 0x04AE
    11d2:	91 11       	cpse	r25, r1
    11d4:	18 c0       	rjmp	.+48     	; 0x1206 <__vector_14+0x88>
					DDRB |= _BV(_data_pin_port_b); //switch data to output
    11d6:	94 b1       	in	r25, 0x04	; 4
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	00 90 ac 04 	lds	r0, 0x04AC
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <__vector_14+0x6a>
    11e4:	44 0f       	add	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <__vector_14+0x66>
    11ec:	49 2b       	or	r20, r25
    11ee:	44 b9       	out	0x04, r20	; 4
					PORTB &= ~_BV(_data_pin_port_b); //set to LOW - this is the ACK bit
    11f0:	95 b1       	in	r25, 0x05	; 5
    11f2:	00 90 ac 04 	lds	r0, 0x04AC
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <__vector_14+0x7e>
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <__vector_14+0x7a>
    1200:	20 95       	com	r18
    1202:	29 23       	and	r18, r25
    1204:	25 b9       	out	0x05, r18	; 5
				}
				if (_bit_index <0) {
    1206:	90 91 ae 04 	lds	r25, 0x04AE
    120a:	99 23       	and	r25, r25
    120c:	0c f0       	brlt	.+2      	; 0x1210 <__vector_14+0x92>
    120e:	8f c0       	rjmp	.+286    	; 0x132e <__vector_14+0x1b0>
					_host_req_dev_rcv = 0;
    1210:	10 92 ab 04 	sts	0x04AB, r1
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
    1214:	95 b5       	in	r25, 0x25	; 37
    1216:	98 7f       	andi	r25, 0xF8	; 248
    1218:	95 bd       	out	0x25, r25	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
    121a:	ee e6       	ldi	r30, 0x6E	; 110
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	90 81       	ld	r25, Z
    1220:	9d 7f       	andi	r25, 0xFD	; 253
    1222:	90 83       	st	Z, r25
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
    1224:	a8 e6       	ldi	r26, 0x68	; 104
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	9c 91       	ld	r25, X
    122a:	9e 7f       	andi	r25, 0xFE	; 254
    122c:	9c 93       	st	X, r25
	DISABLE_PCINT_DATA;
    122e:	eb e6       	ldi	r30, 0x6B	; 107
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	40 81       	ld	r20, Z
    1234:	21 e0       	ldi	r18, 0x01	; 1
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	b9 01       	movw	r22, r18
    123a:	00 90 ac 04 	lds	r0, 0x04AC
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <__vector_14+0xc6>
    1240:	66 0f       	add	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <__vector_14+0xc2>
    1248:	96 2f       	mov	r25, r22
    124a:	90 95       	com	r25
    124c:	94 23       	and	r25, r20
    124e:	90 83       	st	Z, r25
	DISABLE_PCINT_CLK;
    1250:	40 81       	ld	r20, Z
    1252:	b9 01       	movw	r22, r18
    1254:	00 90 ad 04 	lds	r0, 0x04AD
    1258:	02 c0       	rjmp	.+4      	; 0x125e <__vector_14+0xe0>
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <__vector_14+0xdc>
    1262:	96 2f       	mov	r25, r22
    1264:	90 95       	com	r25
    1266:	94 23       	and	r25, r20
    1268:	90 83       	st	Z, r25
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
    126a:	94 b1       	in	r25, 0x04	; 4
    126c:	b9 01       	movw	r22, r18
    126e:	00 90 ac 04 	lds	r0, 0x04AC
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_14+0xfa>
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <__vector_14+0xf6>
    127c:	a9 01       	movw	r20, r18
    127e:	00 90 ad 04 	lds	r0, 0x04AD
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__vector_14+0x10a>
    1284:	44 0f       	add	r20, r20
    1286:	55 1f       	adc	r21, r21
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <__vector_14+0x106>
    128c:	46 2b       	or	r20, r22
    128e:	40 95       	com	r20
    1290:	49 23       	and	r20, r25
    1292:	44 b9       	out	0x04, r20	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
    1294:	45 b1       	in	r20, 0x05	; 5
    1296:	e9 01       	movw	r28, r18
    1298:	00 90 ad 04 	lds	r0, 0x04AD
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__vector_14+0x124>
    129e:	cc 0f       	add	r28, r28
    12a0:	dd 1f       	adc	r29, r29
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <__vector_14+0x120>
    12a6:	b9 01       	movw	r22, r18
    12a8:	00 90 ac 04 	lds	r0, 0x04AC
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <__vector_14+0x134>
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <__vector_14+0x130>
    12b6:	9c 2f       	mov	r25, r28
    12b8:	96 2b       	or	r25, r22
    12ba:	94 2b       	or	r25, r20
    12bc:	95 b9       	out	0x05, r25	; 5
	_NOP();
    12be:	00 00       	nop
	ENABLE_PCINT_CLK;
    12c0:	90 81       	ld	r25, Z
    12c2:	a9 01       	movw	r20, r18
    12c4:	00 90 ad 04 	lds	r0, 0x04AD
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <__vector_14+0x150>
    12ca:	44 0f       	add	r20, r20
    12cc:	55 1f       	adc	r21, r21
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <__vector_14+0x14c>
    12d2:	49 2b       	or	r20, r25
    12d4:	40 83       	st	Z, r20
	ENABLE_PCINT_DATA;
    12d6:	90 81       	ld	r25, Z
    12d8:	00 90 ac 04 	lds	r0, 0x04AC
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <__vector_14+0x164>
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <__vector_14+0x160>
    12e6:	29 2b       	or	r18, r25
    12e8:	20 83       	st	Z, r18
	ENABLE_PCINT0S;
    12ea:	9c 91       	ld	r25, X
    12ec:	91 60       	ori	r25, 0x01	; 1
    12ee:	9c 93       	st	X, r25
				}
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
    12f0:	10 92 aa 04 	sts	0x04AA, r1
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
    12f4:	20 91 b4 04 	lds	r18, 0x04B4
}

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
    12f8:	90 91 ba 04 	lds	r25, 0x04BA
    12fc:	91 11       	cpse	r25, r1
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <__vector_14+0x1a4>
		return false;
	uint8_t i = _recv_buf_head + _recv_buf_len;
    1300:	90 91 bb 04 	lds	r25, 0x04BB
    1304:	e0 91 ba 04 	lds	r30, 0x04BA
    1308:	e9 0f       	add	r30, r25
	if (i >= RCV_BUF_SIZE)
    130a:	09 f0       	breq	.+2      	; 0x130e <__vector_14+0x190>
		i -= RCV_BUF_SIZE;
    130c:	e1 50       	subi	r30, 0x01	; 1
	_recv_buf[i] = c;
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	e4 53       	subi	r30, 0x34	; 52
    1312:	fb 4f       	sbci	r31, 0xFB	; 251
    1314:	20 83       	st	Z, r18
	_recv_buf_len++;
    1316:	90 91 ba 04 	lds	r25, 0x04BA
    131a:	9f 5f       	subi	r25, 0xFF	; 255
    131c:	90 93 ba 04 	sts	0x04BA, r25
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <__vector_14+0x1a6>

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
		return false;
    1322:	80 e0       	ldi	r24, 0x00	; 0
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	89 27       	eor	r24, r25
    1328:	80 93 b9 04 	sts	0x04B9, r24
    132c:	1a c0       	rjmp	.+52     	; 0x1362 <__vector_14+0x1e4>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
    132e:	10 92 01 01 	sts	0x0101, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
    1332:	44 b1       	in	r20, 0x04	; 4
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	00 90 ad 04 	lds	r0, 0x04AD
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <__vector_14+0x1c6>
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <__vector_14+0x1c2>
    1348:	24 2b       	or	r18, r20
    134a:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
    134c:	25 b1       	in	r18, 0x05	; 5
    134e:	00 90 ad 04 	lds	r0, 0x04AD
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <__vector_14+0x1da>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <__vector_14+0x1d6>
    135c:	80 95       	com	r24
    135e:	82 23       	and	r24, r18
    1360:	85 b9       	out	0x05, r24	; 5
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
				} else {
					_conf_clock_out_low(); // don't bring the clock line low after everything has been received!
				}
			}
			if (_trans_in_progress) {
    1362:	80 91 b0 04 	lds	r24, 0x04B0
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <__vector_14+0x1ee>
    136a:	06 c2       	rjmp	.+1036   	; 0x1778 <__vector_14+0x5fa>
				if (_bit_index < 0) {
    136c:	80 91 ae 04 	lds	r24, 0x04AE
    1370:	88 23       	and	r24, r24
    1372:	0c f0       	brlt	.+2      	; 0x1376 <__vector_14+0x1f8>
    1374:	71 c0       	rjmp	.+226    	; 0x1458 <__vector_14+0x2da>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
    1376:	85 b5       	in	r24, 0x25	; 37
    1378:	88 7f       	andi	r24, 0xF8	; 248
    137a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
    137c:	ee e6       	ldi	r30, 0x6E	; 110
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8d 7f       	andi	r24, 0xFD	; 253
    1384:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
    1386:	a8 e6       	ldi	r26, 0x68	; 104
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	8c 91       	ld	r24, X
    138c:	8e 7f       	andi	r24, 0xFE	; 254
    138e:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
    1390:	eb e6       	ldi	r30, 0x6B	; 107
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	30 81       	ld	r19, Z
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	ac 01       	movw	r20, r24
    139c:	00 90 ac 04 	lds	r0, 0x04AC
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <__vector_14+0x228>
    13a2:	44 0f       	add	r20, r20
    13a4:	55 1f       	adc	r21, r21
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <__vector_14+0x224>
    13aa:	24 2f       	mov	r18, r20
    13ac:	20 95       	com	r18
    13ae:	23 23       	and	r18, r19
    13b0:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
    13b2:	30 81       	ld	r19, Z
    13b4:	ac 01       	movw	r20, r24
    13b6:	00 90 ad 04 	lds	r0, 0x04AD
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <__vector_14+0x242>
    13bc:	44 0f       	add	r20, r20
    13be:	55 1f       	adc	r21, r21
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <__vector_14+0x23e>
    13c4:	24 2f       	mov	r18, r20
    13c6:	20 95       	com	r18
    13c8:	23 23       	and	r18, r19
    13ca:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
    13cc:	44 b1       	in	r20, 0x04	; 4
    13ce:	bc 01       	movw	r22, r24
    13d0:	00 90 ac 04 	lds	r0, 0x04AC
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <__vector_14+0x25c>
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <__vector_14+0x258>
    13de:	9c 01       	movw	r18, r24
    13e0:	00 90 ad 04 	lds	r0, 0x04AD
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <__vector_14+0x26c>
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <__vector_14+0x268>
    13ee:	26 2b       	or	r18, r22
    13f0:	20 95       	com	r18
    13f2:	24 23       	and	r18, r20
    13f4:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
    13f6:	35 b1       	in	r19, 0x05	; 5
    13f8:	bc 01       	movw	r22, r24
    13fa:	00 90 ad 04 	lds	r0, 0x04AD
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <__vector_14+0x286>
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <__vector_14+0x282>
    1408:	ac 01       	movw	r20, r24
    140a:	00 90 ac 04 	lds	r0, 0x04AC
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <__vector_14+0x296>
    1410:	44 0f       	add	r20, r20
    1412:	55 1f       	adc	r21, r21
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <__vector_14+0x292>
    1418:	26 2f       	mov	r18, r22
    141a:	24 2b       	or	r18, r20
    141c:	23 2b       	or	r18, r19
    141e:	25 b9       	out	0x05, r18	; 5
	_NOP();
    1420:	00 00       	nop
	ENABLE_PCINT_CLK;
    1422:	40 81       	ld	r20, Z
    1424:	9c 01       	movw	r18, r24
    1426:	00 90 ad 04 	lds	r0, 0x04AD
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <__vector_14+0x2b2>
    142c:	22 0f       	add	r18, r18
    142e:	33 1f       	adc	r19, r19
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <__vector_14+0x2ae>
    1434:	24 2b       	or	r18, r20
    1436:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
    1438:	20 81       	ld	r18, Z
    143a:	00 90 ac 04 	lds	r0, 0x04AC
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <__vector_14+0x2c6>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <__vector_14+0x2c2>
    1448:	82 2b       	or	r24, r18
    144a:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
    144c:	8c 91       	ld	r24, X
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
			}
			if (_trans_in_progress) {
				if (_bit_index < 0) {
					_disable_timer0();
					_conf_pins_input();
					_trans_in_progress = 0;
    1452:	10 92 b0 04 	sts	0x04B0, r1
    1456:	90 c1       	rjmp	.+800    	; 0x1778 <__vector_14+0x5fa>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
    1458:	10 92 01 01 	sts	0x0101, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
    145c:	44 b1       	in	r20, 0x04	; 4
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9c 01       	movw	r18, r24
    1464:	00 90 ad 04 	lds	r0, 0x04AD
    1468:	02 c0       	rjmp	.+4      	; 0x146e <__vector_14+0x2f0>
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <__vector_14+0x2ec>
    1472:	24 2b       	or	r18, r20
    1474:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
    1476:	25 b1       	in	r18, 0x05	; 5
    1478:	00 90 ad 04 	lds	r0, 0x04AD
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <__vector_14+0x304>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <__vector_14+0x300>
    1486:	80 95       	com	r24
    1488:	82 23       	and	r24, r18
    148a:	85 b9       	out	0x05, r24	; 5
    148c:	75 c1       	rjmp	.+746    	; 0x1778 <__vector_14+0x5fa>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
    148e:	85 b5       	in	r24, 0x25	; 37
    1490:	88 7f       	andi	r24, 0xF8	; 248
    1492:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
    1494:	ee e6       	ldi	r30, 0x6E	; 110
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
    149e:	a8 e6       	ldi	r26, 0x68	; 104
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	8c 91       	ld	r24, X
    14a4:	8e 7f       	andi	r24, 0xFE	; 254
    14a6:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
    14a8:	eb e6       	ldi	r30, 0x6B	; 107
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	30 81       	ld	r19, Z
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	ac 01       	movw	r20, r24
    14b4:	00 90 ac 04 	lds	r0, 0x04AC
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <__vector_14+0x340>
    14ba:	44 0f       	add	r20, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <__vector_14+0x33c>
    14c2:	24 2f       	mov	r18, r20
    14c4:	20 95       	com	r18
    14c6:	23 23       	and	r18, r19
    14c8:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
    14ca:	30 81       	ld	r19, Z
    14cc:	ac 01       	movw	r20, r24
    14ce:	00 90 ad 04 	lds	r0, 0x04AD
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <__vector_14+0x35a>
    14d4:	44 0f       	add	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <__vector_14+0x356>
    14dc:	24 2f       	mov	r18, r20
    14de:	20 95       	com	r18
    14e0:	23 23       	and	r18, r19
    14e2:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
    14e4:	44 b1       	in	r20, 0x04	; 4
    14e6:	bc 01       	movw	r22, r24
    14e8:	00 90 ac 04 	lds	r0, 0x04AC
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <__vector_14+0x374>
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <__vector_14+0x370>
    14f6:	9c 01       	movw	r18, r24
    14f8:	00 90 ad 04 	lds	r0, 0x04AD
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <__vector_14+0x384>
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <__vector_14+0x380>
    1506:	26 2b       	or	r18, r22
    1508:	20 95       	com	r18
    150a:	24 23       	and	r18, r20
    150c:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
    150e:	35 b1       	in	r19, 0x05	; 5
    1510:	bc 01       	movw	r22, r24
    1512:	00 90 ad 04 	lds	r0, 0x04AD
    1516:	02 c0       	rjmp	.+4      	; 0x151c <__vector_14+0x39e>
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <__vector_14+0x39a>
    1520:	ac 01       	movw	r20, r24
    1522:	00 90 ac 04 	lds	r0, 0x04AC
    1526:	02 c0       	rjmp	.+4      	; 0x152c <__vector_14+0x3ae>
    1528:	44 0f       	add	r20, r20
    152a:	55 1f       	adc	r21, r21
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <__vector_14+0x3aa>
    1530:	26 2f       	mov	r18, r22
    1532:	24 2b       	or	r18, r20
    1534:	23 2b       	or	r18, r19
    1536:	25 b9       	out	0x05, r18	; 5
	_NOP();
    1538:	00 00       	nop
	ENABLE_PCINT_CLK;
    153a:	40 81       	ld	r20, Z
    153c:	9c 01       	movw	r18, r24
    153e:	00 90 ad 04 	lds	r0, 0x04AD
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <__vector_14+0x3ca>
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <__vector_14+0x3c6>
    154c:	24 2b       	or	r18, r20
    154e:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
    1550:	20 81       	ld	r18, Z
    1552:	00 90 ac 04 	lds	r0, 0x04AC
    1556:	02 c0       	rjmp	.+4      	; 0x155c <__vector_14+0x3de>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <__vector_14+0x3da>
    1560:	82 2b       	or	r24, r18
    1562:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
    1564:	8c 91       	ld	r24, X
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	8c 93       	st	X, r24
			}
		} else {
			// host has pulled clock low -> bail out and get ready to receive something
			_disable_timer0();
			_conf_pins_input();
			_trans_in_progress = 0;
    156a:	10 92 b0 04 	sts	0x04B0, r1
			_recv_in_progress = 0;
    156e:	10 92 aa 04 	sts	0x04AA, r1
			_host_req_dev_rcv = 0;
    1572:	10 92 ab 04 	sts	0x04AB, r1
    1576:	00 c1       	rjmp	.+512    	; 0x1778 <__vector_14+0x5fa>
		}
	} else {
		// we're just after the rising edge of the clock -> do something
		if (_recv_in_progress) {
    1578:	80 91 aa 04 	lds	r24, 0x04AA
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <__vector_14+0x404>
    1580:	79 c0       	rjmp	.+242    	; 0x1674 <__vector_14+0x4f6>
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
    1582:	83 b1       	in	r24, 0x03	; 3
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	00 90 ac 04 	lds	r0, 0x04AC
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <__vector_14+0x412>
    158c:	95 95       	asr	r25
    158e:	87 95       	ror	r24
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <__vector_14+0x40e>
    1594:	81 70       	andi	r24, 0x01	; 1
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	90 93 01 01 	sts	0x0101, r25
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
    159c:	44 b1       	in	r20, 0x04	; 4
    159e:	21 e0       	ldi	r18, 0x01	; 1
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	b9 01       	movw	r22, r18
    15a4:	00 90 ad 04 	lds	r0, 0x04AD
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <__vector_14+0x430>
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <__vector_14+0x42c>
    15b2:	96 2f       	mov	r25, r22
    15b4:	90 95       	com	r25
    15b6:	94 23       	and	r25, r20
    15b8:	94 b9       	out	0x04, r25	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
    15ba:	95 b1       	in	r25, 0x05	; 5
    15bc:	00 90 ad 04 	lds	r0, 0x04AD
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <__vector_14+0x448>
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <__vector_14+0x444>
    15ca:	29 2b       	or	r18, r25
    15cc:	25 b9       	out	0x05, r18	; 5
	_NOP();
    15ce:	00 00       	nop
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
			// set clock HIGH
			_conf_clock_input_high();
			// we receive something from the host
			switch (_bit_index) {
    15d0:	e0 91 ae 04 	lds	r30, 0x04AE
    15d4:	4e 2f       	mov	r20, r30
    15d6:	ee 0f       	add	r30, r30
    15d8:	55 0b       	sbc	r21, r21
    15da:	66 0b       	sbc	r22, r22
    15dc:	77 0b       	sbc	r23, r23
    15de:	fa 01       	movw	r30, r20
    15e0:	32 97       	sbiw	r30, 0x02	; 2
    15e2:	e9 30       	cpi	r30, 0x09	; 9
    15e4:	f1 05       	cpc	r31, r1
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <__vector_14+0x46c>
    15e8:	45 c0       	rjmp	.+138    	; 0x1674 <__vector_14+0x4f6>
    15ea:	ec 5c       	subi	r30, 0xCC	; 204
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__tablejump2__>
				case BIT_0_INDEX:
					_rcvd_char = data_pin_val;
    15f2:	80 93 b4 04 	sts	0x04B4, r24
					break;
    15f6:	3e c0       	rjmp	.+124    	; 0x1674 <__vector_14+0x4f6>
				case BIT_1_INDEX:
					_rcvd_char |= (data_pin_val << 1);
    15f8:	90 91 b4 04 	lds	r25, 0x04B4
    15fc:	88 0f       	add	r24, r24
    15fe:	89 2b       	or	r24, r25
    1600:	80 93 b4 04 	sts	0x04B4, r24
					break;
    1604:	37 c0       	rjmp	.+110    	; 0x1674 <__vector_14+0x4f6>
				case BIT_2_INDEX:
					_rcvd_char |= (data_pin_val << 2);
    1606:	90 91 b4 04 	lds	r25, 0x04B4
    160a:	88 0f       	add	r24, r24
    160c:	88 0f       	add	r24, r24
    160e:	89 2b       	or	r24, r25
    1610:	80 93 b4 04 	sts	0x04B4, r24
					break;
    1614:	2f c0       	rjmp	.+94     	; 0x1674 <__vector_14+0x4f6>
				case BIT_3_INDEX:
					_rcvd_char |= (data_pin_val << 3);
    1616:	90 91 b4 04 	lds	r25, 0x04B4
    161a:	88 0f       	add	r24, r24
    161c:	88 0f       	add	r24, r24
    161e:	88 0f       	add	r24, r24
    1620:	89 2b       	or	r24, r25
    1622:	80 93 b4 04 	sts	0x04B4, r24
					break;
    1626:	26 c0       	rjmp	.+76     	; 0x1674 <__vector_14+0x4f6>
				case BIT_4_INDEX:
					_rcvd_char |= (data_pin_val << 4);
    1628:	90 91 b4 04 	lds	r25, 0x04B4
    162c:	82 95       	swap	r24
    162e:	80 7f       	andi	r24, 0xF0	; 240
    1630:	89 2b       	or	r24, r25
    1632:	80 93 b4 04 	sts	0x04B4, r24
					break;
    1636:	1e c0       	rjmp	.+60     	; 0x1674 <__vector_14+0x4f6>
				case BIT_5_INDEX:
					_rcvd_char |= (data_pin_val << 5);
    1638:	90 91 b4 04 	lds	r25, 0x04B4
    163c:	82 95       	swap	r24
    163e:	88 0f       	add	r24, r24
    1640:	80 7e       	andi	r24, 0xE0	; 224
    1642:	89 2b       	or	r24, r25
    1644:	80 93 b4 04 	sts	0x04B4, r24
					break;
    1648:	15 c0       	rjmp	.+42     	; 0x1674 <__vector_14+0x4f6>
				case BIT_6_INDEX:
					_rcvd_char |= (data_pin_val << 6);
    164a:	90 91 b4 04 	lds	r25, 0x04B4
    164e:	82 95       	swap	r24
    1650:	88 0f       	add	r24, r24
    1652:	88 0f       	add	r24, r24
    1654:	80 7c       	andi	r24, 0xC0	; 192
    1656:	89 2b       	or	r24, r25
    1658:	80 93 b4 04 	sts	0x04B4, r24
					break;
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <__vector_14+0x4f6>
				case BIT_7_INDEX:
					_rcvd_char |= (data_pin_val << 7);
    165e:	90 91 b4 04 	lds	r25, 0x04B4
    1662:	87 95       	ror	r24
    1664:	88 27       	eor	r24, r24
    1666:	87 95       	ror	r24
    1668:	89 2b       	or	r24, r25
    166a:	80 93 b4 04 	sts	0x04B4, r24
					break;
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <__vector_14+0x4f6>
				case BIT_PARITY_INDEX:
					_rcvd_char_parity = data_pin_val;
    1670:	80 93 b3 04 	sts	0x04B3, r24
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		if (_trans_in_progress) {
    1674:	80 91 b0 04 	lds	r24, 0x04B0
    1678:	88 23       	and	r24, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <__vector_14+0x500>
    167c:	78 c0       	rjmp	.+240    	; 0x176e <__vector_14+0x5f0>
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 01 01 	sts	0x0101, r24
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
    1684:	34 b1       	in	r19, 0x04	; 4
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	ac 01       	movw	r20, r24
    168c:	00 90 ad 04 	lds	r0, 0x04AD
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <__vector_14+0x518>
    1692:	44 0f       	add	r20, r20
    1694:	55 1f       	adc	r21, r21
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <__vector_14+0x514>
    169a:	24 2f       	mov	r18, r20
    169c:	20 95       	com	r18
    169e:	23 23       	and	r18, r19
    16a0:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
    16a2:	25 b1       	in	r18, 0x05	; 5
    16a4:	00 90 ad 04 	lds	r0, 0x04AD
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <__vector_14+0x530>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <__vector_14+0x52c>
    16b2:	82 2b       	or	r24, r18
    16b4:	85 b9       	out	0x05, r24	; 5
	_NOP();
    16b6:	00 00       	nop
			}
		}
		if (_trans_in_progress) {
			_conf_clock_input_high();
			// we send something to the host
			switch (_bit_index) {
    16b8:	80 91 ae 04 	lds	r24, 0x04AE
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	61 f1       	breq	.+88     	; 0x1718 <__vector_14+0x59a>
    16c0:	24 f4       	brge	.+8      	; 0x16ca <__vector_14+0x54c>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <__vector_14+0x54a>
    16c6:	47 c0       	rjmp	.+142    	; 0x1756 <__vector_14+0x5d8>
    16c8:	52 c0       	rjmp	.+164    	; 0x176e <__vector_14+0x5f0>
    16ca:	8b 30       	cpi	r24, 0x0B	; 11
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <__vector_14+0x552>
    16ce:	4f c0       	rjmp	.+158    	; 0x176e <__vector_14+0x5f0>
				case BIT_3_INDEX:
				case BIT_4_INDEX:
				case BIT_5_INDEX:
				case BIT_6_INDEX:
				case BIT_7_INDEX:
					if (_char_to_send & 1) {
    16d0:	80 91 b2 04 	lds	r24, 0x04B2
    16d4:	80 ff       	sbrs	r24, 0
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <__vector_14+0x574>
						PORTB |= _BV(_data_pin_port_b);
    16d8:	25 b1       	in	r18, 0x05	; 5
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	00 90 ac 04 	lds	r0, 0x04AC
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <__vector_14+0x56a>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <__vector_14+0x566>
    16ec:	82 2b       	or	r24, r18
    16ee:	85 b9       	out	0x05, r24	; 5
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <__vector_14+0x58e>
						} else {
						PORTB &= ~_BV(_data_pin_port_b);
    16f2:	25 b1       	in	r18, 0x05	; 5
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	00 90 ac 04 	lds	r0, 0x04AC
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <__vector_14+0x584>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <__vector_14+0x580>
    1706:	80 95       	com	r24
    1708:	82 23       	and	r24, r18
    170a:	85 b9       	out	0x05, r24	; 5
					}
					_char_to_send >>= 1;
    170c:	80 91 b2 04 	lds	r24, 0x04B2
    1710:	86 95       	lsr	r24
    1712:	80 93 b2 04 	sts	0x04B2, r24
					break;
    1716:	2b c0       	rjmp	.+86     	; 0x176e <__vector_14+0x5f0>
				case BIT_PARITY_INDEX:
					if (_char_to_send_parity & 1) {
    1718:	80 91 b1 04 	lds	r24, 0x04B1
    171c:	80 ff       	sbrs	r24, 0
    171e:	0e c0       	rjmp	.+28     	; 0x173c <__vector_14+0x5be>
						PORTB &= ~_BV(_data_pin_port_b);
    1720:	25 b1       	in	r18, 0x05	; 5
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	00 90 ac 04 	lds	r0, 0x04AC
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <__vector_14+0x5b2>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <__vector_14+0x5ae>
    1734:	80 95       	com	r24
    1736:	82 23       	and	r24, r18
    1738:	85 b9       	out	0x05, r24	; 5
    173a:	19 c0       	rjmp	.+50     	; 0x176e <__vector_14+0x5f0>
						} else {
						PORTB |= _BV(_data_pin_port_b);
    173c:	25 b1       	in	r18, 0x05	; 5
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	00 90 ac 04 	lds	r0, 0x04AC
    1746:	02 c0       	rjmp	.+4      	; 0x174c <__vector_14+0x5ce>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <__vector_14+0x5ca>
    1750:	82 2b       	or	r24, r18
    1752:	85 b9       	out	0x05, r24	; 5
    1754:	0c c0       	rjmp	.+24     	; 0x176e <__vector_14+0x5f0>
					}
					break;
				case BIT_STOP_INDEX:
					PORTB |= _BV(_data_pin_port_b);
    1756:	25 b1       	in	r18, 0x05	; 5
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	00 90 ac 04 	lds	r0, 0x04AC
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <__vector_14+0x5e8>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <__vector_14+0x5e4>
    176a:	82 2b       	or	r24, r18
    176c:	85 b9       	out	0x05, r24	; 5
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		_bit_index--;
    176e:	80 91 ae 04 	lds	r24, 0x04AE
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	80 93 ae 04 	sts	0x04AE, r24
	}
}
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <setup_ps2device>:
	_send_char_to_host(PS2DEVICE_BAT_OK);
	debug_log("<BAT_OK\r\n");
}

void setup_ps2device(uint8_t clock_pin_port_b, uint8_t data_pin_port_b) {
	_clock_pin_port_b = clock_pin_port_b;
    179e:	80 93 ad 04 	sts	0x04AD, r24
	_data_pin_port_b = data_pin_port_b;
    17a2:	60 93 ac 04 	sts	0x04AC, r22
	_reset_state();
    17a6:	0e 94 8c 07 	call	0xf18	; 0xf18 <_reset_state>
    17aa:	08 95       	ret

000017ac <do_ps2device_work>:
}

void do_ps2device_work() {
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
				debug_log(">TypemR n\r\n");
				_send_char_to_host(PS2DEVICE_CMD_ACK);
				debug_log("<ACK\r\n");
				continue;
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    17b0:	c1 e0       	ldi	r28, 0x01	; 1
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    17b2:	ee c0       	rjmp	.+476    	; 0x1990 <do_ps2device_work+0x1e4>
	_recv_buf_len=0;
	sei();
}

static void _clear_send_buf() {
	cli();
    17b4:	f8 94       	cli
	_send_buf_head=0;
    17b6:	10 92 b8 04 	sts	0x04B8, r1
	_send_buf_len=0;
    17ba:	10 92 b7 04 	sts	0x04B7, r1
	sei();
    17be:	78 94       	sei
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
		_clear_send_buf();
		if (_recv_buf_overflow) {
    17c0:	80 91 b9 04 	lds	r24, 0x04B9
    17c4:	88 23       	and	r24, r24
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <do_ps2device_work+0x28>
			debug_log("_recv_buf oflw\r\n");
    17c8:	8b e1       	ldi	r24, 0x1B	; 27
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
			_recv_buf_overflow = false;
    17d0:	10 92 b9 04 	sts	0x04B9, r1
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static char _get_char_from_rcv_buf()
{
	cli();
    17d4:	f8 94       	cli
	if (_recv_buf_len == 0) {
    17d6:	80 91 ba 04 	lds	r24, 0x04BA
    17da:	81 11       	cpse	r24, r1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <do_ps2device_work+0x38>
		sei();
    17de:	78 94       	sei
		return 0x0;
    17e0:	e0 e0       	ldi	r30, 0x00	; 0
    17e2:	19 c0       	rjmp	.+50     	; 0x1816 <do_ps2device_work+0x6a>
	}
	char c = _recv_buf[_recv_buf_head];
    17e4:	e0 91 bb 04 	lds	r30, 0x04BB
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	e4 53       	subi	r30, 0x34	; 52
    17ec:	fb 4f       	sbci	r31, 0xFB	; 251
    17ee:	80 81       	ld	r24, Z
	_recv_buf_head++;
    17f0:	90 91 bb 04 	lds	r25, 0x04BB
    17f4:	9f 5f       	subi	r25, 0xFF	; 255
    17f6:	90 93 bb 04 	sts	0x04BB, r25
	_recv_buf_len--;
    17fa:	90 91 ba 04 	lds	r25, 0x04BA
    17fe:	91 50       	subi	r25, 0x01	; 1
    1800:	90 93 ba 04 	sts	0x04BA, r25
	if (_recv_buf_head >= RCV_BUF_SIZE)
    1804:	90 91 bb 04 	lds	r25, 0x04BB
    1808:	91 11       	cpse	r25, r1
		_recv_buf_head = 0;
    180a:	10 92 bb 04 	sts	0x04BB, r1
	sei();
    180e:	78 94       	sei
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    1810:	80 3c       	cpi	r24, 0xC0	; 192
    1812:	f0 f4       	brcc	.+60     	; 0x1850 <do_ps2device_work+0xa4>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    1814:	e8 2f       	mov	r30, r24
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    1816:	80 91 b5 04 	lds	r24, 0x04B5
    181a:	81 11       	cpse	r24, r1
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <do_ps2device_work+0x7a>
    181e:	80 91 b6 04 	lds	r24, 0x04B6
    1822:	88 23       	and	r24, r24
    1824:	b1 f0       	breq	.+44     	; 0x1852 <do_ps2device_work+0xa6>
			if (_next_byte_typematic_rate) {
    1826:	80 91 b6 04 	lds	r24, 0x04B6
    182a:	88 23       	and	r24, r24
    182c:	21 f0       	breq	.+8      	; 0x1836 <do_ps2device_work+0x8a>
				debug_log(">TypemR v\r\n");
    182e:	8c e2       	ldi	r24, 0x2C	; 44
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
			}
			if (_next_byte_led) {
    1836:	80 91 b5 04 	lds	r24, 0x04B5
    183a:	88 23       	and	r24, r24
    183c:	21 f0       	breq	.+8      	; 0x1846 <do_ps2device_work+0x9a>
				debug_log(">LED v\r\n");
    183e:	88 e3       	ldi	r24, 0x38	; 56
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
			}
			_next_byte_led = _next_byte_typematic_rate = false;
    1846:	10 92 b6 04 	sts	0x04B6, r1
    184a:	10 92 b5 04 	sts	0x04B5, r1
			return;
    184e:	d3 c0       	rjmp	.+422    	; 0x19f6 <do_ps2device_work+0x24a>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    1850:	e8 2f       	mov	r30, r24
				debug_log(">LED v\r\n");
			}
			_next_byte_led = _next_byte_typematic_rate = false;
			return;
		}
		switch (c) {
    1852:	8e 2f       	mov	r24, r30
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	fc 01       	movw	r30, r24
    1858:	ed 5e       	subi	r30, 0xED	; 237
    185a:	f1 09       	sbc	r31, r1
    185c:	e3 31       	cpi	r30, 0x13	; 19
    185e:	f1 05       	cpc	r31, r1
    1860:	08 f0       	brcs	.+2      	; 0x1864 <do_ps2device_work+0xb8>
    1862:	92 c0       	rjmp	.+292    	; 0x1988 <do_ps2device_work+0x1dc>
    1864:	e3 5c       	subi	r30, 0xC3	; 195
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__tablejump2__>
			case PS2HOST_CMD_ECHO:
				debug_log(">Echo\r\n");
    186c:	81 e4       	ldi	r24, 0x41	; 65
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ECHO);
    1874:	8e ee       	ldi	r24, 0xEE	; 238
    1876:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<Echo\r\n");
    187a:	89 e4       	ldi	r24, 0x49	; 73
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    1882:	b9 c0       	rjmp	.+370    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_RESEND:
				//we don't care - so we send just an ack
				debug_log(">Resend\r\n");
    1884:	81 e5       	ldi	r24, 0x51	; 81
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    188c:	8a ef       	ldi	r24, 0xFA	; 250
    188e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    1892:	8b e5       	ldi	r24, 0x5B	; 91
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				continue;
    189a:	7a c0       	rjmp	.+244    	; 0x1990 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_RESET:
				debug_log(">Reset\r\n");
    189c:	82 e6       	ldi	r24, 0x62	; 98
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    18a4:	8a ef       	ldi	r24, 0xFA	; 250
    18a6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    18aa:	8b e5       	ldi	r24, 0x5B	; 91
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_reset_state();
    18b2:	0e 94 8c 07 	call	0xf18	; 0xf18 <_reset_state>
				return;
    18b6:	9f c0       	rjmp	.+318    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC:
				// this is generally not the correct handling but we dont care.
				debug_log(">Set m/b/t\r\n");
    18b8:	8b e6       	ldi	r24, 0x6B	; 107
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    18c0:	8a ef       	ldi	r24, 0xFA	; 250
    18c2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    18c6:	8b e5       	ldi	r24, 0x5B	; 91
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    18ce:	93 c0       	rjmp	.+294    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_TYPEMATIC_RATE_DELAY:
				_next_byte_typematic_rate = true;
    18d0:	c0 93 b6 04 	sts	0x04B6, r28
				debug_log(">TypemR n\r\n");
    18d4:	88 e7       	ldi	r24, 0x78	; 120
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    18dc:	8a ef       	ldi	r24, 0xFA	; 250
    18de:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    18e2:	8b e5       	ldi	r24, 0x5B	; 91
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				continue;
    18ea:	52 c0       	rjmp	.+164    	; 0x1990 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    18ec:	c0 93 b5 04 	sts	0x04B5, r28
				debug_log(">LED n\r\n");
    18f0:	84 e8       	ldi	r24, 0x84	; 132
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    18f8:	8a ef       	ldi	r24, 0xFA	; 250
    18fa:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    18fe:	8b e5       	ldi	r24, 0x5B	; 91
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				continue;
    1906:	44 c0       	rjmp	.+136    	; 0x1990 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_READ_ID:
				debug_log(">SendId\r\n");
    1908:	8d e8       	ldi	r24, 0x8D	; 141
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_ID_1);
    1910:	8b ea       	ldi	r24, 0xAB	; 171
    1912:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ID1\r\n");
    1916:	87 e9       	ldi	r24, 0x97	; 151
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_ID_2);
    191e:	83 e8       	ldi	r24, 0x83	; 131
    1920:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ID2\r\n");
    1924:	8e e9       	ldi	r24, 0x9E	; 158
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    192c:	64 c0       	rjmp	.+200    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_DEFAULT:
				debug_log(">Default\r\n");
    192e:	85 ea       	ldi	r24, 0xA5	; 165
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1936:	8a ef       	ldi	r24, 0xFA	; 250
    1938:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    193c:	8b e5       	ldi	r24, 0x5B	; 91
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    1944:	58 c0       	rjmp	.+176    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_DISABLE:
				_ps2dev_enabled = false;
    1946:	10 92 02 01 	sts	0x0102, r1
				_next_byte_led = _next_byte_typematic_rate = false;
    194a:	10 92 b6 04 	sts	0x04B6, r1
    194e:	10 92 b5 04 	sts	0x04B5, r1
				debug_log(">Disable\r\n");
    1952:	80 eb       	ldi	r24, 0xB0	; 176
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    195a:	8a ef       	ldi	r24, 0xFA	; 250
    195c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    1960:	8b e5       	ldi	r24, 0x5B	; 91
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    1968:	46 c0       	rjmp	.+140    	; 0x19f6 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_ENABLE:
				_ps2dev_enabled = true;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 02 01 	sts	0x0102, r24
				debug_log(">Enable\r\n");
    1970:	8b eb       	ldi	r24, 0xBB	; 187
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1978:	8a ef       	ldi	r24, 0xFA	; 250
    197a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
				debug_log("<ACK\r\n");
    197e:	8b e5       	ldi	r24, 0x5B	; 91
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
				return;
    1986:	37 c0       	rjmp	.+110    	; 0x19f6 <do_ps2device_work+0x24a>
			default:
				debug_log(">???\r\n");
    1988:	85 ec       	ldi	r24, 0xC5	; 197
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <debug_log>
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    1990:	80 91 ba 04 	lds	r24, 0x04BA
    1994:	81 11       	cpse	r24, r1
    1996:	0e cf       	rjmp	.-484    	; 0x17b4 <do_ps2device_work+0x8>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    1998:	d0 e0       	ldi	r29, 0x00	; 0
    199a:	cd 2f       	mov	r28, r29
    199c:	28 c0       	rjmp	.+80     	; 0x19ee <do_ps2device_work+0x242>
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
    199e:	80 91 b7 04 	lds	r24, 0x04B7
    19a2:	88 23       	and	r24, r24
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <do_ps2device_work+0x208>
		return 0x0;
	}
	return _send_buf[_send_buf_head];
    19a6:	e0 91 b8 04 	lds	r30, 0x04B8
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	e4 54       	subi	r30, 0x44	; 68
    19ae:	fb 4f       	sbci	r31, 0xFB	; 251
    19b0:	80 81       	ld	r24, Z
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <do_ps2device_work+0x20a>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    19b4:	8c 2f       	mov	r24, r28
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
    19b6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_send_char_to_host>
    19ba:	81 11       	cpse	r24, r1
    19bc:	18 c0       	rjmp	.+48     	; 0x19ee <do_ps2device_work+0x242>
	}
	return _send_buf[_send_buf_head];
}

static void _remove_char_from_snd_buf() {
	cli();
    19be:	f8 94       	cli
	if (_send_buf_len == 0) { // just to make sure...
    19c0:	80 91 b7 04 	lds	r24, 0x04B7
    19c4:	81 11       	cpse	r24, r1
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <do_ps2device_work+0x220>
		sei();
    19c8:	78 94       	sei
    19ca:	11 c0       	rjmp	.+34     	; 0x19ee <do_ps2device_work+0x242>
		return;
	}
	_send_buf_head++;
    19cc:	80 91 b8 04 	lds	r24, 0x04B8
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	80 93 b8 04 	sts	0x04B8, r24
	_send_buf_len--;
    19d6:	80 91 b7 04 	lds	r24, 0x04B7
    19da:	81 50       	subi	r24, 0x01	; 1
    19dc:	80 93 b7 04 	sts	0x04B7, r24
	if (_send_buf_head >= SND_BUF_SIZE) {
    19e0:	80 91 b8 04 	lds	r24, 0x04B8
    19e4:	80 31       	cpi	r24, 0x10	; 16
    19e6:	10 f0       	brcs	.+4      	; 0x19ec <do_ps2device_work+0x240>
		_send_buf_head = 0;
    19e8:	d0 93 b8 04 	sts	0x04B8, r29
	}
	sei();
    19ec:	78 94       	sei
			default:
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
    19ee:	80 91 b7 04 	lds	r24, 0x04B7
    19f2:	81 11       	cpse	r24, r1
    19f4:	d4 cf       	rjmp	.-88     	; 0x199e <do_ps2device_work+0x1f2>
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
			_remove_char_from_snd_buf();
		}
	}
}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <add_char_to_send_buf>:
	return c;
}

// returning a 0 means buffer is full
static bool _put_char_into_snd_buf(char c) {
	cli();
    19fc:	f8 94       	cli
	if (_send_buf_len >= SND_BUF_SIZE) {
    19fe:	90 91 b7 04 	lds	r25, 0x04B7
    1a02:	90 31       	cpi	r25, 0x10	; 16
    1a04:	18 f0       	brcs	.+6      	; 0x1a0c <add_char_to_send_buf+0x10>
		sei();
    1a06:	78 94       	sei
		return false;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret
	}
	uint8_t i = _send_buf_head + _send_buf_len;
    1a0c:	90 91 b8 04 	lds	r25, 0x04B8
    1a10:	e0 91 b7 04 	lds	r30, 0x04B7
    1a14:	e9 0f       	add	r30, r25
	if (i >= SND_BUF_SIZE)
    1a16:	e0 31       	cpi	r30, 0x10	; 16
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <add_char_to_send_buf+0x20>
		i -= SND_BUF_SIZE;
    1a1a:	e0 51       	subi	r30, 0x10	; 16
	_send_buf[i] = c;
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	e4 54       	subi	r30, 0x44	; 68
    1a20:	fb 4f       	sbci	r31, 0xFB	; 251
    1a22:	80 83       	st	Z, r24
	_send_buf_len++;
    1a24:	80 91 b7 04 	lds	r24, 0x04B7
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	80 93 b7 04 	sts	0x04B7, r24
	sei();
    1a2e:	78 94       	sei
	return true;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
	}
}

bool add_char_to_send_buf(char c) {
	return _put_char_into_snd_buf(c);
    1a32:	08 95       	ret

00001a34 <__mulsi3>:
    1a34:	db 01       	movw	r26, r22
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__muluhisi3>
    1a3e:	bf 91       	pop	r27
    1a40:	af 91       	pop	r26
    1a42:	a2 9f       	mul	r26, r18
    1a44:	80 0d       	add	r24, r0
    1a46:	91 1d       	adc	r25, r1
    1a48:	a3 9f       	mul	r26, r19
    1a4a:	90 0d       	add	r25, r0
    1a4c:	b2 9f       	mul	r27, r18
    1a4e:	90 0d       	add	r25, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	08 95       	ret

00001a54 <__tablejump2__>:
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	05 90       	lpm	r0, Z+
    1a5a:	f4 91       	lpm	r31, Z
    1a5c:	e0 2d       	mov	r30, r0
    1a5e:	09 94       	ijmp

00001a60 <__muluhisi3>:
    1a60:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__umulhisi3>
    1a64:	a5 9f       	mul	r26, r21
    1a66:	90 0d       	add	r25, r0
    1a68:	b4 9f       	mul	r27, r20
    1a6a:	90 0d       	add	r25, r0
    1a6c:	a4 9f       	mul	r26, r20
    1a6e:	80 0d       	add	r24, r0
    1a70:	91 1d       	adc	r25, r1
    1a72:	11 24       	eor	r1, r1
    1a74:	08 95       	ret

00001a76 <__umulhisi3>:
    1a76:	a2 9f       	mul	r26, r18
    1a78:	b0 01       	movw	r22, r0
    1a7a:	b3 9f       	mul	r27, r19
    1a7c:	c0 01       	movw	r24, r0
    1a7e:	a3 9f       	mul	r26, r19
    1a80:	70 0d       	add	r23, r0
    1a82:	81 1d       	adc	r24, r1
    1a84:	11 24       	eor	r1, r1
    1a86:	91 1d       	adc	r25, r1
    1a88:	b2 9f       	mul	r27, r18
    1a8a:	70 0d       	add	r23, r0
    1a8c:	81 1d       	adc	r24, r1
    1a8e:	11 24       	eor	r1, r1
    1a90:	91 1d       	adc	r25, r1
    1a92:	08 95       	ret

00001a94 <sprintf>:
    1a94:	ae e0       	ldi	r26, 0x0E	; 14
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e0 e5       	ldi	r30, 0x50	; 80
    1a9a:	fd e0       	ldi	r31, 0x0D	; 13
    1a9c:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__prologue_saves__+0x1c>
    1aa0:	0d 89       	ldd	r16, Y+21	; 0x15
    1aa2:	1e 89       	ldd	r17, Y+22	; 0x16
    1aa4:	86 e0       	ldi	r24, 0x06	; 6
    1aa6:	8c 83       	std	Y+4, r24	; 0x04
    1aa8:	1a 83       	std	Y+2, r17	; 0x02
    1aaa:	09 83       	std	Y+1, r16	; 0x01
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f e7       	ldi	r25, 0x7F	; 127
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	ae 01       	movw	r20, r28
    1ab6:	47 5e       	subi	r20, 0xE7	; 231
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	6f 89       	ldd	r22, Y+23	; 0x17
    1abc:	78 8d       	ldd	r23, Y+24	; 0x18
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vfprintf>
    1ac6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac8:	38 85       	ldd	r19, Y+8	; 0x08
    1aca:	f8 01       	movw	r30, r16
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	10 82       	st	Z, r1
    1ad2:	2e 96       	adiw	r28, 0x0e	; 14
    1ad4:	e4 e0       	ldi	r30, 0x04	; 4
    1ad6:	0c 94 15 10 	jmp	0x202a	; 0x202a <__epilogue_restores__+0x1c>

00001ada <vfprintf>:
    1ada:	ac e0       	ldi	r26, 0x0C	; 12
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e7       	ldi	r30, 0x73	; 115
    1ae0:	fd e0       	ldi	r31, 0x0D	; 13
    1ae2:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__>
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	6b 01       	movw	r12, r22
    1aea:	8a 01       	movw	r16, r20
    1aec:	fc 01       	movw	r30, r24
    1aee:	17 82       	std	Z+7, r1	; 0x07
    1af0:	16 82       	std	Z+6, r1	; 0x06
    1af2:	83 81       	ldd	r24, Z+3	; 0x03
    1af4:	81 ff       	sbrs	r24, 1
    1af6:	bd c1       	rjmp	.+890    	; 0x1e72 <vfprintf+0x398>
    1af8:	ce 01       	movw	r24, r28
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	4c 01       	movw	r8, r24
    1afe:	f7 01       	movw	r30, r14
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	f6 01       	movw	r30, r12
    1b04:	93 fd       	sbrc	r25, 3
    1b06:	85 91       	lpm	r24, Z+
    1b08:	93 ff       	sbrs	r25, 3
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	6f 01       	movw	r12, r30
    1b0e:	88 23       	and	r24, r24
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <vfprintf+0x3a>
    1b12:	ab c1       	rjmp	.+854    	; 0x1e6a <vfprintf+0x390>
    1b14:	85 32       	cpi	r24, 0x25	; 37
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <vfprintf+0x4c>
    1b18:	93 fd       	sbrc	r25, 3
    1b1a:	85 91       	lpm	r24, Z+
    1b1c:	93 ff       	sbrs	r25, 3
    1b1e:	81 91       	ld	r24, Z+
    1b20:	6f 01       	movw	r12, r30
    1b22:	85 32       	cpi	r24, 0x25	; 37
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <vfprintf+0x56>
    1b26:	b7 01       	movw	r22, r14
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1b2e:	e7 cf       	rjmp	.-50     	; 0x1afe <vfprintf+0x24>
    1b30:	51 2c       	mov	r5, r1
    1b32:	31 2c       	mov	r3, r1
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	20 32       	cpi	r18, 0x20	; 32
    1b38:	a0 f4       	brcc	.+40     	; 0x1b62 <vfprintf+0x88>
    1b3a:	8b 32       	cpi	r24, 0x2B	; 43
    1b3c:	69 f0       	breq	.+26     	; 0x1b58 <vfprintf+0x7e>
    1b3e:	30 f4       	brcc	.+12     	; 0x1b4c <vfprintf+0x72>
    1b40:	80 32       	cpi	r24, 0x20	; 32
    1b42:	59 f0       	breq	.+22     	; 0x1b5a <vfprintf+0x80>
    1b44:	83 32       	cpi	r24, 0x23	; 35
    1b46:	69 f4       	brne	.+26     	; 0x1b62 <vfprintf+0x88>
    1b48:	20 61       	ori	r18, 0x10	; 16
    1b4a:	2c c0       	rjmp	.+88     	; 0x1ba4 <vfprintf+0xca>
    1b4c:	8d 32       	cpi	r24, 0x2D	; 45
    1b4e:	39 f0       	breq	.+14     	; 0x1b5e <vfprintf+0x84>
    1b50:	80 33       	cpi	r24, 0x30	; 48
    1b52:	39 f4       	brne	.+14     	; 0x1b62 <vfprintf+0x88>
    1b54:	21 60       	ori	r18, 0x01	; 1
    1b56:	26 c0       	rjmp	.+76     	; 0x1ba4 <vfprintf+0xca>
    1b58:	22 60       	ori	r18, 0x02	; 2
    1b5a:	24 60       	ori	r18, 0x04	; 4
    1b5c:	23 c0       	rjmp	.+70     	; 0x1ba4 <vfprintf+0xca>
    1b5e:	28 60       	ori	r18, 0x08	; 8
    1b60:	21 c0       	rjmp	.+66     	; 0x1ba4 <vfprintf+0xca>
    1b62:	27 fd       	sbrc	r18, 7
    1b64:	27 c0       	rjmp	.+78     	; 0x1bb4 <vfprintf+0xda>
    1b66:	30 ed       	ldi	r19, 0xD0	; 208
    1b68:	38 0f       	add	r19, r24
    1b6a:	3a 30       	cpi	r19, 0x0A	; 10
    1b6c:	78 f4       	brcc	.+30     	; 0x1b8c <vfprintf+0xb2>
    1b6e:	26 ff       	sbrs	r18, 6
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <vfprintf+0xa4>
    1b72:	fa e0       	ldi	r31, 0x0A	; 10
    1b74:	5f 9e       	mul	r5, r31
    1b76:	30 0d       	add	r19, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	53 2e       	mov	r5, r19
    1b7c:	13 c0       	rjmp	.+38     	; 0x1ba4 <vfprintf+0xca>
    1b7e:	8a e0       	ldi	r24, 0x0A	; 10
    1b80:	38 9e       	mul	r3, r24
    1b82:	30 0d       	add	r19, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	33 2e       	mov	r3, r19
    1b88:	20 62       	ori	r18, 0x20	; 32
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <vfprintf+0xca>
    1b8c:	8e 32       	cpi	r24, 0x2E	; 46
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <vfprintf+0xbe>
    1b90:	26 fd       	sbrc	r18, 6
    1b92:	6b c1       	rjmp	.+726    	; 0x1e6a <vfprintf+0x390>
    1b94:	20 64       	ori	r18, 0x40	; 64
    1b96:	06 c0       	rjmp	.+12     	; 0x1ba4 <vfprintf+0xca>
    1b98:	8c 36       	cpi	r24, 0x6C	; 108
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <vfprintf+0xc6>
    1b9c:	20 68       	ori	r18, 0x80	; 128
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <vfprintf+0xca>
    1ba0:	88 36       	cpi	r24, 0x68	; 104
    1ba2:	41 f4       	brne	.+16     	; 0x1bb4 <vfprintf+0xda>
    1ba4:	f6 01       	movw	r30, r12
    1ba6:	93 fd       	sbrc	r25, 3
    1ba8:	85 91       	lpm	r24, Z+
    1baa:	93 ff       	sbrs	r25, 3
    1bac:	81 91       	ld	r24, Z+
    1bae:	6f 01       	movw	r12, r30
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	c1 cf       	rjmp	.-126    	; 0x1b36 <vfprintf+0x5c>
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	9f 7d       	andi	r25, 0xDF	; 223
    1bb8:	95 54       	subi	r25, 0x45	; 69
    1bba:	93 30       	cpi	r25, 0x03	; 3
    1bbc:	28 f4       	brcc	.+10     	; 0x1bc8 <vfprintf+0xee>
    1bbe:	0c 5f       	subi	r16, 0xFC	; 252
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	ff e3       	ldi	r31, 0x3F	; 63
    1bc4:	f9 83       	std	Y+1, r31	; 0x01
    1bc6:	0d c0       	rjmp	.+26     	; 0x1be2 <vfprintf+0x108>
    1bc8:	83 36       	cpi	r24, 0x63	; 99
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <vfprintf+0xfe>
    1bcc:	83 37       	cpi	r24, 0x73	; 115
    1bce:	71 f0       	breq	.+28     	; 0x1bec <vfprintf+0x112>
    1bd0:	83 35       	cpi	r24, 0x53	; 83
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <vfprintf+0xfc>
    1bd4:	5b c0       	rjmp	.+182    	; 0x1c8c <vfprintf+0x1b2>
    1bd6:	22 c0       	rjmp	.+68     	; 0x1c1c <vfprintf+0x142>
    1bd8:	f8 01       	movw	r30, r16
    1bda:	80 81       	ld	r24, Z
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	0e 5f       	subi	r16, 0xFE	; 254
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	44 24       	eor	r4, r4
    1be4:	43 94       	inc	r4
    1be6:	51 2c       	mov	r5, r1
    1be8:	54 01       	movw	r10, r8
    1bea:	15 c0       	rjmp	.+42     	; 0x1c16 <vfprintf+0x13c>
    1bec:	38 01       	movw	r6, r16
    1bee:	f2 e0       	ldi	r31, 0x02	; 2
    1bf0:	6f 0e       	add	r6, r31
    1bf2:	71 1c       	adc	r7, r1
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	a0 80       	ld	r10, Z
    1bf8:	b1 80       	ldd	r11, Z+1	; 0x01
    1bfa:	26 ff       	sbrs	r18, 6
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <vfprintf+0x12a>
    1bfe:	65 2d       	mov	r22, r5
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <vfprintf+0x12e>
    1c04:	6f ef       	ldi	r22, 0xFF	; 255
    1c06:	7f ef       	ldi	r23, 0xFF	; 255
    1c08:	c5 01       	movw	r24, r10
    1c0a:	2c 87       	std	Y+12, r18	; 0x0c
    1c0c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <strnlen>
    1c10:	2c 01       	movw	r4, r24
    1c12:	83 01       	movw	r16, r6
    1c14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c16:	2f 77       	andi	r18, 0x7F	; 127
    1c18:	22 2e       	mov	r2, r18
    1c1a:	17 c0       	rjmp	.+46     	; 0x1c4a <vfprintf+0x170>
    1c1c:	38 01       	movw	r6, r16
    1c1e:	f2 e0       	ldi	r31, 0x02	; 2
    1c20:	6f 0e       	add	r6, r31
    1c22:	71 1c       	adc	r7, r1
    1c24:	f8 01       	movw	r30, r16
    1c26:	a0 80       	ld	r10, Z
    1c28:	b1 80       	ldd	r11, Z+1	; 0x01
    1c2a:	26 ff       	sbrs	r18, 6
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <vfprintf+0x15a>
    1c2e:	65 2d       	mov	r22, r5
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <vfprintf+0x15e>
    1c34:	6f ef       	ldi	r22, 0xFF	; 255
    1c36:	7f ef       	ldi	r23, 0xFF	; 255
    1c38:	c5 01       	movw	r24, r10
    1c3a:	2c 87       	std	Y+12, r18	; 0x0c
    1c3c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <strnlen_P>
    1c40:	2c 01       	movw	r4, r24
    1c42:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c44:	20 68       	ori	r18, 0x80	; 128
    1c46:	22 2e       	mov	r2, r18
    1c48:	83 01       	movw	r16, r6
    1c4a:	23 fc       	sbrc	r2, 3
    1c4c:	1b c0       	rjmp	.+54     	; 0x1c84 <vfprintf+0x1aa>
    1c4e:	83 2d       	mov	r24, r3
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	48 16       	cp	r4, r24
    1c54:	59 06       	cpc	r5, r25
    1c56:	b0 f4       	brcc	.+44     	; 0x1c84 <vfprintf+0x1aa>
    1c58:	b7 01       	movw	r22, r14
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1c62:	3a 94       	dec	r3
    1c64:	f4 cf       	rjmp	.-24     	; 0x1c4e <vfprintf+0x174>
    1c66:	f5 01       	movw	r30, r10
    1c68:	27 fc       	sbrc	r2, 7
    1c6a:	85 91       	lpm	r24, Z+
    1c6c:	27 fe       	sbrs	r2, 7
    1c6e:	81 91       	ld	r24, Z+
    1c70:	5f 01       	movw	r10, r30
    1c72:	b7 01       	movw	r22, r14
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1c7a:	31 10       	cpse	r3, r1
    1c7c:	3a 94       	dec	r3
    1c7e:	f1 e0       	ldi	r31, 0x01	; 1
    1c80:	4f 1a       	sub	r4, r31
    1c82:	51 08       	sbc	r5, r1
    1c84:	41 14       	cp	r4, r1
    1c86:	51 04       	cpc	r5, r1
    1c88:	71 f7       	brne	.-36     	; 0x1c66 <vfprintf+0x18c>
    1c8a:	e5 c0       	rjmp	.+458    	; 0x1e56 <vfprintf+0x37c>
    1c8c:	84 36       	cpi	r24, 0x64	; 100
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <vfprintf+0x1ba>
    1c90:	89 36       	cpi	r24, 0x69	; 105
    1c92:	39 f5       	brne	.+78     	; 0x1ce2 <vfprintf+0x208>
    1c94:	f8 01       	movw	r30, r16
    1c96:	27 ff       	sbrs	r18, 7
    1c98:	07 c0       	rjmp	.+14     	; 0x1ca8 <vfprintf+0x1ce>
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	0c 5f       	subi	r16, 0xFC	; 252
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <vfprintf+0x1de>
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	07 2e       	mov	r0, r23
    1cae:	00 0c       	add	r0, r0
    1cb0:	88 0b       	sbc	r24, r24
    1cb2:	99 0b       	sbc	r25, r25
    1cb4:	0e 5f       	subi	r16, 0xFE	; 254
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	2f 76       	andi	r18, 0x6F	; 111
    1cba:	72 2e       	mov	r7, r18
    1cbc:	97 ff       	sbrs	r25, 7
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <vfprintf+0x1f8>
    1cc0:	90 95       	com	r25
    1cc2:	80 95       	com	r24
    1cc4:	70 95       	com	r23
    1cc6:	61 95       	neg	r22
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	20 68       	ori	r18, 0x80	; 128
    1cd0:	72 2e       	mov	r7, r18
    1cd2:	2a e0       	ldi	r18, 0x0A	; 10
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	a4 01       	movw	r20, r8
    1cd8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__ultoa_invert>
    1cdc:	a8 2e       	mov	r10, r24
    1cde:	a8 18       	sub	r10, r8
    1ce0:	44 c0       	rjmp	.+136    	; 0x1d6a <vfprintf+0x290>
    1ce2:	85 37       	cpi	r24, 0x75	; 117
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <vfprintf+0x216>
    1ce6:	2f 7e       	andi	r18, 0xEF	; 239
    1ce8:	b2 2e       	mov	r11, r18
    1cea:	2a e0       	ldi	r18, 0x0A	; 10
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	25 c0       	rjmp	.+74     	; 0x1d3a <vfprintf+0x260>
    1cf0:	f2 2f       	mov	r31, r18
    1cf2:	f9 7f       	andi	r31, 0xF9	; 249
    1cf4:	bf 2e       	mov	r11, r31
    1cf6:	8f 36       	cpi	r24, 0x6F	; 111
    1cf8:	c1 f0       	breq	.+48     	; 0x1d2a <vfprintf+0x250>
    1cfa:	18 f4       	brcc	.+6      	; 0x1d02 <vfprintf+0x228>
    1cfc:	88 35       	cpi	r24, 0x58	; 88
    1cfe:	79 f0       	breq	.+30     	; 0x1d1e <vfprintf+0x244>
    1d00:	b4 c0       	rjmp	.+360    	; 0x1e6a <vfprintf+0x390>
    1d02:	80 37       	cpi	r24, 0x70	; 112
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <vfprintf+0x232>
    1d06:	88 37       	cpi	r24, 0x78	; 120
    1d08:	21 f0       	breq	.+8      	; 0x1d12 <vfprintf+0x238>
    1d0a:	af c0       	rjmp	.+350    	; 0x1e6a <vfprintf+0x390>
    1d0c:	2f 2f       	mov	r18, r31
    1d0e:	20 61       	ori	r18, 0x10	; 16
    1d10:	b2 2e       	mov	r11, r18
    1d12:	b4 fe       	sbrs	r11, 4
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <vfprintf+0x256>
    1d16:	8b 2d       	mov	r24, r11
    1d18:	84 60       	ori	r24, 0x04	; 4
    1d1a:	b8 2e       	mov	r11, r24
    1d1c:	09 c0       	rjmp	.+18     	; 0x1d30 <vfprintf+0x256>
    1d1e:	24 ff       	sbrs	r18, 4
    1d20:	0a c0       	rjmp	.+20     	; 0x1d36 <vfprintf+0x25c>
    1d22:	9f 2f       	mov	r25, r31
    1d24:	96 60       	ori	r25, 0x06	; 6
    1d26:	b9 2e       	mov	r11, r25
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x25c>
    1d2a:	28 e0       	ldi	r18, 0x08	; 8
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <vfprintf+0x260>
    1d30:	20 e1       	ldi	r18, 0x10	; 16
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <vfprintf+0x260>
    1d36:	20 e1       	ldi	r18, 0x10	; 16
    1d38:	32 e0       	ldi	r19, 0x02	; 2
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	b7 fe       	sbrs	r11, 7
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <vfprintf+0x274>
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0c 5f       	subi	r16, 0xFC	; 252
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <vfprintf+0x280>
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 5f       	subi	r16, 0xFE	; 254
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	a4 01       	movw	r20, r8
    1d5c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__ultoa_invert>
    1d60:	a8 2e       	mov	r10, r24
    1d62:	a8 18       	sub	r10, r8
    1d64:	fb 2d       	mov	r31, r11
    1d66:	ff 77       	andi	r31, 0x7F	; 127
    1d68:	7f 2e       	mov	r7, r31
    1d6a:	76 fe       	sbrs	r7, 6
    1d6c:	0b c0       	rjmp	.+22     	; 0x1d84 <vfprintf+0x2aa>
    1d6e:	37 2d       	mov	r19, r7
    1d70:	3e 7f       	andi	r19, 0xFE	; 254
    1d72:	a5 14       	cp	r10, r5
    1d74:	50 f4       	brcc	.+20     	; 0x1d8a <vfprintf+0x2b0>
    1d76:	74 fe       	sbrs	r7, 4
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <vfprintf+0x2b4>
    1d7a:	72 fc       	sbrc	r7, 2
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <vfprintf+0x2b4>
    1d7e:	37 2d       	mov	r19, r7
    1d80:	3e 7e       	andi	r19, 0xEE	; 238
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <vfprintf+0x2b4>
    1d84:	ba 2c       	mov	r11, r10
    1d86:	37 2d       	mov	r19, r7
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <vfprintf+0x2b6>
    1d8a:	ba 2c       	mov	r11, r10
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <vfprintf+0x2b6>
    1d8e:	b5 2c       	mov	r11, r5
    1d90:	34 ff       	sbrs	r19, 4
    1d92:	0d c0       	rjmp	.+26     	; 0x1dae <vfprintf+0x2d4>
    1d94:	fe 01       	movw	r30, r28
    1d96:	ea 0d       	add	r30, r10
    1d98:	f1 1d       	adc	r31, r1
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 33       	cpi	r24, 0x30	; 48
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <vfprintf+0x2ca>
    1da0:	39 7e       	andi	r19, 0xE9	; 233
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <vfprintf+0x2dc>
    1da4:	32 ff       	sbrs	r19, 2
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <vfprintf+0x2da>
    1da8:	b3 94       	inc	r11
    1daa:	b3 94       	inc	r11
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <vfprintf+0x2dc>
    1dae:	83 2f       	mov	r24, r19
    1db0:	86 78       	andi	r24, 0x86	; 134
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <vfprintf+0x2dc>
    1db4:	b3 94       	inc	r11
    1db6:	33 fd       	sbrc	r19, 3
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <vfprintf+0x306>
    1dba:	30 ff       	sbrs	r19, 0
    1dbc:	06 c0       	rjmp	.+12     	; 0x1dca <vfprintf+0x2f0>
    1dbe:	5a 2c       	mov	r5, r10
    1dc0:	b3 14       	cp	r11, r3
    1dc2:	18 f4       	brcc	.+6      	; 0x1dca <vfprintf+0x2f0>
    1dc4:	53 0c       	add	r5, r3
    1dc6:	5b 18       	sub	r5, r11
    1dc8:	b3 2c       	mov	r11, r3
    1dca:	b3 14       	cp	r11, r3
    1dcc:	68 f4       	brcc	.+26     	; 0x1de8 <vfprintf+0x30e>
    1dce:	b7 01       	movw	r22, r14
    1dd0:	80 e2       	ldi	r24, 0x20	; 32
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	3c 87       	std	Y+12, r19	; 0x0c
    1dd6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1dda:	b3 94       	inc	r11
    1ddc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dde:	f5 cf       	rjmp	.-22     	; 0x1dca <vfprintf+0x2f0>
    1de0:	b3 14       	cp	r11, r3
    1de2:	10 f4       	brcc	.+4      	; 0x1de8 <vfprintf+0x30e>
    1de4:	3b 18       	sub	r3, r11
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <vfprintf+0x310>
    1de8:	31 2c       	mov	r3, r1
    1dea:	34 ff       	sbrs	r19, 4
    1dec:	12 c0       	rjmp	.+36     	; 0x1e12 <vfprintf+0x338>
    1dee:	b7 01       	movw	r22, r14
    1df0:	80 e3       	ldi	r24, 0x30	; 48
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	3c 87       	std	Y+12, r19	; 0x0c
    1df6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1dfa:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dfc:	32 ff       	sbrs	r19, 2
    1dfe:	17 c0       	rjmp	.+46     	; 0x1e2e <vfprintf+0x354>
    1e00:	31 fd       	sbrc	r19, 1
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x330>
    1e04:	88 e7       	ldi	r24, 0x78	; 120
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vfprintf+0x334>
    1e0a:	88 e5       	ldi	r24, 0x58	; 88
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	b7 01       	movw	r22, r14
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <vfprintf+0x350>
    1e12:	83 2f       	mov	r24, r19
    1e14:	86 78       	andi	r24, 0x86	; 134
    1e16:	59 f0       	breq	.+22     	; 0x1e2e <vfprintf+0x354>
    1e18:	31 ff       	sbrs	r19, 1
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <vfprintf+0x346>
    1e1c:	8b e2       	ldi	r24, 0x2B	; 43
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <vfprintf+0x348>
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	37 fd       	sbrc	r19, 7
    1e24:	8d e2       	ldi	r24, 0x2D	; 45
    1e26:	b7 01       	movw	r22, r14
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1e2e:	a5 14       	cp	r10, r5
    1e30:	38 f4       	brcc	.+14     	; 0x1e40 <vfprintf+0x366>
    1e32:	b7 01       	movw	r22, r14
    1e34:	80 e3       	ldi	r24, 0x30	; 48
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1e3c:	5a 94       	dec	r5
    1e3e:	f7 cf       	rjmp	.-18     	; 0x1e2e <vfprintf+0x354>
    1e40:	aa 94       	dec	r10
    1e42:	f4 01       	movw	r30, r8
    1e44:	ea 0d       	add	r30, r10
    1e46:	f1 1d       	adc	r31, r1
    1e48:	80 81       	ld	r24, Z
    1e4a:	b7 01       	movw	r22, r14
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1e52:	a1 10       	cpse	r10, r1
    1e54:	f5 cf       	rjmp	.-22     	; 0x1e40 <vfprintf+0x366>
    1e56:	33 20       	and	r3, r3
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <vfprintf+0x382>
    1e5a:	51 ce       	rjmp	.-862    	; 0x1afe <vfprintf+0x24>
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	80 e2       	ldi	r24, 0x20	; 32
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <fputc>
    1e66:	3a 94       	dec	r3
    1e68:	f6 cf       	rjmp	.-20     	; 0x1e56 <vfprintf+0x37c>
    1e6a:	f7 01       	movw	r30, r14
    1e6c:	86 81       	ldd	r24, Z+6	; 0x06
    1e6e:	97 81       	ldd	r25, Z+7	; 0x07
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x39c>
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	2c 96       	adiw	r28, 0x0c	; 12
    1e78:	e2 e1       	ldi	r30, 0x12	; 18
    1e7a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__>

00001e7e <strnlen_P>:
    1e7e:	fc 01       	movw	r30, r24
    1e80:	05 90       	lpm	r0, Z+
    1e82:	61 50       	subi	r22, 0x01	; 1
    1e84:	70 40       	sbci	r23, 0x00	; 0
    1e86:	01 10       	cpse	r0, r1
    1e88:	d8 f7       	brcc	.-10     	; 0x1e80 <strnlen_P+0x2>
    1e8a:	80 95       	com	r24
    1e8c:	90 95       	com	r25
    1e8e:	8e 0f       	add	r24, r30
    1e90:	9f 1f       	adc	r25, r31
    1e92:	08 95       	ret

00001e94 <strnlen>:
    1e94:	fc 01       	movw	r30, r24
    1e96:	61 50       	subi	r22, 0x01	; 1
    1e98:	70 40       	sbci	r23, 0x00	; 0
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	01 10       	cpse	r0, r1
    1e9e:	d8 f7       	brcc	.-10     	; 0x1e96 <strnlen+0x2>
    1ea0:	80 95       	com	r24
    1ea2:	90 95       	com	r25
    1ea4:	8e 0f       	add	r24, r30
    1ea6:	9f 1f       	adc	r25, r31
    1ea8:	08 95       	ret

00001eaa <fputc>:
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	23 81       	ldd	r18, Z+3	; 0x03
    1eb6:	21 fd       	sbrc	r18, 1
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <fputc+0x16>
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	28 c0       	rjmp	.+80     	; 0x1f10 <fputc+0x66>
    1ec0:	22 ff       	sbrs	r18, 2
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <fputc+0x46>
    1ec4:	46 81       	ldd	r20, Z+6	; 0x06
    1ec6:	57 81       	ldd	r21, Z+7	; 0x07
    1ec8:	24 81       	ldd	r18, Z+4	; 0x04
    1eca:	35 81       	ldd	r19, Z+5	; 0x05
    1ecc:	42 17       	cp	r20, r18
    1ece:	53 07       	cpc	r21, r19
    1ed0:	44 f4       	brge	.+16     	; 0x1ee2 <fputc+0x38>
    1ed2:	a0 81       	ld	r26, Z
    1ed4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ed6:	9d 01       	movw	r18, r26
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	31 83       	std	Z+1, r19	; 0x01
    1ede:	20 83       	st	Z, r18
    1ee0:	8c 93       	st	X, r24
    1ee2:	26 81       	ldd	r18, Z+6	; 0x06
    1ee4:	37 81       	ldd	r19, Z+7	; 0x07
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	37 83       	std	Z+7, r19	; 0x07
    1eec:	26 83       	std	Z+6, r18	; 0x06
    1eee:	10 c0       	rjmp	.+32     	; 0x1f10 <fputc+0x66>
    1ef0:	eb 01       	movw	r28, r22
    1ef2:	09 2f       	mov	r16, r25
    1ef4:	18 2f       	mov	r17, r24
    1ef6:	00 84       	ldd	r0, Z+8	; 0x08
    1ef8:	f1 85       	ldd	r31, Z+9	; 0x09
    1efa:	e0 2d       	mov	r30, r0
    1efc:	09 95       	icall
    1efe:	89 2b       	or	r24, r25
    1f00:	e1 f6       	brne	.-72     	; 0x1eba <fputc+0x10>
    1f02:	8e 81       	ldd	r24, Y+6	; 0x06
    1f04:	9f 81       	ldd	r25, Y+7	; 0x07
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	9f 83       	std	Y+7, r25	; 0x07
    1f0a:	8e 83       	std	Y+6, r24	; 0x06
    1f0c:	81 2f       	mov	r24, r17
    1f0e:	90 2f       	mov	r25, r16
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <__ultoa_invert>:
    1f1a:	fa 01       	movw	r30, r20
    1f1c:	aa 27       	eor	r26, r26
    1f1e:	28 30       	cpi	r18, 0x08	; 8
    1f20:	51 f1       	breq	.+84     	; 0x1f76 <__ultoa_invert+0x5c>
    1f22:	20 31       	cpi	r18, 0x10	; 16
    1f24:	81 f1       	breq	.+96     	; 0x1f86 <__ultoa_invert+0x6c>
    1f26:	e8 94       	clt
    1f28:	6f 93       	push	r22
    1f2a:	6e 7f       	andi	r22, 0xFE	; 254
    1f2c:	6e 5f       	subi	r22, 0xFE	; 254
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	8f 4f       	sbci	r24, 0xFF	; 255
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	af 4f       	sbci	r26, 0xFF	; 255
    1f36:	b1 e0       	ldi	r27, 0x01	; 1
    1f38:	3e d0       	rcall	.+124    	; 0x1fb6 <__ultoa_invert+0x9c>
    1f3a:	b4 e0       	ldi	r27, 0x04	; 4
    1f3c:	3c d0       	rcall	.+120    	; 0x1fb6 <__ultoa_invert+0x9c>
    1f3e:	67 0f       	add	r22, r23
    1f40:	78 1f       	adc	r23, r24
    1f42:	89 1f       	adc	r24, r25
    1f44:	9a 1f       	adc	r25, r26
    1f46:	a1 1d       	adc	r26, r1
    1f48:	68 0f       	add	r22, r24
    1f4a:	79 1f       	adc	r23, r25
    1f4c:	8a 1f       	adc	r24, r26
    1f4e:	91 1d       	adc	r25, r1
    1f50:	a1 1d       	adc	r26, r1
    1f52:	6a 0f       	add	r22, r26
    1f54:	71 1d       	adc	r23, r1
    1f56:	81 1d       	adc	r24, r1
    1f58:	91 1d       	adc	r25, r1
    1f5a:	a1 1d       	adc	r26, r1
    1f5c:	20 d0       	rcall	.+64     	; 0x1f9e <__ultoa_invert+0x84>
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <__ultoa_invert+0x48>
    1f60:	68 94       	set
    1f62:	3f 91       	pop	r19
    1f64:	2a e0       	ldi	r18, 0x0A	; 10
    1f66:	26 9f       	mul	r18, r22
    1f68:	11 24       	eor	r1, r1
    1f6a:	30 19       	sub	r19, r0
    1f6c:	30 5d       	subi	r19, 0xD0	; 208
    1f6e:	31 93       	st	Z+, r19
    1f70:	de f6       	brtc	.-74     	; 0x1f28 <__ultoa_invert+0xe>
    1f72:	cf 01       	movw	r24, r30
    1f74:	08 95       	ret
    1f76:	46 2f       	mov	r20, r22
    1f78:	47 70       	andi	r20, 0x07	; 7
    1f7a:	40 5d       	subi	r20, 0xD0	; 208
    1f7c:	41 93       	st	Z+, r20
    1f7e:	b3 e0       	ldi	r27, 0x03	; 3
    1f80:	0f d0       	rcall	.+30     	; 0x1fa0 <__ultoa_invert+0x86>
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <__ultoa_invert+0x5c>
    1f84:	f6 cf       	rjmp	.-20     	; 0x1f72 <__ultoa_invert+0x58>
    1f86:	46 2f       	mov	r20, r22
    1f88:	4f 70       	andi	r20, 0x0F	; 15
    1f8a:	40 5d       	subi	r20, 0xD0	; 208
    1f8c:	4a 33       	cpi	r20, 0x3A	; 58
    1f8e:	18 f0       	brcs	.+6      	; 0x1f96 <__ultoa_invert+0x7c>
    1f90:	49 5d       	subi	r20, 0xD9	; 217
    1f92:	31 fd       	sbrc	r19, 1
    1f94:	40 52       	subi	r20, 0x20	; 32
    1f96:	41 93       	st	Z+, r20
    1f98:	02 d0       	rcall	.+4      	; 0x1f9e <__ultoa_invert+0x84>
    1f9a:	a9 f7       	brne	.-22     	; 0x1f86 <__ultoa_invert+0x6c>
    1f9c:	ea cf       	rjmp	.-44     	; 0x1f72 <__ultoa_invert+0x58>
    1f9e:	b4 e0       	ldi	r27, 0x04	; 4
    1fa0:	a6 95       	lsr	r26
    1fa2:	97 95       	ror	r25
    1fa4:	87 95       	ror	r24
    1fa6:	77 95       	ror	r23
    1fa8:	67 95       	ror	r22
    1faa:	ba 95       	dec	r27
    1fac:	c9 f7       	brne	.-14     	; 0x1fa0 <__ultoa_invert+0x86>
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	61 05       	cpc	r22, r1
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	08 95       	ret
    1fb6:	9b 01       	movw	r18, r22
    1fb8:	ac 01       	movw	r20, r24
    1fba:	0a 2e       	mov	r0, r26
    1fbc:	06 94       	lsr	r0
    1fbe:	57 95       	ror	r21
    1fc0:	47 95       	ror	r20
    1fc2:	37 95       	ror	r19
    1fc4:	27 95       	ror	r18
    1fc6:	ba 95       	dec	r27
    1fc8:	c9 f7       	brne	.-14     	; 0x1fbc <__ultoa_invert+0xa2>
    1fca:	62 0f       	add	r22, r18
    1fcc:	73 1f       	adc	r23, r19
    1fce:	84 1f       	adc	r24, r20
    1fd0:	95 1f       	adc	r25, r21
    1fd2:	a0 1d       	adc	r26, r0
    1fd4:	08 95       	ret

00001fd6 <__prologue_saves__>:
    1fd6:	2f 92       	push	r2
    1fd8:	3f 92       	push	r3
    1fda:	4f 92       	push	r4
    1fdc:	5f 92       	push	r5
    1fde:	6f 92       	push	r6
    1fe0:	7f 92       	push	r7
    1fe2:	8f 92       	push	r8
    1fe4:	9f 92       	push	r9
    1fe6:	af 92       	push	r10
    1fe8:	bf 92       	push	r11
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	ca 1b       	sub	r28, r26
    2000:	db 0b       	sbc	r29, r27
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	09 94       	ijmp

0000200e <__epilogue_restores__>:
    200e:	2a 88       	ldd	r2, Y+18	; 0x12
    2010:	39 88       	ldd	r3, Y+17	; 0x11
    2012:	48 88       	ldd	r4, Y+16	; 0x10
    2014:	5f 84       	ldd	r5, Y+15	; 0x0f
    2016:	6e 84       	ldd	r6, Y+14	; 0x0e
    2018:	7d 84       	ldd	r7, Y+13	; 0x0d
    201a:	8c 84       	ldd	r8, Y+12	; 0x0c
    201c:	9b 84       	ldd	r9, Y+11	; 0x0b
    201e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2020:	b9 84       	ldd	r11, Y+9	; 0x09
    2022:	c8 84       	ldd	r12, Y+8	; 0x08
    2024:	df 80       	ldd	r13, Y+7	; 0x07
    2026:	ee 80       	ldd	r14, Y+6	; 0x06
    2028:	fd 80       	ldd	r15, Y+5	; 0x05
    202a:	0c 81       	ldd	r16, Y+4	; 0x04
    202c:	1b 81       	ldd	r17, Y+3	; 0x03
    202e:	aa 81       	ldd	r26, Y+2	; 0x02
    2030:	b9 81       	ldd	r27, Y+1	; 0x01
    2032:	ce 0f       	add	r28, r30
    2034:	d1 1d       	adc	r29, r1
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	ed 01       	movw	r28, r26
    2042:	08 95       	ret

00002044 <_exit>:
    2044:	f8 94       	cli

00002046 <__stop_program>:
    2046:	ff cf       	rjmp	.-2      	; 0x2046 <__stop_program>
