
PCRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  00001bb8  00001c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030e  00800296  00800296  00001de2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145b  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075b  00000000  00000000  000033c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00003b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00004270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c8  00000000  00000000  0000456c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aef  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_3>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_7>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_14>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_19>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	03 08       	sbc	r0, r3
      6a:	fa 07       	cpc	r31, r26
      6c:	f0 07       	cpc	r31, r16
      6e:	e7 07       	cpc	r30, r23
      70:	df 07       	cpc	r29, r31
      72:	d6 07       	cpc	r29, r22
      74:	ce 07       	cpc	r28, r30
      76:	c7 07       	cpc	r28, r23
      78:	c4 07       	cpc	r28, r20
      7a:	2b 09       	sbc	r18, r11
      7c:	02 09       	sbc	r16, r2
      7e:	58 09       	sbc	r21, r8
      80:	58 09       	sbc	r21, r8
      82:	58 09       	sbc	r21, r8
      84:	32 09       	sbc	r19, r2
      86:	24 09       	sbc	r18, r4
      88:	50 09       	sbc	r21, r0
      8a:	45 09       	sbc	r20, r5
      8c:	3d 09       	sbc	r19, r13
      8e:	1c 09       	sbc	r17, r12
      90:	1c 09       	sbc	r17, r12
      92:	1c 09       	sbc	r17, r12
      94:	1c 09       	sbc	r17, r12
      96:	1c 09       	sbc	r17, r12
      98:	1c 09       	sbc	r17, r12
      9a:	1c 09       	sbc	r17, r12
      9c:	0a 09       	sbc	r16, r10
      9e:	12 09       	sbc	r17, r2

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	12 e0       	ldi	r17, 0x02	; 2
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e8 eb       	ldi	r30, 0xB8	; 184
      b4:	fb e1       	ldi	r31, 0x1B	; 27
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 39       	cpi	r26, 0x96	; 150
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	25 e0       	ldi	r18, 0x05	; 5
      c4:	a6 e9       	ldi	r26, 0x96	; 150
      c6:	b2 e0       	ldi	r27, 0x02	; 2
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a4 3a       	cpi	r26, 0xA4	; 164
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 6f 00 	call	0xde	; 0xde <main>
      d6:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <main>:
#include "../../DebugLogger/DebugLogger/debug_logger.h"

volatile decode_results_t decode_results;

int main(void)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	6e 97       	sbiw	r28, 0x1e	; 30
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
	init_debug_log();
      f2:	0e 94 0c 02 	call	0x418	; 0x418 <init_debug_log>
	enableIRRecv();
      f6:	0e 94 a2 03 	call	0x744	; 0x744 <enableIRRecv>
	setup_ps2device(PINB2, PINB1);
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	0e 94 9a 08 	call	0x1134	; 0x1134 <setup_ps2device>
	DDRB &= ~_BV(DDB0); // data direction input for B0
     102:	20 98       	cbi	0x04, 0	; 4
	PORTB |= _BV(PORTB0); // enable pullup
     104:	28 9a       	sbi	0x05, 0	; 5
	DDRD &= ~(_BV(DDD7) | _BV(DDD6) | _BV(DDD5));
     106:	8a b1       	in	r24, 0x0a	; 10
     108:	8f 71       	andi	r24, 0x1F	; 31
     10a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= _BV(PORTD7) | _BV(PORTD6) | _BV(PORTD5);
     10c:	8b b1       	in	r24, 0x0b	; 11
     10e:	80 6e       	ori	r24, 0xE0	; 224
     110:	8b b9       	out	0x0b, r24	; 11
	resumeIRRecv();
     112:	0e 94 9c 03 	call	0x738	; 0x738 <resumeIRRecv>
    while (1) 
    {
		do_ps2device_work();
		if (decodeHashIRRecv(&decode_results)) {
     116:	0f 2e       	mov	r0, r31
     118:	f6 e9       	ldi	r31, 0x96	; 150
     11a:	ef 2e       	mov	r14, r31
     11c:	f5 e0       	ldi	r31, 0x05	; 5
     11e:	ff 2e       	mov	r15, r31
     120:	f0 2d       	mov	r31, r0
			resumeIRRecv();
			char strbuf1[30];
			sprintf(strbuf1,"-R:%d\r\n",decode_results.rawlen);
     122:	0f 2e       	mov	r0, r31
     124:	f2 e0       	ldi	r31, 0x02	; 2
     126:	8f 2e       	mov	r8, r31
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	9f 2e       	mov	r9, r31
     12c:	f0 2d       	mov	r31, r0
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	5c 01       	movw	r10, r24
			debug_log(strbuf1);
			for (int i = 0; i< decode_results.rawlen; i++)
			{
				sprintf(strbuf1, "%d,",decode_results.rawbuf[i]);
     134:	0f 2e       	mov	r0, r31
     136:	fa e0       	ldi	r31, 0x0A	; 10
     138:	cf 2e       	mov	r12, r31
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	df 2e       	mov	r13, r31
     13e:	f0 2d       	mov	r31, r0
     140:	4e 2c       	mov	r4, r14
     142:	5f 2c       	mov	r5, r15
    {
		do_ps2device_work();
		if (decodeHashIRRecv(&decode_results)) {
			resumeIRRecv();
			char strbuf1[30];
			sprintf(strbuf1,"-R:%d\r\n",decode_results.rawlen);
     144:	68 2e       	mov	r6, r24
     146:	7b 2c       	mov	r7, r11
			debug_log(strbuf1);
			for (int i = 0; i< decode_results.rawlen; i++)
     148:	21 2c       	mov	r2, r1
     14a:	31 2c       	mov	r3, r1
	DDRD &= ~(_BV(DDD7) | _BV(DDD6) | _BV(DDD5));
	PORTD |= _BV(PORTD7) | _BV(PORTD6) | _BV(PORTD5);
	resumeIRRecv();
    while (1) 
    {
		do_ps2device_work();
     14c:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
		if (decodeHashIRRecv(&decode_results)) {
     150:	84 2d       	mov	r24, r4
     152:	95 2d       	mov	r25, r5
     154:	0e 94 17 03 	call	0x62e	; 0x62e <decodeHashIRRecv>
     158:	88 23       	and	r24, r24
     15a:	09 f4       	brne	.+2      	; 0x15e <main+0x80>
     15c:	4b c0       	rjmp	.+150    	; 0x1f4 <main+0x116>
			resumeIRRecv();
     15e:	0e 94 9c 03 	call	0x738	; 0x738 <resumeIRRecv>
			char strbuf1[30];
			sprintf(strbuf1,"-R:%d\r\n",decode_results.rawlen);
     162:	d7 01       	movw	r26, r14
     164:	1c 96       	adiw	r26, 0x0c	; 12
     166:	8d 91       	ld	r24, X+
     168:	9c 91       	ld	r25, X
     16a:	1d 97       	sbiw	r26, 0x0d	; 13
     16c:	9f 93       	push	r25
     16e:	8f 93       	push	r24
     170:	9f 92       	push	r9
     172:	8f 92       	push	r8
     174:	bf 92       	push	r11
     176:	af 92       	push	r10
     178:	0e 94 02 0b 	call	0x1604	; 0x1604 <sprintf>
			debug_log(strbuf1);
     17c:	86 2d       	mov	r24, r6
     17e:	97 2d       	mov	r25, r7
     180:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			for (int i = 0; i< decode_results.rawlen; i++)
     184:	f7 01       	movw	r30, r14
     186:	84 85       	ldd	r24, Z+12	; 0x0c
     188:	95 85       	ldd	r25, Z+13	; 0x0d
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	18 16       	cp	r1, r24
     198:	19 06       	cpc	r1, r25
     19a:	44 f5       	brge	.+80     	; 0x1ec <main+0x10e>
     19c:	02 2d       	mov	r16, r2
     19e:	13 2d       	mov	r17, r3
			{
				sprintf(strbuf1, "%d,",decode_results.rawbuf[i]);
     1a0:	d7 01       	movw	r26, r14
     1a2:	1a 96       	adiw	r26, 0x0a	; 10
     1a4:	ed 91       	ld	r30, X+
     1a6:	fc 91       	ld	r31, X
     1a8:	1b 97       	sbiw	r26, 0x0b	; 11
     1aa:	c8 01       	movw	r24, r16
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	e8 0f       	add	r30, r24
     1b2:	f9 1f       	adc	r31, r25
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	9f 93       	push	r25
     1ba:	8f 93       	push	r24
     1bc:	df 92       	push	r13
     1be:	cf 92       	push	r12
     1c0:	bf 92       	push	r11
     1c2:	af 92       	push	r10
     1c4:	0e 94 02 0b 	call	0x1604	; 0x1604 <sprintf>
				debug_log(strbuf1);
     1c8:	86 2d       	mov	r24, r6
     1ca:	97 2d       	mov	r25, r7
     1cc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
		if (decodeHashIRRecv(&decode_results)) {
			resumeIRRecv();
			char strbuf1[30];
			sprintf(strbuf1,"-R:%d\r\n",decode_results.rawlen);
			debug_log(strbuf1);
			for (int i = 0; i< decode_results.rawlen; i++)
     1d0:	0f 5f       	subi	r16, 0xFF	; 255
     1d2:	1f 4f       	sbci	r17, 0xFF	; 255
     1d4:	f7 01       	movw	r30, r14
     1d6:	84 85       	ldd	r24, Z+12	; 0x0c
     1d8:	95 85       	ldd	r25, Z+13	; 0x0d
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	08 17       	cp	r16, r24
     1e8:	19 07       	cpc	r17, r25
     1ea:	d4 f2       	brlt	.-76     	; 0x1a0 <main+0xc2>
			{
				sprintf(strbuf1, "%d,",decode_results.rawbuf[i]);
				debug_log(strbuf1);
			}
			debug_log("\r\n");
     1ec:	86 ed       	ldi	r24, 0xD6	; 214
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
		}
		if (bit_is_clear(PINB,PINB0)) {
     1f4:	18 99       	sbic	0x03, 0	; 3
     1f6:	24 c0       	rjmp	.+72     	; 0x240 <main+0x162>
			debug_log("Make U ARROW\r\n");
     1f8:	8e e0       	ldi	r24, 0x0E	; 14
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_MAKE(PS2DC_U_ARROW_EXT);
     200:	80 ee       	ldi	r24, 0xE0	; 224
     202:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     206:	85 e7       	ldi	r24, 0x75	; 117
     208:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     20c:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     210:	ff ef       	ldi	r31, 0xFF	; 255
     212:	20 e7       	ldi	r18, 0x70	; 112
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	f1 50       	subi	r31, 0x01	; 1
     218:	20 40       	sbci	r18, 0x00	; 0
     21a:	80 40       	sbci	r24, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x138>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x142>
     220:	00 00       	nop
			_delay_ms(100);
			debug_log("Break U ARROW\r\n");
     222:	8d e1       	ldi	r24, 0x1D	; 29
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_BREAK(PS2DC_U_ARROW_EXT);
     22a:	80 ef       	ldi	r24, 0xF0	; 240
     22c:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     230:	80 ee       	ldi	r24, 0xE0	; 224
     232:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     236:	85 e7       	ldi	r24, 0x75	; 117
     238:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     23c:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
		}
		if (bit_is_clear(PIND,PIND7)) {
     240:	4f 99       	sbic	0x09, 7	; 9
     242:	24 c0       	rjmp	.+72     	; 0x28c <main+0x1ae>
			debug_log("Make D ARROW\r\n");
     244:	8d e2       	ldi	r24, 0x2D	; 45
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_MAKE(PS2DC_D_ARROW_EXT);
     24c:	80 ee       	ldi	r24, 0xE0	; 224
     24e:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     252:	82 e7       	ldi	r24, 0x72	; 114
     254:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     258:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
     25c:	9f ef       	ldi	r25, 0xFF	; 255
     25e:	a0 e7       	ldi	r26, 0x70	; 112
     260:	b2 e0       	ldi	r27, 0x02	; 2
     262:	91 50       	subi	r25, 0x01	; 1
     264:	a0 40       	sbci	r26, 0x00	; 0
     266:	b0 40       	sbci	r27, 0x00	; 0
     268:	e1 f7       	brne	.-8      	; 0x262 <main+0x184>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x18e>
     26c:	00 00       	nop
			_delay_ms(100);
			debug_log("Break D ARROW\r\n");
     26e:	8c e3       	ldi	r24, 0x3C	; 60
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_BREAK(PS2DC_D_ARROW_EXT);
     276:	80 ef       	ldi	r24, 0xF0	; 240
     278:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     27c:	80 ee       	ldi	r24, 0xE0	; 224
     27e:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     282:	82 e7       	ldi	r24, 0x72	; 114
     284:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     288:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
		}
		if (bit_is_clear(PIND,PIND6)) {
     28c:	4e 99       	sbic	0x09, 6	; 9
     28e:	24 c0       	rjmp	.+72     	; 0x2d8 <main+0x1fa>
			debug_log("Make R ARROW\r\n");
     290:	8c e4       	ldi	r24, 0x4C	; 76
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_MAKE(PS2DC_R_ARROW_EXT);
     298:	80 ee       	ldi	r24, 0xE0	; 224
     29a:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     29e:	84 e7       	ldi	r24, 0x74	; 116
     2a0:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2a4:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
     2a8:	ef ef       	ldi	r30, 0xFF	; 255
     2aa:	f0 e7       	ldi	r31, 0x70	; 112
     2ac:	22 e0       	ldi	r18, 0x02	; 2
     2ae:	e1 50       	subi	r30, 0x01	; 1
     2b0:	f0 40       	sbci	r31, 0x00	; 0
     2b2:	20 40       	sbci	r18, 0x00	; 0
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x1d0>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x1da>
     2b8:	00 00       	nop
			_delay_ms(100);
			debug_log("Break R ARROW\r\n");
     2ba:	8b e5       	ldi	r24, 0x5B	; 91
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_BREAK(PS2DC_R_ARROW_EXT);
     2c2:	80 ef       	ldi	r24, 0xF0	; 240
     2c4:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2c8:	80 ee       	ldi	r24, 0xE0	; 224
     2ca:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2ce:	84 e7       	ldi	r24, 0x74	; 116
     2d0:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2d4:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
		}
		if (bit_is_clear(PIND,PIND5)) {
     2d8:	4d 99       	sbic	0x09, 5	; 9
     2da:	38 cf       	rjmp	.-400    	; 0x14c <main+0x6e>
			debug_log("Make L ARROW\r\n");
     2dc:	8b e6       	ldi	r24, 0x6B	; 107
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_MAKE(PS2DC_L_ARROW_EXT);
     2e4:	80 ee       	ldi	r24, 0xE0	; 224
     2e6:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2ea:	8b e6       	ldi	r24, 0x6B	; 107
     2ec:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     2f0:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	90 e7       	ldi	r25, 0x70	; 112
     2f8:	a2 e0       	ldi	r26, 0x02	; 2
     2fa:	81 50       	subi	r24, 0x01	; 1
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	a0 40       	sbci	r26, 0x00	; 0
     300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x21c>
     302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x226>
     304:	00 00       	nop
			_delay_ms(100);
			debug_log("Break L ARROW\r\n");
     306:	8a e7       	ldi	r24, 0x7A	; 122
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			SEND_EXT_BREAK(PS2DC_L_ARROW_EXT);
     30e:	80 ef       	ldi	r24, 0xF0	; 240
     310:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     314:	80 ee       	ldi	r24, 0xE0	; 224
     316:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     31a:	8b e6       	ldi	r24, 0x6B	; 107
     31c:	0e 94 92 09 	call	0x1324	; 0x1324 <add_char_to_send_buf>
     320:	0e 94 a1 08 	call	0x1142	; 0x1142 <do_ps2device_work>
     324:	13 cf       	rjmp	.-474    	; 0x14c <main+0x6e>

00000326 <_get_char_from_log_buf>:
static volatile uint8_t _log_buf_head = 0;
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
     326:	80 91 96 02 	lds	r24, 0x0296
     32a:	88 23       	and	r24, r24
     32c:	99 f0       	breq	.+38     	; 0x354 <_get_char_from_log_buf+0x2e>
		return 0;
	}
	char c = _log_buf[_log_buf_head];
     32e:	e0 91 97 02 	lds	r30, 0x0297
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e8 56       	subi	r30, 0x68	; 104
     336:	fd 4f       	sbci	r31, 0xFD	; 253
     338:	80 81       	ld	r24, Z
	_log_buf_head++;
     33a:	90 91 97 02 	lds	r25, 0x0297
     33e:	9f 5f       	subi	r25, 0xFF	; 255
     340:	90 93 97 02 	sts	0x0297, r25
	_log_buf_len--;
     344:	90 91 96 02 	lds	r25, 0x0296
     348:	91 50       	subi	r25, 0x01	; 1
     34a:	90 93 96 02 	sts	0x0296, r25
	if (_log_buf_head >= LOG_BUF_SIZE) {
     34e:	90 91 97 02 	lds	r25, 0x0297
		_log_buf_head = 0;
	}
	return c;
     352:	08 95       	ret
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
		return 0;
     354:	80 e0       	ldi	r24, 0x00	; 0
	_log_buf_len--;
	if (_log_buf_head >= LOG_BUF_SIZE) {
		_log_buf_head = 0;
	}
	return c;
}
     356:	08 95       	ret

00000358 <__vector_19>:
	_log_buf_len++;
	sei();
	return true;
}

ISR(USART_UDRE_vect) {
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	4f 93       	push	r20
     368:	5f 93       	push	r21
     36a:	6f 93       	push	r22
     36c:	7f 93       	push	r23
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
	// if num char in buf <= 1 then disable this int
	// if char in buf -> get char from bug and put in UART
	char c = _get_char_from_log_buf();
     37a:	0e 94 93 01 	call	0x326	; 0x326 <_get_char_from_log_buf>
	if (c) {
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <__vector_19+0x30>
		UDR0 = c;
     382:	80 93 c6 00 	sts	0x00C6, r24
     386:	05 c0       	rjmp	.+10     	; 0x392 <__vector_19+0x3a>
	} else {
		UCSR0B &= ~_BV(UDRIE0);
     388:	e1 ec       	ldi	r30, 0xC1	; 193
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	8f 7d       	andi	r24, 0xDF	; 223
     390:	80 83       	st	Z, r24
	}
}
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <debug_log>:

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; i < LOG_BUF_SIZE && str[i] != 0; i++)
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 81       	ld	r18, Z
     3b8:	22 23       	and	r18, r18
     3ba:	e1 f0       	breq	.+56     	; 0x3f4 <debug_log+0x40>
     3bc:	dc 01       	movw	r26, r24
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	ac 01       	movw	r20, r24
     3c2:	5e 5f       	subi	r21, 0xFE	; 254
	return c;
}

// returns true if successful and false if buffer full
static bool _put_char_into_log_buf(char c) {
	cli();
     3c4:	f8 94       	cli
	if (_log_buf_len >= LOG_BUF_SIZE) {
     3c6:	80 91 96 02 	lds	r24, 0x0296
		sei();
		return false;
	}
	uint8_t i = _log_buf_head + _log_buf_len;
     3ca:	90 91 97 02 	lds	r25, 0x0297
     3ce:	e0 91 96 02 	lds	r30, 0x0296
     3d2:	e9 0f       	add	r30, r25
	if (i >= LOG_BUF_SIZE) {
		i -= LOG_BUF_SIZE;
	}
	_log_buf[i] = c;
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	e8 56       	subi	r30, 0x68	; 104
     3d8:	fd 4f       	sbci	r31, 0xFD	; 253
     3da:	20 83       	st	Z, r18
	_log_buf_len++;
     3dc:	90 91 96 02 	lds	r25, 0x0296
     3e0:	9f 5f       	subi	r25, 0xFF	; 255
     3e2:	90 93 96 02 	sts	0x0296, r25
	sei();
     3e6:	78 94       	sei
	}
}

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; i < LOG_BUF_SIZE && str[i] != 0; i++)
     3e8:	a4 17       	cp	r26, r20
     3ea:	b5 07       	cpc	r27, r21
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <debug_log+0x40>
     3ee:	2d 91       	ld	r18, X+
     3f0:	21 11       	cpse	r18, r1
     3f2:	e8 cf       	rjmp	.-48     	; 0x3c4 <debug_log+0x10>
		if (!_put_char_into_log_buf(str[i])) {
			break;
		}
	}
	// if !(USART_UDRE enabled) then enabled it and put first char in UART
	if (!(UCSR0B & _BV(UDRIE0))) {
     3f4:	80 91 c1 00 	lds	r24, 0x00C1
     3f8:	85 fd       	sbrc	r24, 5
     3fa:	0d c0       	rjmp	.+26     	; 0x416 <debug_log+0x62>
		cli();
     3fc:	f8 94       	cli
		char c = _get_char_from_log_buf();
     3fe:	0e 94 93 01 	call	0x326	; 0x326 <_get_char_from_log_buf>
		if (c) {
     402:	88 23       	and	r24, r24
     404:	39 f0       	breq	.+14     	; 0x414 <debug_log+0x60>
			UCSR0B |= _BV(UDRIE0);
     406:	e1 ec       	ldi	r30, 0xC1	; 193
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	90 81       	ld	r25, Z
     40c:	90 62       	ori	r25, 0x20	; 32
     40e:	90 83       	st	Z, r25
			UDR0 = c;
     410:	80 93 c6 00 	sts	0x00C6, r24
		}
		sei();		
     414:	78 94       	sei
     416:	08 95       	ret

00000418 <init_debug_log>:
	}
}

void init_debug_log() {
	UCSR0A = _BV(U2X0);
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	80 93 c0 00 	sts	0x00C0, r24
	UBRR0L = 8; //115200 baud - see page 188 of ATmega328 book
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(TXEN0); /* only tx enable */
     424:	80 93 c1 00 	sts	0x00C1, r24
     428:	08 95       	ret

0000042a <__vector_7>:
// rawlen counts the number of entries recorded so far.
// First entry is the SPACE between transmissions.
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
ISR(TIMER_INTR_NAME)
{
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31

	uint8_t irdata = bit_is_set(_IRPIN,IR_RECV_PIN) ? SPACE : MARK;
     448:	89 b1       	in	r24, 0x09	; 9
     44a:	82 fb       	bst	r24, 2
     44c:	88 27       	eor	r24, r24
     44e:	80 f9       	bld	r24, 0

	irparams.timer++; // One more 50us tick
     450:	ea ec       	ldi	r30, 0xCA	; 202
     452:	f4 e0       	ldi	r31, 0x04	; 4
     454:	21 81       	ldd	r18, Z+1	; 0x01
     456:	32 81       	ldd	r19, Z+2	; 0x02
     458:	2f 5f       	subi	r18, 0xFF	; 255
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	32 83       	std	Z+2, r19	; 0x02
     45e:	21 83       	std	Z+1, r18	; 0x01
	if (irparams.rawlen >= RAWBUF) {
     460:	90 91 95 05 	lds	r25, 0x0595
     464:	94 36       	cpi	r25, 0x64	; 100
     466:	18 f0       	brcs	.+6      	; 0x46e <__vector_7+0x44>
		// Buffer overflow
		irparams.rcvstate = STATE_STOP;
     468:	95 e0       	ldi	r25, 0x05	; 5
     46a:	90 93 ca 04 	sts	0x04CA, r25
	}
	switch(irparams.rcvstate) {
     46e:	90 91 ca 04 	lds	r25, 0x04CA
     472:	93 30       	cpi	r25, 0x03	; 3
     474:	a1 f1       	breq	.+104    	; 0x4de <__vector_7+0xb4>
     476:	18 f4       	brcc	.+6      	; 0x47e <__vector_7+0x54>
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	41 f0       	breq	.+16     	; 0x48c <__vector_7+0x62>
     47c:	7a c0       	rjmp	.+244    	; 0x572 <__vector_7+0x148>
     47e:	94 30       	cpi	r25, 0x04	; 4
     480:	09 f4       	brne	.+2      	; 0x484 <__vector_7+0x5a>
     482:	49 c0       	rjmp	.+146    	; 0x516 <__vector_7+0xec>
     484:	95 30       	cpi	r25, 0x05	; 5
     486:	09 f4       	brne	.+2      	; 0x48a <__vector_7+0x60>
     488:	6d c0       	rjmp	.+218    	; 0x564 <__vector_7+0x13a>
     48a:	73 c0       	rjmp	.+230    	; 0x572 <__vector_7+0x148>
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
     48c:	81 11       	cpse	r24, r1
     48e:	75 c0       	rjmp	.+234    	; 0x57a <__vector_7+0x150>
				if (irparams.timer < GAP_TICKS) {
     490:	80 91 cb 04 	lds	r24, 0x04CB
     494:	90 91 cc 04 	lds	r25, 0x04CC
     498:	84 36       	cpi	r24, 0x64	; 100
     49a:	91 05       	cpc	r25, r1
     49c:	28 f4       	brcc	.+10     	; 0x4a8 <__vector_7+0x7e>
					// Not big enough to be a gap.
					irparams.timer = 0;
     49e:	10 92 cc 04 	sts	0x04CC, r1
     4a2:	10 92 cb 04 	sts	0x04CB, r1
     4a6:	67 c0       	rjmp	.+206    	; 0x576 <__vector_7+0x14c>
				}
				else {
					// gap just ended, record duration and start recording transmission
					irparams.rawlen = 0;
     4a8:	aa ec       	ldi	r26, 0xCA	; 202
     4aa:	b4 e0       	ldi	r27, 0x04	; 4
     4ac:	c5 e9       	ldi	r28, 0x95	; 149
     4ae:	d5 e0       	ldi	r29, 0x05	; 5
     4b0:	18 82       	st	Y, r1
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     4b2:	e8 81       	ld	r30, Y
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	8e 0f       	add	r24, r30
     4b8:	88 83       	st	Y, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	12 97       	sbiw	r26, 0x02	; 2
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	e6 53       	subi	r30, 0x36	; 54
     4ca:	fb 4f       	sbci	r31, 0xFB	; 251
     4cc:	94 83       	std	Z+4, r25	; 0x04
     4ce:	83 83       	std	Z+3, r24	; 0x03
					irparams.timer = 0;
     4d0:	12 96       	adiw	r26, 0x02	; 2
     4d2:	1c 92       	st	X, r1
     4d4:	1e 92       	st	-X, r1
     4d6:	11 97       	sbiw	r26, 0x01	; 1
					irparams.rcvstate = STATE_MARK;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	8c 93       	st	X, r24
     4dc:	4c c0       	rjmp	.+152    	; 0x576 <__vector_7+0x14c>
				}
			}
			break;
		case STATE_MARK: // timing MARK
			if (irdata == SPACE) {   // MARK ended, record time
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__vector_7+0xba>
     4e2:	47 c0       	rjmp	.+142    	; 0x572 <__vector_7+0x148>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     4e4:	aa ec       	ldi	r26, 0xCA	; 202
     4e6:	b4 e0       	ldi	r27, 0x04	; 4
     4e8:	c5 e9       	ldi	r28, 0x95	; 149
     4ea:	d5 e0       	ldi	r29, 0x05	; 5
     4ec:	e8 81       	ld	r30, Y
     4ee:	8e 0f       	add	r24, r30
     4f0:	88 83       	st	Y, r24
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	11 96       	adiw	r26, 0x01	; 1
     4f6:	8d 91       	ld	r24, X+
     4f8:	9c 91       	ld	r25, X
     4fa:	12 97       	sbiw	r26, 0x02	; 2
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	e6 53       	subi	r30, 0x36	; 54
     502:	fb 4f       	sbci	r31, 0xFB	; 251
     504:	94 83       	std	Z+4, r25	; 0x04
     506:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     508:	12 96       	adiw	r26, 0x02	; 2
     50a:	1c 92       	st	X, r1
     50c:	1e 92       	st	-X, r1
     50e:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_SPACE;
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	8c 93       	st	X, r24
     514:	32 c0       	rjmp	.+100    	; 0x57a <__vector_7+0x150>
			}
			break;
		case STATE_SPACE: // timing SPACE
			if (irdata == MARK) { // SPACE just ended, record it
     516:	81 11       	cpse	r24, r1
     518:	1a c0       	rjmp	.+52     	; 0x54e <__vector_7+0x124>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     51a:	aa ec       	ldi	r26, 0xCA	; 202
     51c:	b4 e0       	ldi	r27, 0x04	; 4
     51e:	c5 e9       	ldi	r28, 0x95	; 149
     520:	d5 e0       	ldi	r29, 0x05	; 5
     522:	e8 81       	ld	r30, Y
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8e 0f       	add	r24, r30
     528:	88 83       	st	Y, r24
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	11 96       	adiw	r26, 0x01	; 1
     52e:	8d 91       	ld	r24, X+
     530:	9c 91       	ld	r25, X
     532:	12 97       	sbiw	r26, 0x02	; 2
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e6 53       	subi	r30, 0x36	; 54
     53a:	fb 4f       	sbci	r31, 0xFB	; 251
     53c:	94 83       	std	Z+4, r25	; 0x04
     53e:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	1c 92       	st	X, r1
     544:	1e 92       	st	-X, r1
     546:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_MARK;
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	8c 93       	st	X, r24
     54c:	14 c0       	rjmp	.+40     	; 0x576 <__vector_7+0x14c>
			}
			else { // SPACE
				if (irparams.timer > GAP_TICKS) {
     54e:	80 91 cb 04 	lds	r24, 0x04CB
     552:	90 91 cc 04 	lds	r25, 0x04CC
     556:	85 36       	cpi	r24, 0x65	; 101
     558:	91 05       	cpc	r25, r1
     55a:	78 f0       	brcs	.+30     	; 0x57a <__vector_7+0x150>
					// big SPACE, indicates gap between codes
					// Mark current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting space width
					irparams.rcvstate = STATE_STOP;
     55c:	85 e0       	ldi	r24, 0x05	; 5
     55e:	80 93 ca 04 	sts	0x04CA, r24
     562:	0b c0       	rjmp	.+22     	; 0x57a <__vector_7+0x150>
				}
			}
			break;
		case STATE_STOP: // waiting, measuring gap
			if (irdata == MARK) { // reset gap timer
     564:	81 11       	cpse	r24, r1
     566:	09 c0       	rjmp	.+18     	; 0x57a <__vector_7+0x150>
				irparams.timer = 0;
     568:	10 92 cc 04 	sts	0x04CC, r1
     56c:	10 92 cb 04 	sts	0x04CB, r1
     570:	02 c0       	rjmp	.+4      	; 0x576 <__vector_7+0x14c>
			}
			break;
	}

#ifdef BLINK_LED
	if (irdata == MARK) {
     572:	81 11       	cpse	r24, r1
     574:	02 c0       	rjmp	.+4      	; 0x57a <__vector_7+0x150>
		_LED_PORT |= _BV(BLINK_LED_PIN);
     576:	45 9a       	sbi	0x08, 5	; 8
     578:	01 c0       	rjmp	.+2      	; 0x57c <__vector_7+0x152>
		//PORTC |= _BV(PORTC5); //set the bit
	}
	else {
		_LED_PORT &=~ _BV(BLINK_LED_PIN);
     57a:	45 98       	cbi	0x08, 5	; 8
		//PORTC &= ~_BV(PORTC5); //clear the bit
	}
#endif
}
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	bf 91       	pop	r27
     586:	af 91       	pop	r26
     588:	9f 91       	pop	r25
     58a:	8f 91       	pop	r24
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <compare>:

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int compare(unsigned int oldval, unsigned int newval) {
     59a:	8f 92       	push	r8
     59c:	9f 92       	push	r9
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
	if (newval < oldval * .8) {
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatunsisf>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	be 01       	movw	r22, r28
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 b3 09 	call	0x1366	; 0x1366 <__floatunsisf>
     5c6:	6b 01       	movw	r12, r22
     5c8:	7c 01       	movw	r14, r24
     5ca:	2d ec       	ldi	r18, 0xCD	; 205
     5cc:	3c ec       	ldi	r19, 0xCC	; 204
     5ce:	4c e4       	ldi	r20, 0x4C	; 76
     5d0:	5f e3       	ldi	r21, 0x3F	; 63
     5d2:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     5d6:	9b 01       	movw	r18, r22
     5d8:	ac 01       	movw	r20, r24
     5da:	c5 01       	movw	r24, r10
     5dc:	b4 01       	movw	r22, r8
     5de:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	bc f0       	brlt	.+46     	; 0x614 <compare+0x7a>
		return 0;
	}
	else if (oldval < newval * .8) {
     5e6:	2d ec       	ldi	r18, 0xCD	; 205
     5e8:	3c ec       	ldi	r19, 0xCC	; 204
     5ea:	4c e4       	ldi	r20, 0x4C	; 76
     5ec:	5f e3       	ldi	r21, 0x3F	; 63
     5ee:	c5 01       	movw	r24, r10
     5f0:	b4 01       	movw	r22, r8
     5f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	c7 01       	movw	r24, r14
     5fc:	b6 01       	movw	r22, r12
     5fe:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
		return 2;
	}
	else {
		return 1;
     602:	08 2e       	mov	r0, r24
     604:	00 0c       	add	r0, r0
     606:	99 0b       	sbc	r25, r25
     608:	88 27       	eor	r24, r24
     60a:	99 0f       	add	r25, r25
     60c:	88 1f       	adc	r24, r24
     60e:	99 27       	eor	r25, r25
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	02 c0       	rjmp	.+4      	; 0x618 <compare+0x7e>
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int compare(unsigned int oldval, unsigned int newval) {
	if (newval < oldval * .8) {
		return 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
		return 2;
	}
	else {
		return 1;
	}
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	08 95       	ret

0000062e <decodeHashIRRecv>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
bool decodeHashIRRecv(volatile decode_results_t *results) {
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
  results->rawbuf = irparams.rawbuf;
     644:	8d ec       	ldi	r24, 0xCD	; 205
     646:	94 e0       	ldi	r25, 0x04	; 4
     648:	9b 87       	std	Y+11, r25	; 0x0b
     64a:	8a 87       	std	Y+10, r24	; 0x0a
  results->rawlen = irparams.rawlen;
     64c:	80 91 95 05 	lds	r24, 0x0595
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9d 87       	std	Y+13, r25	; 0x0d
     654:	8c 87       	std	Y+12, r24	; 0x0c
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6 || irparams.rcvstate != STATE_STOP) {
     656:	8c 85       	ldd	r24, Y+12	; 0x0c
     658:	9d 85       	ldd	r25, Y+13	; 0x0d
     65a:	06 97       	sbiw	r24, 0x06	; 6
     65c:	0c f4       	brge	.+2      	; 0x660 <decodeHashIRRecv+0x32>
     65e:	5e c0       	rjmp	.+188    	; 0x71c <decodeHashIRRecv+0xee>
     660:	80 91 ca 04 	lds	r24, 0x04CA
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	09 f0       	breq	.+2      	; 0x66a <decodeHashIRRecv+0x3c>
     668:	5b c0       	rjmp	.+182    	; 0x720 <decodeHashIRRecv+0xf2>
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
     66a:	8c 85       	ldd	r24, Y+12	; 0x0c
     66c:	9d 85       	ldd	r25, Y+13	; 0x0d
     66e:	04 97       	sbiw	r24, 0x04	; 4
     670:	ec f1       	brlt	.+122    	; 0x6ec <decodeHashIRRecv+0xbe>
     672:	68 94       	set
     674:	aa 24       	eor	r10, r10
     676:	a2 f8       	bld	r10, 2
     678:	b1 2c       	mov	r11, r1
     67a:	06 e0       	ldi	r16, 0x06	; 6
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	0f 2e       	mov	r0, r31
     680:	f5 ec       	ldi	r31, 0xC5	; 197
     682:	cf 2e       	mov	r12, r31
     684:	fd e9       	ldi	r31, 0x9D	; 157
     686:	df 2e       	mov	r13, r31
     688:	fc e1       	ldi	r31, 0x1C	; 28
     68a:	ef 2e       	mov	r14, r31
     68c:	f1 e8       	ldi	r31, 0x81	; 129
     68e:	ff 2e       	mov	r15, r31
     690:	f0 2d       	mov	r31, r0
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
     692:	ea 85       	ldd	r30, Y+10	; 0x0a
     694:	fb 85       	ldd	r31, Y+11	; 0x0b
     696:	e0 0f       	add	r30, r16
     698:	f1 1f       	adc	r31, r17
     69a:	60 81       	ld	r22, Z
     69c:	71 81       	ldd	r23, Z+1	; 0x01
     69e:	ea 85       	ldd	r30, Y+10	; 0x0a
     6a0:	fb 85       	ldd	r31, Y+11	; 0x0b
     6a2:	c8 01       	movw	r24, r16
     6a4:	04 97       	sbiw	r24, 0x04	; 4
     6a6:	e8 0f       	add	r30, r24
     6a8:	f9 1f       	adc	r31, r25
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	0e 94 cd 02 	call	0x59a	; 0x59a <compare>
     6b2:	fc 01       	movw	r30, r24
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
     6b4:	a7 01       	movw	r20, r14
     6b6:	96 01       	movw	r18, r12
     6b8:	63 e9       	ldi	r22, 0x93	; 147
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__mulsi3>
     6c4:	6f 01       	movw	r12, r30
     6c6:	ff 0f       	add	r31, r31
     6c8:	ee 08       	sbc	r14, r14
     6ca:	ff 08       	sbc	r15, r15
     6cc:	c6 26       	eor	r12, r22
     6ce:	d7 26       	eor	r13, r23
     6d0:	e8 26       	eor	r14, r24
     6d2:	f9 26       	eor	r15, r25
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6 || irparams.rcvstate != STATE_STOP) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
     6d4:	95 01       	movw	r18, r10
     6d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     6da:	0e 5f       	subi	r16, 0xFE	; 254
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	4f ef       	ldi	r20, 0xFF	; 255
     6e0:	a4 1a       	sub	r10, r20
     6e2:	b4 0a       	sbc	r11, r20
     6e4:	28 17       	cp	r18, r24
     6e6:	39 07       	cpc	r19, r25
     6e8:	a4 f2       	brlt	.-88     	; 0x692 <decodeHashIRRecv+0x64>
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <decodeHashIRRecv+0xd2>
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f5 ec       	ldi	r31, 0xC5	; 197
     6f0:	cf 2e       	mov	r12, r31
     6f2:	fd e9       	ldi	r31, 0x9D	; 157
     6f4:	df 2e       	mov	r13, r31
     6f6:	fc e1       	ldi	r31, 0x1C	; 28
     6f8:	ef 2e       	mov	r14, r31
     6fa:	f1 e8       	ldi	r31, 0x81	; 129
     6fc:	ff 2e       	mov	r15, r31
     6fe:	f0 2d       	mov	r31, r0
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
     700:	cc 82       	std	Y+4, r12	; 0x04
     702:	dd 82       	std	Y+5, r13	; 0x05
     704:	ee 82       	std	Y+6, r14	; 0x06
     706:	ff 82       	std	Y+7, r15	; 0x07
  results->bits = 32;
     708:	80 e2       	ldi	r24, 0x20	; 32
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	99 87       	std	Y+9, r25	; 0x09
     70e:	88 87       	std	Y+8, r24	; 0x08
  results->decode_type = UNKNOWN;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	9f ef       	ldi	r25, 0xFF	; 255
     714:	99 83       	std	Y+1, r25	; 0x01
     716:	88 83       	st	Y, r24
  return DECODED;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	03 c0       	rjmp	.+6      	; 0x722 <decodeHashIRRecv+0xf4>
bool decodeHashIRRecv(volatile decode_results_t *results) {
  results->rawbuf = irparams.rawbuf;
  results->rawlen = irparams.rawlen;
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6 || irparams.rcvstate != STATE_STOP) {
    return ERR;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	01 c0       	rjmp	.+2      	; 0x722 <decodeHashIRRecv+0xf4>
     720:	80 e0       	ldi	r24, 0x00	; 0
  }
  results->value = hash;
  results->bits = 32;
  results->decode_type = UNKNOWN;
  return DECODED;
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	08 95       	ret

00000738 <resumeIRRecv>:

void resumeIRRecv() {
	irparams.rcvstate = STATE_IDLE;
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	80 93 ca 04 	sts	0x04CA, r24
	irparams.rawlen = 0;
     73e:	10 92 95 05 	sts	0x0595, r1
     742:	08 95       	ret

00000744 <enableIRRecv>:
}

// initialization
void enableIRRecv() {
	cli();
     744:	f8 94       	cli
	// setup pulse clock timer interrupt
	//Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	80 93 b0 00 	sts	0x00B0, r24
     74c:	80 93 b1 00 	sts	0x00B1, r24
     750:	92 e3       	ldi	r25, 0x32	; 50
     752:	90 93 b3 00 	sts	0x00B3, r25
     756:	10 92 b2 00 	sts	0x00B2, r1

	//Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
     75a:	17 ba       	out	0x17, r1	; 23
     75c:	80 93 70 00 	sts	0x0070, r24

	sei();  // enable interrupts
     760:	78 94       	sei

	// initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
     762:	80 93 ca 04 	sts	0x04CA, r24
	irparams.rawlen = 0;
     766:	10 92 95 05 	sts	0x0595, r1

	// set pin modes
	_IRDDR &= ~_BV(IR_RECV_PIN);
     76a:	52 98       	cbi	0x0a, 2	; 10
	
#ifdef BLINK_LED
	_LED_DDR |= _BV(BLINK_LED_PIN);
     76c:	3d 9a       	sbi	0x07, 5	; 7
	_LED_PORT |= _BV(BLINK_LED_PIN);
     76e:	45 9a       	sbi	0x08, 5	; 8
     770:	08 95       	ret

00000772 <_send_char_to_host>:
	y ^= (y >> 2);
	y ^= (y >> 4);
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
     772:	28 2f       	mov	r18, r24
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
     774:	88 23       	and	r24, r24
     776:	09 f4       	brne	.+2      	; 0x77a <_send_char_to_host+0x8>
     778:	9b c0       	rjmp	.+310    	; 0x8b0 <_send_char_to_host+0x13e>
     77a:	80 91 01 01 	lds	r24, 0x0101
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <_send_char_to_host+0x12>
     782:	97 c0       	rjmp	.+302    	; 0x8b2 <_send_char_to_host+0x140>
		return false;
	}
	while(_trans_in_progress) {}
     784:	90 91 9e 04 	lds	r25, 0x049E
     788:	91 11       	cpse	r25, r1
     78a:	fc cf       	rjmp	.-8      	; 0x784 <_send_char_to_host+0x12>
	_trans_in_progress = true;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 9e 04 	sts	0x049E, r24
	_char_to_send = c;
     792:	20 93 a0 04 	sts	0x04A0, r18
	}
	sei();
}

static uint8_t _parity(uint8_t x) {
	uint8_t y = x ^ (x >> 1);
     796:	82 2f       	mov	r24, r18
     798:	86 95       	lsr	r24
     79a:	28 27       	eor	r18, r24
	y ^= (y >> 2);
     79c:	82 2f       	mov	r24, r18
     79e:	86 95       	lsr	r24
     7a0:	86 95       	lsr	r24
     7a2:	28 27       	eor	r18, r24
	y ^= (y >> 4);
     7a4:	82 2f       	mov	r24, r18
     7a6:	82 95       	swap	r24
     7a8:	8f 70       	andi	r24, 0x0F	; 15
     7aa:	28 27       	eor	r18, r24
	return y & 1;
     7ac:	21 70       	andi	r18, 0x01	; 1
		return false;
	}
	while(_trans_in_progress) {}
	_trans_in_progress = true;
	_char_to_send = c;
	_char_to_send_parity = _parity(c);
     7ae:	20 93 9f 04 	sts	0x049F, r18
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	00 90 9b 04 	lds	r0, 0x049B
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <_send_char_to_host+0x4e>
     7bc:	22 0f       	add	r18, r18
     7be:	33 1f       	adc	r19, r19
     7c0:	0a 94       	dec	r0
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <_send_char_to_host+0x4a>
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
     7c4:	83 b1       	in	r24, 0x03	; 3
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	82 23       	and	r24, r18
     7ca:	93 23       	and	r25, r19
     7cc:	89 2b       	or	r24, r25
     7ce:	d1 f3       	breq	.-12     	; 0x7c4 <_send_char_to_host+0x52>
	ENABLE_PCINT_DATA;
	ENABLE_PCINT0S;
}

static inline void _conf_pins_output() {
	DISABLE_PCINT0S;
     7d0:	e8 e6       	ldi	r30, 0x68	; 104
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	80 83       	st	Z, r24
	DISABLE_PCINT_DATA;
     7da:	eb e6       	ldi	r30, 0x6B	; 107
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	30 81       	ld	r19, Z
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	ac 01       	movw	r20, r24
     7e6:	00 90 9a 04 	lds	r0, 0x049A
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <_send_char_to_host+0x7e>
     7ec:	44 0f       	add	r20, r20
     7ee:	55 1f       	adc	r21, r21
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <_send_char_to_host+0x7a>
     7f4:	24 2f       	mov	r18, r20
     7f6:	20 95       	com	r18
     7f8:	23 23       	and	r18, r19
     7fa:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     7fc:	30 81       	ld	r19, Z
     7fe:	ac 01       	movw	r20, r24
     800:	00 90 9b 04 	lds	r0, 0x049B
     804:	02 c0       	rjmp	.+4      	; 0x80a <_send_char_to_host+0x98>
     806:	44 0f       	add	r20, r20
     808:	55 1f       	adc	r21, r21
     80a:	0a 94       	dec	r0
     80c:	e2 f7       	brpl	.-8      	; 0x806 <_send_char_to_host+0x94>
     80e:	24 2f       	mov	r18, r20
     810:	20 95       	com	r18
     812:	23 23       	and	r18, r19
     814:	20 83       	st	Z, r18
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
     816:	34 b1       	in	r19, 0x04	; 4
     818:	bc 01       	movw	r22, r24
     81a:	00 90 9b 04 	lds	r0, 0x049B
     81e:	02 c0       	rjmp	.+4      	; 0x824 <_send_char_to_host+0xb2>
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	0a 94       	dec	r0
     826:	e2 f7       	brpl	.-8      	; 0x820 <_send_char_to_host+0xae>
     828:	ac 01       	movw	r20, r24
     82a:	00 90 9a 04 	lds	r0, 0x049A
     82e:	02 c0       	rjmp	.+4      	; 0x834 <_send_char_to_host+0xc2>
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	0a 94       	dec	r0
     836:	e2 f7       	brpl	.-8      	; 0x830 <_send_char_to_host+0xbe>
     838:	26 2f       	mov	r18, r22
     83a:	24 2b       	or	r18, r20
     83c:	23 2b       	or	r18, r19
     83e:	24 b9       	out	0x04, r18	; 4
	_char_to_send_parity = _parity(c);
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
		//wait for the clock pin to become high
	}
	_conf_pins_output();
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
     840:	35 b1       	in	r19, 0x05	; 5
     842:	ac 01       	movw	r20, r24
     844:	00 90 9a 04 	lds	r0, 0x049A
     848:	02 c0       	rjmp	.+4      	; 0x84e <_send_char_to_host+0xdc>
     84a:	44 0f       	add	r20, r20
     84c:	55 1f       	adc	r21, r21
     84e:	0a 94       	dec	r0
     850:	e2 f7       	brpl	.-8      	; 0x84a <_send_char_to_host+0xd8>
     852:	24 2f       	mov	r18, r20
     854:	20 95       	com	r18
     856:	23 23       	and	r18, r19
     858:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~_BV(_clock_pin_port_b);
     85a:	25 b1       	in	r18, 0x05	; 5
     85c:	00 90 9b 04 	lds	r0, 0x049B
     860:	02 c0       	rjmp	.+4      	; 0x866 <_send_char_to_host+0xf4>
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	0a 94       	dec	r0
     868:	e2 f7       	brpl	.-8      	; 0x862 <_send_char_to_host+0xf0>
     86a:	80 95       	com	r24
     86c:	82 23       	and	r24, r18
     86e:	85 b9       	out	0x05, r24	; 5
	_bit_index = BIT_0_INDEX;
     870:	8a e0       	ldi	r24, 0x0A	; 10
     872:	80 93 9c 04 	sts	0x049C, r24
	_clock_state = 0;
     876:	10 92 00 01 	sts	0x0100, r1
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     87a:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     87c:	85 b5       	in	r24, 0x25	; 37
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     882:	85 b5       	in	r24, 0x25	; 37
     884:	8a 7f       	andi	r24, 0xFA	; 250
     886:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     888:	84 b5       	in	r24, 0x24	; 36
     88a:	82 60       	ori	r24, 0x02	; 2
     88c:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     88e:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     890:	ee e6       	ldi	r30, 0x6E	; 110
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     89a:	88 e2       	ldi	r24, 0x28	; 40
     89c:	87 bd       	out	0x27, r24	; 39
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
	PORTB &= ~_BV(_clock_pin_port_b);
	_bit_index = BIT_0_INDEX;
	_clock_state = 0;
	_enable_timer0();
	while(_trans_in_progress) {
     89e:	80 91 9e 04 	lds	r24, 0x049E
     8a2:	81 11       	cpse	r24, r1
     8a4:	fc cf       	rjmp	.-8      	; 0x89e <_send_char_to_host+0x12c>
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
     8a6:	80 91 9d 04 	lds	r24, 0x049D
	_trans_interrupted = false;
     8aa:	10 92 9d 04 	sts	0x049D, r1
	return x;
     8ae:	08 95       	ret
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
		return false;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}
     8b2:	08 95       	ret

000008b4 <_reset_state>:
	_send_buf_len=0;
	sei();
}

static void _reset_state() {
	cli();
     8b4:	f8 94       	cli
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     8b6:	a8 e6       	ldi	r26, 0x68	; 104
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	8c 91       	ld	r24, X
     8bc:	8e 7f       	andi	r24, 0xFE	; 254
     8be:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     8c0:	eb e6       	ldi	r30, 0x6B	; 107
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	30 81       	ld	r19, Z
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	ac 01       	movw	r20, r24
     8cc:	00 90 9a 04 	lds	r0, 0x049A
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <_reset_state+0x22>
     8d2:	44 0f       	add	r20, r20
     8d4:	55 1f       	adc	r21, r21
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <_reset_state+0x1e>
     8da:	24 2f       	mov	r18, r20
     8dc:	20 95       	com	r18
     8de:	23 23       	and	r18, r19
     8e0:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     8e2:	30 81       	ld	r19, Z
     8e4:	ac 01       	movw	r20, r24
     8e6:	00 90 9b 04 	lds	r0, 0x049B
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <_reset_state+0x3c>
     8ec:	44 0f       	add	r20, r20
     8ee:	55 1f       	adc	r21, r21
     8f0:	0a 94       	dec	r0
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <_reset_state+0x38>
     8f4:	24 2f       	mov	r18, r20
     8f6:	20 95       	com	r18
     8f8:	23 23       	and	r18, r19
     8fa:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     8fc:	44 b1       	in	r20, 0x04	; 4
     8fe:	bc 01       	movw	r22, r24
     900:	00 90 9a 04 	lds	r0, 0x049A
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
     906:	66 0f       	add	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0x7>
     90e:	9c 01       	movw	r18, r24
     910:	00 90 9b 04 	lds	r0, 0x049B
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0x17>
     91e:	26 2b       	or	r18, r22
     920:	20 95       	com	r18
     922:	24 23       	and	r18, r20
     924:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     926:	35 b1       	in	r19, 0x05	; 5
     928:	bc 01       	movw	r22, r24
     92a:	00 90 9b 04 	lds	r0, 0x049B
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
     930:	66 0f       	add	r22, r22
     932:	77 1f       	adc	r23, r23
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0x31>
     938:	ac 01       	movw	r20, r24
     93a:	00 90 9a 04 	lds	r0, 0x049A
     93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
     940:	44 0f       	add	r20, r20
     942:	55 1f       	adc	r21, r21
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0x41>
     948:	26 2f       	mov	r18, r22
     94a:	24 2b       	or	r18, r20
     94c:	23 2b       	or	r18, r19
     94e:	25 b9       	out	0x05, r18	; 5
	_NOP();
     950:	00 00       	nop
	ENABLE_PCINT_CLK;
     952:	40 81       	ld	r20, Z
     954:	9c 01       	movw	r18, r24
     956:	00 90 9b 04 	lds	r0, 0x049B
     95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	0a 94       	dec	r0
     962:	e2 f7       	brpl	.-8      	; 0x95c <__stack+0x5d>
     964:	24 2b       	or	r18, r20
     966:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     968:	20 81       	ld	r18, Z
     96a:	00 90 9a 04 	lds	r0, 0x049A
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	0a 94       	dec	r0
     976:	e2 f7       	brpl	.-8      	; 0x970 <__stack+0x71>
     978:	82 2b       	or	r24, r18
     97a:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     97c:	8c 91       	ld	r24, X
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	8c 93       	st	X, r24
}

static void _reset_state() {
	cli();
	_conf_pins_input();
	_ps2dev_enabled = true;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 01 01 	sts	0x0101, r24
	_recv_buf_overflow=false;
     988:	10 92 a7 04 	sts	0x04A7, r1
	_rcvd_char = 0;
     98c:	10 92 a2 04 	sts	0x04A2, r1
	_rcvd_char_parity = 0;
     990:	10 92 a1 04 	sts	0x04A1, r1
	_char_to_send = 0;
     994:	10 92 a0 04 	sts	0x04A0, r1
	_char_to_send_parity = 0;
     998:	10 92 9f 04 	sts	0x049F, r1
	_trans_in_progress = false;
     99c:	10 92 9e 04 	sts	0x049E, r1
	_recv_in_progress = false;
     9a0:	10 92 98 04 	sts	0x0498, r1
	_host_req_dev_rcv = false;
     9a4:	10 92 99 04 	sts	0x0499, r1
	_clock_state = 1;
     9a8:	80 93 00 01 	sts	0x0100, r24
	_bit_index = BIT_ACK_INDEX;
     9ac:	10 92 9c 04 	sts	0x049C, r1
	_next_byte_led = false;
     9b0:	10 92 a3 04 	sts	0x04A3, r1
	_next_byte_typematic_rate = false;
     9b4:	10 92 a4 04 	sts	0x04A4, r1
		_bit_index--;
	}
}

static void _clear_rcv_buf() {
	cli();
     9b8:	f8 94       	cli
	_recv_buf_head=0;
     9ba:	10 92 a9 04 	sts	0x04A9, r1
	_recv_buf_len=0;
     9be:	10 92 a8 04 	sts	0x04A8, r1
	sei();
     9c2:	78 94       	sei
}

static void _clear_send_buf() {
	cli();
     9c4:	f8 94       	cli
	_send_buf_head=0;
     9c6:	10 92 a6 04 	sts	0x04A6, r1
	_send_buf_len=0;
     9ca:	10 92 a5 04 	sts	0x04A5, r1
	sei();
     9ce:	78 94       	sei
	_bit_index = BIT_ACK_INDEX;
	_next_byte_led = false;
	_next_byte_typematic_rate = false;
	_clear_rcv_buf();
	_clear_send_buf();
	sei();
     9d0:	78 94       	sei
	_send_char_to_host(PS2DEVICE_BAT_OK);
     9d2:	8a ea       	ldi	r24, 0xAA	; 170
     9d4:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
     9d8:	08 95       	ret

000009da <__vector_3>:
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}

ISR(PCINT0_vect) {
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t p = PINB; // save the value of the interrupt source pins
     9fe:	83 b1       	in	r24, 0x03	; 3
     a00:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b)) {
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	20 91 9b 04 	lds	r18, 0x049B
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 2e       	mov	r0, r18
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__vector_3+0x38>
     a0e:	95 95       	asr	r25
     a10:	87 95       	ror	r24
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <__vector_3+0x34>
     a16:	80 fd       	sbrc	r24, 0
     a18:	0f c0       	rjmp	.+30     	; 0xa38 <__vector_3+0x5e>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	00 90 9a 04 	lds	r0, 0x049A
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <__vector_3+0x4e>
     a24:	95 95       	asr	r25
     a26:	87 95       	ror	r24
     a28:	0a 94       	dec	r0
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <__vector_3+0x4a>
     a2c:	80 fd       	sbrc	r24, 0
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__vector_3+0x5e>
		_host_req_dev_rcv = 1; // get ready for the action
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 99 04 	sts	0x0499, r24
     a36:	5d c0       	rjmp	.+186    	; 0xaf2 <__vector_3+0x118>
	} else if (bit_is_set(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b) && _host_req_dev_rcv && !_recv_in_progress) {
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__vector_3+0x68>
     a3e:	95 95       	asr	r25
     a40:	87 95       	ror	r24
     a42:	2a 95       	dec	r18
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <__vector_3+0x64>
     a46:	80 ff       	sbrs	r24, 0
     a48:	52 c0       	rjmp	.+164    	; 0xaee <__vector_3+0x114>
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	00 90 9a 04 	lds	r0, 0x049A
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <__vector_3+0x7e>
     a54:	95 95       	asr	r25
     a56:	87 95       	ror	r24
     a58:	0a 94       	dec	r0
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <__vector_3+0x7a>
     a5c:	80 fd       	sbrc	r24, 0
     a5e:	47 c0       	rjmp	.+142    	; 0xaee <__vector_3+0x114>
     a60:	80 91 99 04 	lds	r24, 0x0499
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <__vector_3+0x90>
     a68:	42 c0       	rjmp	.+132    	; 0xaee <__vector_3+0x114>
     a6a:	80 91 98 04 	lds	r24, 0x0498
     a6e:	81 11       	cpse	r24, r1
     a70:	3e c0       	rjmp	.+124    	; 0xaee <__vector_3+0x114>
		DISABLE_PCINT0S;
     a72:	e8 e6       	ldi	r30, 0x68	; 104
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	80 83       	st	Z, r24
		DISABLE_PCINT_DATA;
     a7c:	eb e6       	ldi	r30, 0x6B	; 107
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	30 81       	ld	r19, Z
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	ac 01       	movw	r20, r24
     a88:	00 90 9a 04 	lds	r0, 0x049A
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <__vector_3+0xb8>
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <__vector_3+0xb4>
     a96:	24 2f       	mov	r18, r20
     a98:	20 95       	com	r18
     a9a:	23 23       	and	r18, r19
     a9c:	20 83       	st	Z, r18
		DISABLE_PCINT_CLK;
     a9e:	20 81       	ld	r18, Z
     aa0:	00 90 9b 04 	lds	r0, 0x049B
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__vector_3+0xd0>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <__vector_3+0xcc>
     aae:	80 95       	com	r24
     ab0:	82 23       	and	r24, r18
     ab2:	80 83       	st	Z, r24
		_clock_state = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 00 01 	sts	0x0100, r24
		_bit_index = BIT_0_INDEX;
     aba:	9a e0       	ldi	r25, 0x0A	; 10
     abc:	90 93 9c 04 	sts	0x049C, r25
		_host_req_dev_rcv = 0;
     ac0:	10 92 99 04 	sts	0x0499, r1
		_recv_in_progress = 1;
     ac4:	80 93 98 04 	sts	0x0498, r24
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     ac8:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     aca:	85 b5       	in	r24, 0x25	; 37
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     ad0:	85 b5       	in	r24, 0x25	; 37
     ad2:	8a 7f       	andi	r24, 0xFA	; 250
     ad4:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     ad6:	84 b5       	in	r24, 0x24	; 36
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     adc:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     ade:	ee e6       	ldi	r30, 0x6E	; 110
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     ae8:	88 e2       	ldi	r24, 0x28	; 40
     aea:	87 bd       	out	0x27, r24	; 39
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__vector_3+0x118>
		_host_req_dev_rcv = 0;
		_recv_in_progress = 1;
		_enable_timer0();
	} else {
		// reset the state
		_host_req_dev_rcv = 0;
     aee:	10 92 99 04 	sts	0x0499, r1
	}
}
     af2:	0f 90       	pop	r0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_14>:

ISR(TIMER0_COMPA_vect) {
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	ef 93       	push	r30
     b36:	ff 93       	push	r31
	if (_clock_state) {
     b38:	80 91 00 01 	lds	r24, 0x0100
     b3c:	88 23       	and	r24, r24
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__vector_14+0x30>
     b40:	e6 c1       	rjmp	.+972    	; 0xf0e <__vector_14+0x3fc>
		if (bit_is_set(PINB,_clock_pin_port_b)) {
     b42:	83 b1       	in	r24, 0x03	; 3
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	00 90 9b 04 	lds	r0, 0x049B
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__vector_14+0x3e>
     b4c:	95 95       	asr	r25
     b4e:	87 95       	ror	r24
     b50:	0a 94       	dec	r0
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <__vector_14+0x3a>
     b54:	80 ff       	sbrs	r24, 0
     b56:	66 c1       	rjmp	.+716    	; 0xe24 <__vector_14+0x312>
			if (_recv_in_progress) {
     b58:	80 91 98 04 	lds	r24, 0x0498
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <__vector_14+0x50>
     b60:	cb c0       	rjmp	.+406    	; 0xcf8 <__vector_14+0x1e6>
				if (_bit_index == BIT_ACK_INDEX) {
     b62:	90 91 9c 04 	lds	r25, 0x049C
     b66:	91 11       	cpse	r25, r1
     b68:	18 c0       	rjmp	.+48     	; 0xb9a <__vector_14+0x88>
					DDRB |= _BV(_data_pin_port_b); //switch data to output
     b6a:	94 b1       	in	r25, 0x04	; 4
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	a9 01       	movw	r20, r18
     b72:	00 90 9a 04 	lds	r0, 0x049A
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <__vector_14+0x6a>
     b78:	44 0f       	add	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	0a 94       	dec	r0
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <__vector_14+0x66>
     b80:	49 2b       	or	r20, r25
     b82:	44 b9       	out	0x04, r20	; 4
					PORTB &= ~_BV(_data_pin_port_b); //set to LOW - this is the ACK bit
     b84:	95 b1       	in	r25, 0x05	; 5
     b86:	00 90 9a 04 	lds	r0, 0x049A
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__vector_14+0x7e>
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <__vector_14+0x7a>
     b94:	20 95       	com	r18
     b96:	29 23       	and	r18, r25
     b98:	25 b9       	out	0x05, r18	; 5
				}
				if (_bit_index <0) {
     b9a:	90 91 9c 04 	lds	r25, 0x049C
     b9e:	99 23       	and	r25, r25
     ba0:	0c f0       	brlt	.+2      	; 0xba4 <__vector_14+0x92>
     ba2:	90 c0       	rjmp	.+288    	; 0xcc4 <__vector_14+0x1b2>
					_host_req_dev_rcv = 0;
     ba4:	10 92 99 04 	sts	0x0499, r1
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     ba8:	95 b5       	in	r25, 0x25	; 37
     baa:	98 7f       	andi	r25, 0xF8	; 248
     bac:	95 bd       	out	0x25, r25	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     bae:	ee e6       	ldi	r30, 0x6E	; 110
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	90 81       	ld	r25, Z
     bb4:	9d 7f       	andi	r25, 0xFD	; 253
     bb6:	90 83       	st	Z, r25
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     bb8:	a8 e6       	ldi	r26, 0x68	; 104
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	9c 91       	ld	r25, X
     bbe:	9e 7f       	andi	r25, 0xFE	; 254
     bc0:	9c 93       	st	X, r25
	DISABLE_PCINT_DATA;
     bc2:	eb e6       	ldi	r30, 0x6B	; 107
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	40 81       	ld	r20, Z
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	b9 01       	movw	r22, r18
     bce:	00 90 9a 04 	lds	r0, 0x049A
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <__vector_14+0xc6>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <__vector_14+0xc2>
     bdc:	96 2f       	mov	r25, r22
     bde:	90 95       	com	r25
     be0:	94 23       	and	r25, r20
     be2:	90 83       	st	Z, r25
	DISABLE_PCINT_CLK;
     be4:	40 81       	ld	r20, Z
     be6:	b9 01       	movw	r22, r18
     be8:	00 90 9b 04 	lds	r0, 0x049B
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__vector_14+0xe0>
     bee:	66 0f       	add	r22, r22
     bf0:	77 1f       	adc	r23, r23
     bf2:	0a 94       	dec	r0
     bf4:	e2 f7       	brpl	.-8      	; 0xbee <__vector_14+0xdc>
     bf6:	96 2f       	mov	r25, r22
     bf8:	90 95       	com	r25
     bfa:	94 23       	and	r25, r20
     bfc:	90 83       	st	Z, r25
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     bfe:	94 b1       	in	r25, 0x04	; 4
     c00:	b9 01       	movw	r22, r18
     c02:	00 90 9a 04 	lds	r0, 0x049A
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <__vector_14+0xfa>
     c08:	66 0f       	add	r22, r22
     c0a:	77 1f       	adc	r23, r23
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <__vector_14+0xf6>
     c10:	a9 01       	movw	r20, r18
     c12:	00 90 9b 04 	lds	r0, 0x049B
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__vector_14+0x10a>
     c18:	44 0f       	add	r20, r20
     c1a:	55 1f       	adc	r21, r21
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <__vector_14+0x106>
     c20:	46 2b       	or	r20, r22
     c22:	40 95       	com	r20
     c24:	49 23       	and	r20, r25
     c26:	44 b9       	out	0x04, r20	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     c28:	45 b1       	in	r20, 0x05	; 5
     c2a:	e9 01       	movw	r28, r18
     c2c:	00 90 9b 04 	lds	r0, 0x049B
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__vector_14+0x124>
     c32:	cc 0f       	add	r28, r28
     c34:	dd 1f       	adc	r29, r29
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <__vector_14+0x120>
     c3a:	b9 01       	movw	r22, r18
     c3c:	00 90 9a 04 	lds	r0, 0x049A
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <__vector_14+0x134>
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <__vector_14+0x130>
     c4a:	9c 2f       	mov	r25, r28
     c4c:	96 2b       	or	r25, r22
     c4e:	94 2b       	or	r25, r20
     c50:	95 b9       	out	0x05, r25	; 5
	_NOP();
     c52:	00 00       	nop
	ENABLE_PCINT_CLK;
     c54:	90 81       	ld	r25, Z
     c56:	a9 01       	movw	r20, r18
     c58:	00 90 9b 04 	lds	r0, 0x049B
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <__vector_14+0x150>
     c5e:	44 0f       	add	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <__vector_14+0x14c>
     c66:	49 2b       	or	r20, r25
     c68:	40 83       	st	Z, r20
	ENABLE_PCINT_DATA;
     c6a:	90 81       	ld	r25, Z
     c6c:	00 90 9a 04 	lds	r0, 0x049A
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <__vector_14+0x164>
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <__vector_14+0x160>
     c7a:	29 2b       	or	r18, r25
     c7c:	20 83       	st	Z, r18
	ENABLE_PCINT0S;
     c7e:	9c 91       	ld	r25, X
     c80:	91 60       	ori	r25, 0x01	; 1
     c82:	9c 93       	st	X, r25
				}
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
     c84:	10 92 98 04 	sts	0x0498, r1
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     c88:	20 91 a2 04 	lds	r18, 0x04A2
}

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
     c8c:	90 91 a8 04 	lds	r25, 0x04A8
     c90:	90 31       	cpi	r25, 0x10	; 16
     c92:	90 f4       	brcc	.+36     	; 0xcb8 <__vector_14+0x1a6>
		return false;
	uint8_t i = _recv_buf_head + _recv_buf_len;
     c94:	90 91 a9 04 	lds	r25, 0x04A9
     c98:	e0 91 a8 04 	lds	r30, 0x04A8
     c9c:	e9 0f       	add	r30, r25
	if (i >= RCV_BUF_SIZE)
     c9e:	e0 31       	cpi	r30, 0x10	; 16
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <__vector_14+0x192>
		i -= RCV_BUF_SIZE;
     ca2:	e0 51       	subi	r30, 0x10	; 16
	_recv_buf[i] = c;
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	e6 54       	subi	r30, 0x46	; 70
     ca8:	fb 4f       	sbci	r31, 0xFB	; 251
     caa:	20 83       	st	Z, r18
	_recv_buf_len++;
     cac:	90 91 a8 04 	lds	r25, 0x04A8
     cb0:	9f 5f       	subi	r25, 0xFF	; 255
     cb2:	90 93 a8 04 	sts	0x04A8, r25
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <__vector_14+0x1a8>

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
		return false;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	89 27       	eor	r24, r25
     cbe:	80 93 a7 04 	sts	0x04A7, r24
     cc2:	1a c0       	rjmp	.+52     	; 0xcf8 <__vector_14+0x1e6>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     cc4:	10 92 00 01 	sts	0x0100, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     cc8:	44 b1       	in	r20, 0x04	; 4
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 01       	movw	r18, r24
     cd0:	00 90 9b 04 	lds	r0, 0x049B
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <__vector_14+0x1c8>
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <__vector_14+0x1c4>
     cde:	24 2b       	or	r18, r20
     ce0:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     ce2:	25 b1       	in	r18, 0x05	; 5
     ce4:	00 90 9b 04 	lds	r0, 0x049B
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <__vector_14+0x1dc>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <__vector_14+0x1d8>
     cf2:	80 95       	com	r24
     cf4:	82 23       	and	r24, r18
     cf6:	85 b9       	out	0x05, r24	; 5
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
				} else {
					_conf_clock_out_low(); // don't bring the clock line low after everything has been received!
				}
			}
			if (_trans_in_progress) {
     cf8:	80 91 9e 04 	lds	r24, 0x049E
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <__vector_14+0x1f0>
     d00:	06 c2       	rjmp	.+1036   	; 0x110e <__vector_14+0x5fc>
				if (_bit_index < 0) {
     d02:	80 91 9c 04 	lds	r24, 0x049C
     d06:	88 23       	and	r24, r24
     d08:	0c f0       	brlt	.+2      	; 0xd0c <__vector_14+0x1fa>
     d0a:	71 c0       	rjmp	.+226    	; 0xdee <__vector_14+0x2dc>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     d0c:	85 b5       	in	r24, 0x25	; 37
     d0e:	88 7f       	andi	r24, 0xF8	; 248
     d10:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     d12:	ee e6       	ldi	r30, 0x6E	; 110
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8d 7f       	andi	r24, 0xFD	; 253
     d1a:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     d1c:	a8 e6       	ldi	r26, 0x68	; 104
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	8c 91       	ld	r24, X
     d22:	8e 7f       	andi	r24, 0xFE	; 254
     d24:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     d26:	eb e6       	ldi	r30, 0x6B	; 107
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	30 81       	ld	r19, Z
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	ac 01       	movw	r20, r24
     d32:	00 90 9a 04 	lds	r0, 0x049A
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <__vector_14+0x22a>
     d38:	44 0f       	add	r20, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <__vector_14+0x226>
     d40:	24 2f       	mov	r18, r20
     d42:	20 95       	com	r18
     d44:	23 23       	and	r18, r19
     d46:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     d48:	30 81       	ld	r19, Z
     d4a:	ac 01       	movw	r20, r24
     d4c:	00 90 9b 04 	lds	r0, 0x049B
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <__vector_14+0x244>
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <__vector_14+0x240>
     d5a:	24 2f       	mov	r18, r20
     d5c:	20 95       	com	r18
     d5e:	23 23       	and	r18, r19
     d60:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     d62:	44 b1       	in	r20, 0x04	; 4
     d64:	bc 01       	movw	r22, r24
     d66:	00 90 9a 04 	lds	r0, 0x049A
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <__vector_14+0x25e>
     d6c:	66 0f       	add	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <__vector_14+0x25a>
     d74:	9c 01       	movw	r18, r24
     d76:	00 90 9b 04 	lds	r0, 0x049B
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <__vector_14+0x26e>
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <__vector_14+0x26a>
     d84:	26 2b       	or	r18, r22
     d86:	20 95       	com	r18
     d88:	24 23       	and	r18, r20
     d8a:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     d8c:	35 b1       	in	r19, 0x05	; 5
     d8e:	bc 01       	movw	r22, r24
     d90:	00 90 9b 04 	lds	r0, 0x049B
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <__vector_14+0x288>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <__vector_14+0x284>
     d9e:	ac 01       	movw	r20, r24
     da0:	00 90 9a 04 	lds	r0, 0x049A
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <__vector_14+0x298>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <__vector_14+0x294>
     dae:	26 2f       	mov	r18, r22
     db0:	24 2b       	or	r18, r20
     db2:	23 2b       	or	r18, r19
     db4:	25 b9       	out	0x05, r18	; 5
	_NOP();
     db6:	00 00       	nop
	ENABLE_PCINT_CLK;
     db8:	40 81       	ld	r20, Z
     dba:	9c 01       	movw	r18, r24
     dbc:	00 90 9b 04 	lds	r0, 0x049B
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <__vector_14+0x2b4>
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <__vector_14+0x2b0>
     dca:	24 2b       	or	r18, r20
     dcc:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     dce:	20 81       	ld	r18, Z
     dd0:	00 90 9a 04 	lds	r0, 0x049A
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <__vector_14+0x2c8>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <__vector_14+0x2c4>
     dde:	82 2b       	or	r24, r18
     de0:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     de2:	8c 91       	ld	r24, X
     de4:	81 60       	ori	r24, 0x01	; 1
     de6:	8c 93       	st	X, r24
			}
			if (_trans_in_progress) {
				if (_bit_index < 0) {
					_disable_timer0();
					_conf_pins_input();
					_trans_in_progress = 0;
     de8:	10 92 9e 04 	sts	0x049E, r1
     dec:	90 c1       	rjmp	.+800    	; 0x110e <__vector_14+0x5fc>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     dee:	10 92 00 01 	sts	0x0100, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     df2:	44 b1       	in	r20, 0x04	; 4
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9c 01       	movw	r18, r24
     dfa:	00 90 9b 04 	lds	r0, 0x049B
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <__vector_14+0x2f2>
     e00:	22 0f       	add	r18, r18
     e02:	33 1f       	adc	r19, r19
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <__vector_14+0x2ee>
     e08:	24 2b       	or	r18, r20
     e0a:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     e0c:	25 b1       	in	r18, 0x05	; 5
     e0e:	00 90 9b 04 	lds	r0, 0x049B
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__vector_14+0x306>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <__vector_14+0x302>
     e1c:	80 95       	com	r24
     e1e:	82 23       	and	r24, r18
     e20:	85 b9       	out	0x05, r24	; 5
     e22:	75 c1       	rjmp	.+746    	; 0x110e <__vector_14+0x5fc>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     e24:	85 b5       	in	r24, 0x25	; 37
     e26:	88 7f       	andi	r24, 0xF8	; 248
     e28:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     e2a:	ee e6       	ldi	r30, 0x6E	; 110
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8d 7f       	andi	r24, 0xFD	; 253
     e32:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     e34:	a8 e6       	ldi	r26, 0x68	; 104
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	8c 91       	ld	r24, X
     e3a:	8e 7f       	andi	r24, 0xFE	; 254
     e3c:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     e3e:	eb e6       	ldi	r30, 0x6B	; 107
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	30 81       	ld	r19, Z
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	ac 01       	movw	r20, r24
     e4a:	00 90 9a 04 	lds	r0, 0x049A
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <__vector_14+0x342>
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <__vector_14+0x33e>
     e58:	24 2f       	mov	r18, r20
     e5a:	20 95       	com	r18
     e5c:	23 23       	and	r18, r19
     e5e:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     e60:	30 81       	ld	r19, Z
     e62:	ac 01       	movw	r20, r24
     e64:	00 90 9b 04 	lds	r0, 0x049B
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <__vector_14+0x35c>
     e6a:	44 0f       	add	r20, r20
     e6c:	55 1f       	adc	r21, r21
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <__vector_14+0x358>
     e72:	24 2f       	mov	r18, r20
     e74:	20 95       	com	r18
     e76:	23 23       	and	r18, r19
     e78:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     e7a:	44 b1       	in	r20, 0x04	; 4
     e7c:	bc 01       	movw	r22, r24
     e7e:	00 90 9a 04 	lds	r0, 0x049A
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__vector_14+0x376>
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <__vector_14+0x372>
     e8c:	9c 01       	movw	r18, r24
     e8e:	00 90 9b 04 	lds	r0, 0x049B
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <__vector_14+0x386>
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <__vector_14+0x382>
     e9c:	26 2b       	or	r18, r22
     e9e:	20 95       	com	r18
     ea0:	24 23       	and	r18, r20
     ea2:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     ea4:	35 b1       	in	r19, 0x05	; 5
     ea6:	bc 01       	movw	r22, r24
     ea8:	00 90 9b 04 	lds	r0, 0x049B
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <__vector_14+0x3a0>
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <__vector_14+0x39c>
     eb6:	ac 01       	movw	r20, r24
     eb8:	00 90 9a 04 	lds	r0, 0x049A
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <__vector_14+0x3b0>
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <__vector_14+0x3ac>
     ec6:	26 2f       	mov	r18, r22
     ec8:	24 2b       	or	r18, r20
     eca:	23 2b       	or	r18, r19
     ecc:	25 b9       	out	0x05, r18	; 5
	_NOP();
     ece:	00 00       	nop
	ENABLE_PCINT_CLK;
     ed0:	40 81       	ld	r20, Z
     ed2:	9c 01       	movw	r18, r24
     ed4:	00 90 9b 04 	lds	r0, 0x049B
     ed8:	02 c0       	rjmp	.+4      	; 0xede <__vector_14+0x3cc>
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <__vector_14+0x3c8>
     ee2:	24 2b       	or	r18, r20
     ee4:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     ee6:	20 81       	ld	r18, Z
     ee8:	00 90 9a 04 	lds	r0, 0x049A
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <__vector_14+0x3e0>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <__vector_14+0x3dc>
     ef6:	82 2b       	or	r24, r18
     ef8:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     efa:	8c 91       	ld	r24, X
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	8c 93       	st	X, r24
			}
		} else {
			// host has pulled clock low -> bail out and get ready to receive something
			_disable_timer0();
			_conf_pins_input();
			_trans_in_progress = 0;
     f00:	10 92 9e 04 	sts	0x049E, r1
			_recv_in_progress = 0;
     f04:	10 92 98 04 	sts	0x0498, r1
			_host_req_dev_rcv = 0;
     f08:	10 92 99 04 	sts	0x0499, r1
     f0c:	00 c1       	rjmp	.+512    	; 0x110e <__vector_14+0x5fc>
		}
	} else {
		// we're just after the rising edge of the clock -> do something
		if (_recv_in_progress) {
     f0e:	80 91 98 04 	lds	r24, 0x0498
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <__vector_14+0x406>
     f16:	79 c0       	rjmp	.+242    	; 0x100a <__vector_14+0x4f8>
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
     f18:	83 b1       	in	r24, 0x03	; 3
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	00 90 9a 04 	lds	r0, 0x049A
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <__vector_14+0x414>
     f22:	95 95       	asr	r25
     f24:	87 95       	ror	r24
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <__vector_14+0x410>
     f2a:	81 70       	andi	r24, 0x01	; 1
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	90 93 00 01 	sts	0x0100, r25
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
     f32:	44 b1       	in	r20, 0x04	; 4
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	b9 01       	movw	r22, r18
     f3a:	00 90 9b 04 	lds	r0, 0x049B
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__vector_14+0x432>
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <__vector_14+0x42e>
     f48:	96 2f       	mov	r25, r22
     f4a:	90 95       	com	r25
     f4c:	94 23       	and	r25, r20
     f4e:	94 b9       	out	0x04, r25	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
     f50:	95 b1       	in	r25, 0x05	; 5
     f52:	00 90 9b 04 	lds	r0, 0x049B
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <__vector_14+0x44a>
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <__vector_14+0x446>
     f60:	29 2b       	or	r18, r25
     f62:	25 b9       	out	0x05, r18	; 5
	_NOP();
     f64:	00 00       	nop
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
			// set clock HIGH
			_conf_clock_input_high();
			// we receive something from the host
			switch (_bit_index) {
     f66:	e0 91 9c 04 	lds	r30, 0x049C
     f6a:	4e 2f       	mov	r20, r30
     f6c:	ee 0f       	add	r30, r30
     f6e:	55 0b       	sbc	r21, r21
     f70:	66 0b       	sbc	r22, r22
     f72:	77 0b       	sbc	r23, r23
     f74:	fa 01       	movw	r30, r20
     f76:	32 97       	sbiw	r30, 0x02	; 2
     f78:	e9 30       	cpi	r30, 0x09	; 9
     f7a:	f1 05       	cpc	r31, r1
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <__vector_14+0x46e>
     f7e:	45 c0       	rjmp	.+138    	; 0x100a <__vector_14+0x4f8>
     f80:	ec 5c       	subi	r30, 0xCC	; 204
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__tablejump2__>
				case BIT_0_INDEX:
					_rcvd_char = data_pin_val;
     f88:	80 93 a2 04 	sts	0x04A2, r24
					break;
     f8c:	3e c0       	rjmp	.+124    	; 0x100a <__vector_14+0x4f8>
				case BIT_1_INDEX:
					_rcvd_char |= (data_pin_val << 1);
     f8e:	90 91 a2 04 	lds	r25, 0x04A2
     f92:	88 0f       	add	r24, r24
     f94:	89 2b       	or	r24, r25
     f96:	80 93 a2 04 	sts	0x04A2, r24
					break;
     f9a:	37 c0       	rjmp	.+110    	; 0x100a <__vector_14+0x4f8>
				case BIT_2_INDEX:
					_rcvd_char |= (data_pin_val << 2);
     f9c:	90 91 a2 04 	lds	r25, 0x04A2
     fa0:	88 0f       	add	r24, r24
     fa2:	88 0f       	add	r24, r24
     fa4:	89 2b       	or	r24, r25
     fa6:	80 93 a2 04 	sts	0x04A2, r24
					break;
     faa:	2f c0       	rjmp	.+94     	; 0x100a <__vector_14+0x4f8>
				case BIT_3_INDEX:
					_rcvd_char |= (data_pin_val << 3);
     fac:	90 91 a2 04 	lds	r25, 0x04A2
     fb0:	88 0f       	add	r24, r24
     fb2:	88 0f       	add	r24, r24
     fb4:	88 0f       	add	r24, r24
     fb6:	89 2b       	or	r24, r25
     fb8:	80 93 a2 04 	sts	0x04A2, r24
					break;
     fbc:	26 c0       	rjmp	.+76     	; 0x100a <__vector_14+0x4f8>
				case BIT_4_INDEX:
					_rcvd_char |= (data_pin_val << 4);
     fbe:	90 91 a2 04 	lds	r25, 0x04A2
     fc2:	82 95       	swap	r24
     fc4:	80 7f       	andi	r24, 0xF0	; 240
     fc6:	89 2b       	or	r24, r25
     fc8:	80 93 a2 04 	sts	0x04A2, r24
					break;
     fcc:	1e c0       	rjmp	.+60     	; 0x100a <__vector_14+0x4f8>
				case BIT_5_INDEX:
					_rcvd_char |= (data_pin_val << 5);
     fce:	90 91 a2 04 	lds	r25, 0x04A2
     fd2:	82 95       	swap	r24
     fd4:	88 0f       	add	r24, r24
     fd6:	80 7e       	andi	r24, 0xE0	; 224
     fd8:	89 2b       	or	r24, r25
     fda:	80 93 a2 04 	sts	0x04A2, r24
					break;
     fde:	15 c0       	rjmp	.+42     	; 0x100a <__vector_14+0x4f8>
				case BIT_6_INDEX:
					_rcvd_char |= (data_pin_val << 6);
     fe0:	90 91 a2 04 	lds	r25, 0x04A2
     fe4:	82 95       	swap	r24
     fe6:	88 0f       	add	r24, r24
     fe8:	88 0f       	add	r24, r24
     fea:	80 7c       	andi	r24, 0xC0	; 192
     fec:	89 2b       	or	r24, r25
     fee:	80 93 a2 04 	sts	0x04A2, r24
					break;
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <__vector_14+0x4f8>
				case BIT_7_INDEX:
					_rcvd_char |= (data_pin_val << 7);
     ff4:	90 91 a2 04 	lds	r25, 0x04A2
     ff8:	87 95       	ror	r24
     ffa:	88 27       	eor	r24, r24
     ffc:	87 95       	ror	r24
     ffe:	89 2b       	or	r24, r25
    1000:	80 93 a2 04 	sts	0x04A2, r24
					break;
    1004:	02 c0       	rjmp	.+4      	; 0x100a <__vector_14+0x4f8>
				case BIT_PARITY_INDEX:
					_rcvd_char_parity = data_pin_val;
    1006:	80 93 a1 04 	sts	0x04A1, r24
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		if (_trans_in_progress) {
    100a:	80 91 9e 04 	lds	r24, 0x049E
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <__vector_14+0x502>
    1012:	78 c0       	rjmp	.+240    	; 0x1104 <__vector_14+0x5f2>
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 00 01 	sts	0x0100, r24
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
    101a:	34 b1       	in	r19, 0x04	; 4
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	ac 01       	movw	r20, r24
    1022:	00 90 9b 04 	lds	r0, 0x049B
    1026:	02 c0       	rjmp	.+4      	; 0x102c <__vector_14+0x51a>
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <__vector_14+0x516>
    1030:	24 2f       	mov	r18, r20
    1032:	20 95       	com	r18
    1034:	23 23       	and	r18, r19
    1036:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
    1038:	25 b1       	in	r18, 0x05	; 5
    103a:	00 90 9b 04 	lds	r0, 0x049B
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <__vector_14+0x532>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <__vector_14+0x52e>
    1048:	82 2b       	or	r24, r18
    104a:	85 b9       	out	0x05, r24	; 5
	_NOP();
    104c:	00 00       	nop
			}
		}
		if (_trans_in_progress) {
			_conf_clock_input_high();
			// we send something to the host
			switch (_bit_index) {
    104e:	80 91 9c 04 	lds	r24, 0x049C
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	61 f1       	breq	.+88     	; 0x10ae <__vector_14+0x59c>
    1056:	24 f4       	brge	.+8      	; 0x1060 <__vector_14+0x54e>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f4       	brne	.+2      	; 0x105e <__vector_14+0x54c>
    105c:	47 c0       	rjmp	.+142    	; 0x10ec <__vector_14+0x5da>
    105e:	52 c0       	rjmp	.+164    	; 0x1104 <__vector_14+0x5f2>
    1060:	8b 30       	cpi	r24, 0x0B	; 11
    1062:	0c f0       	brlt	.+2      	; 0x1066 <__vector_14+0x554>
    1064:	4f c0       	rjmp	.+158    	; 0x1104 <__vector_14+0x5f2>
				case BIT_3_INDEX:
				case BIT_4_INDEX:
				case BIT_5_INDEX:
				case BIT_6_INDEX:
				case BIT_7_INDEX:
					if (_char_to_send & 1) {
    1066:	80 91 a0 04 	lds	r24, 0x04A0
    106a:	80 ff       	sbrs	r24, 0
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <__vector_14+0x576>
						PORTB |= _BV(_data_pin_port_b);
    106e:	25 b1       	in	r18, 0x05	; 5
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	00 90 9a 04 	lds	r0, 0x049A
    1078:	02 c0       	rjmp	.+4      	; 0x107e <__vector_14+0x56c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <__vector_14+0x568>
    1082:	82 2b       	or	r24, r18
    1084:	85 b9       	out	0x05, r24	; 5
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <__vector_14+0x590>
						} else {
						PORTB &= ~_BV(_data_pin_port_b);
    1088:	25 b1       	in	r18, 0x05	; 5
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	00 90 9a 04 	lds	r0, 0x049A
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <__vector_14+0x586>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <__vector_14+0x582>
    109c:	80 95       	com	r24
    109e:	82 23       	and	r24, r18
    10a0:	85 b9       	out	0x05, r24	; 5
					}
					_char_to_send >>= 1;
    10a2:	80 91 a0 04 	lds	r24, 0x04A0
    10a6:	86 95       	lsr	r24
    10a8:	80 93 a0 04 	sts	0x04A0, r24
					break;
    10ac:	2b c0       	rjmp	.+86     	; 0x1104 <__vector_14+0x5f2>
				case BIT_PARITY_INDEX:
					if (_char_to_send_parity & 1) {
    10ae:	80 91 9f 04 	lds	r24, 0x049F
    10b2:	80 ff       	sbrs	r24, 0
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <__vector_14+0x5c0>
						PORTB &= ~_BV(_data_pin_port_b);
    10b6:	25 b1       	in	r18, 0x05	; 5
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	00 90 9a 04 	lds	r0, 0x049A
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <__vector_14+0x5b4>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <__vector_14+0x5b0>
    10ca:	80 95       	com	r24
    10cc:	82 23       	and	r24, r18
    10ce:	85 b9       	out	0x05, r24	; 5
    10d0:	19 c0       	rjmp	.+50     	; 0x1104 <__vector_14+0x5f2>
						} else {
						PORTB |= _BV(_data_pin_port_b);
    10d2:	25 b1       	in	r18, 0x05	; 5
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	00 90 9a 04 	lds	r0, 0x049A
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <__vector_14+0x5d0>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <__vector_14+0x5cc>
    10e6:	82 2b       	or	r24, r18
    10e8:	85 b9       	out	0x05, r24	; 5
    10ea:	0c c0       	rjmp	.+24     	; 0x1104 <__vector_14+0x5f2>
					}
					break;
				case BIT_STOP_INDEX:
					PORTB |= _BV(_data_pin_port_b);
    10ec:	25 b1       	in	r18, 0x05	; 5
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	00 90 9a 04 	lds	r0, 0x049A
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <__vector_14+0x5ea>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <__vector_14+0x5e6>
    1100:	82 2b       	or	r24, r18
    1102:	85 b9       	out	0x05, r24	; 5
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		_bit_index--;
    1104:	80 91 9c 04 	lds	r24, 0x049C
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	80 93 9c 04 	sts	0x049C, r24
	}
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <setup_ps2device>:
	sei();
	_send_char_to_host(PS2DEVICE_BAT_OK);
}

void setup_ps2device(uint8_t clock_pin_port_b, uint8_t data_pin_port_b) {
	_clock_pin_port_b = clock_pin_port_b;
    1134:	80 93 9b 04 	sts	0x049B, r24
	_data_pin_port_b = data_pin_port_b;
    1138:	60 93 9a 04 	sts	0x049A, r22
	_reset_state();
    113c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_reset_state>
    1140:	08 95       	ret

00001142 <do_ps2device_work>:
}

void do_ps2device_work() {
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
			case PS2HOST_CMD_SET_TYPEMATIC_RATE_DELAY:
				_next_byte_typematic_rate = true;
				debug_log("Typematic Rate next\r\n");
				continue;
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    1146:	c1 e0       	ldi	r28, 0x01	; 1
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    1148:	b7 c0       	rjmp	.+366    	; 0x12b8 <do_ps2device_work+0x176>
	_recv_buf_len=0;
	sei();
}

static void _clear_send_buf() {
	cli();
    114a:	f8 94       	cli
	_send_buf_head=0;
    114c:	10 92 a6 04 	sts	0x04A6, r1
	_send_buf_len=0;
    1150:	10 92 a5 04 	sts	0x04A5, r1
	sei();
    1154:	78 94       	sei
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
		_clear_send_buf();
		if (_recv_buf_overflow) {
    1156:	80 91 a7 04 	lds	r24, 0x04A7
    115a:	88 23       	and	r24, r24
    115c:	31 f0       	breq	.+12     	; 0x116a <do_ps2device_work+0x28>
			debug_log("_recv_buf overflow\r\n");
    115e:	8a e8       	ldi	r24, 0x8A	; 138
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			_recv_buf_overflow = false;
    1166:	10 92 a7 04 	sts	0x04A7, r1
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static char _get_char_from_rcv_buf()
{
	cli();
    116a:	f8 94       	cli
	if (_recv_buf_len == 0) {
    116c:	80 91 a8 04 	lds	r24, 0x04A8
    1170:	81 11       	cpse	r24, r1
    1172:	03 c0       	rjmp	.+6      	; 0x117a <do_ps2device_work+0x38>
		sei();
    1174:	78 94       	sei
		return 0x0;
    1176:	e0 e0       	ldi	r30, 0x00	; 0
    1178:	1a c0       	rjmp	.+52     	; 0x11ae <do_ps2device_work+0x6c>
	}
	char c = _recv_buf[_recv_buf_head];
    117a:	e0 91 a9 04 	lds	r30, 0x04A9
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	e6 54       	subi	r30, 0x46	; 70
    1182:	fb 4f       	sbci	r31, 0xFB	; 251
    1184:	80 81       	ld	r24, Z
	_recv_buf_head++;
    1186:	90 91 a9 04 	lds	r25, 0x04A9
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	90 93 a9 04 	sts	0x04A9, r25
	_recv_buf_len--;
    1190:	90 91 a8 04 	lds	r25, 0x04A8
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	90 93 a8 04 	sts	0x04A8, r25
	if (_recv_buf_head >= RCV_BUF_SIZE)
    119a:	90 91 a9 04 	lds	r25, 0x04A9
    119e:	90 31       	cpi	r25, 0x10	; 16
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <do_ps2device_work+0x64>
		_recv_buf_head = 0;
    11a2:	10 92 a9 04 	sts	0x04A9, r1
	sei();
    11a6:	78 94       	sei
		if (_recv_buf_overflow) {
			debug_log("_recv_buf overflow\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    11a8:	80 3c       	cpi	r24, 0xC0	; 192
    11aa:	f0 f4       	brcc	.+60     	; 0x11e8 <do_ps2device_work+0xa6>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    11ac:	e8 2f       	mov	r30, r24
		if (_recv_buf_overflow) {
			debug_log("_recv_buf overflow\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    11ae:	80 91 a3 04 	lds	r24, 0x04A3
    11b2:	81 11       	cpse	r24, r1
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <do_ps2device_work+0x7c>
    11b6:	80 91 a4 04 	lds	r24, 0x04A4
    11ba:	88 23       	and	r24, r24
    11bc:	b1 f0       	breq	.+44     	; 0x11ea <do_ps2device_work+0xa8>
			if (_next_byte_typematic_rate) {
    11be:	80 91 a4 04 	lds	r24, 0x04A4
    11c2:	88 23       	and	r24, r24
    11c4:	21 f0       	breq	.+8      	; 0x11ce <do_ps2device_work+0x8c>
				debug_log("Typematic Rate val\r\n");
    11c6:	8f e9       	ldi	r24, 0x9F	; 159
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			}
			if (_next_byte_led) {
    11ce:	80 91 a3 04 	lds	r24, 0x04A3
    11d2:	88 23       	and	r24, r24
    11d4:	21 f0       	breq	.+8      	; 0x11de <do_ps2device_work+0x9c>
				debug_log("LED val\r\n");
    11d6:	84 eb       	ldi	r24, 0xB4	; 180
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
			}
			_next_byte_led = _next_byte_typematic_rate = false;
    11de:	10 92 a4 04 	sts	0x04A4, r1
    11e2:	10 92 a3 04 	sts	0x04A3, r1
			return;
    11e6:	9b c0       	rjmp	.+310    	; 0x131e <do_ps2device_work+0x1dc>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    11e8:	e8 2f       	mov	r30, r24
				debug_log("LED val\r\n");
			}
			_next_byte_led = _next_byte_typematic_rate = false;
			return;
		}
		switch (c) {
    11ea:	8e 2f       	mov	r24, r30
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	ed 5e       	subi	r30, 0xED	; 237
    11f2:	f1 09       	sbc	r31, r1
    11f4:	e3 31       	cpi	r30, 0x13	; 19
    11f6:	f1 05       	cpc	r31, r1
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <do_ps2device_work+0xba>
    11fa:	5a c0       	rjmp	.+180    	; 0x12b0 <do_ps2device_work+0x16e>
    11fc:	e3 5c       	subi	r30, 0xC3	; 195
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__tablejump2__>
			case PS2HOST_CMD_ECHO:
				_send_char_to_host(PS2DEVICE_CMD_ECHO);
    1204:	8e ee       	ldi	r24, 0xEE	; 238
    1206:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				debug_log("Echo\r\n");
    120a:	8e eb       	ldi	r24, 0xBE	; 190
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    1212:	85 c0       	rjmp	.+266    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_RESEND:
				//we don't care - so we send just an ack
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1214:	8a ef       	ldi	r24, 0xFA	; 250
    1216:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				debug_log("Resend requested!\r\n");
    121a:	85 ec       	ldi	r24, 0xC5	; 197
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				continue;
    1222:	4a c0       	rjmp	.+148    	; 0x12b8 <do_ps2device_work+0x176>
			case PS2HOST_CMD_RESET:
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1224:	8a ef       	ldi	r24, 0xFA	; 250
    1226:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				_reset_state();
    122a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_reset_state>
				debug_log("Reset requested\r\n");
    122e:	89 ed       	ldi	r24, 0xD9	; 217
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    1236:	73 c0       	rjmp	.+230    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC:
				// this is generally not the correct handling but we dont care.
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1238:	8a ef       	ldi	r24, 0xFA	; 250
    123a:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				debug_log("Set make/break/typematic received\r\n");
    123e:	8b ee       	ldi	r24, 0xEB	; 235
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    1246:	6b c0       	rjmp	.+214    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_SET_TYPEMATIC_RATE_DELAY:
				_next_byte_typematic_rate = true;
    1248:	c0 93 a4 04 	sts	0x04A4, r28
				debug_log("Typematic Rate next\r\n");
    124c:	8f e0       	ldi	r24, 0x0F	; 15
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				continue;
    1254:	31 c0       	rjmp	.+98     	; 0x12b8 <do_ps2device_work+0x176>
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    1256:	c0 93 a3 04 	sts	0x04A3, r28
				debug_log("LED next\r\n");
    125a:	85 e2       	ldi	r24, 0x25	; 37
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				continue;
    1262:	2a c0       	rjmp	.+84     	; 0x12b8 <do_ps2device_work+0x176>
			case PS2HOST_CMD_READ_ID:
				_send_char_to_host(PS2DEVICE_ID_1);
    1264:	8b ea       	ldi	r24, 0xAB	; 171
    1266:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				_send_char_to_host(PS2DEVICE_ID_2);
    126a:	83 e8       	ldi	r24, 0x83	; 131
    126c:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				debug_log("Send Id requested\r\n");
    1270:	80 e3       	ldi	r24, 0x30	; 48
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				//printf"Send Id requested!\n");
				return;
    1278:	52 c0       	rjmp	.+164    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_SET_DEFAULT:
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    127a:	8a ef       	ldi	r24, 0xFA	; 250
    127c:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
				debug_log("Set default\r\n");
    1280:	84 e4       	ldi	r24, 0x44	; 68
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    1288:	4a c0       	rjmp	.+148    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_DISABLE:
				_ps2dev_enabled = false;
    128a:	10 92 01 01 	sts	0x0101, r1
				_next_byte_led = _next_byte_typematic_rate = false;
    128e:	10 92 a4 04 	sts	0x04A4, r1
    1292:	10 92 a3 04 	sts	0x04A3, r1
				debug_log("Device disabled\r\n");
    1296:	82 e5       	ldi	r24, 0x52	; 82
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    129e:	3f c0       	rjmp	.+126    	; 0x131e <do_ps2device_work+0x1dc>
			case PS2HOST_CMD_ENABLE:
				_ps2dev_enabled = true;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 01 01 	sts	0x0101, r24
				debug_log("Device enabled\r\n");
    12a6:	84 e6       	ldi	r24, 0x64	; 100
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
				return;
    12ae:	37 c0       	rjmp	.+110    	; 0x131e <do_ps2device_work+0x1dc>
			default:
				debug_log("Unrecognized command received\r\n");
    12b0:	85 e7       	ldi	r24, 0x75	; 117
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <debug_log>
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    12b8:	80 91 a8 04 	lds	r24, 0x04A8
    12bc:	81 11       	cpse	r24, r1
    12be:	45 cf       	rjmp	.-374    	; 0x114a <do_ps2device_work+0x8>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
    12c2:	cd 2f       	mov	r28, r29
    12c4:	28 c0       	rjmp	.+80     	; 0x1316 <do_ps2device_work+0x1d4>
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
    12c6:	80 91 a5 04 	lds	r24, 0x04A5
    12ca:	88 23       	and	r24, r24
    12cc:	39 f0       	breq	.+14     	; 0x12dc <do_ps2device_work+0x19a>
		return 0x0;
	}
	return _send_buf[_send_buf_head];
    12ce:	e0 91 a6 04 	lds	r30, 0x04A6
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	e6 55       	subi	r30, 0x56	; 86
    12d6:	fb 4f       	sbci	r31, 0xFB	; 251
    12d8:	80 81       	ld	r24, Z
    12da:	01 c0       	rjmp	.+2      	; 0x12de <do_ps2device_work+0x19c>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    12dc:	8c 2f       	mov	r24, r28
				debug_log("Unrecognized command received\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
    12de:	0e 94 b9 03 	call	0x772	; 0x772 <_send_char_to_host>
    12e2:	81 11       	cpse	r24, r1
    12e4:	18 c0       	rjmp	.+48     	; 0x1316 <do_ps2device_work+0x1d4>
	}
	return _send_buf[_send_buf_head];
}

static void _remove_char_from_snd_buf() {
	cli();
    12e6:	f8 94       	cli
	if (_send_buf_len == 0) { // just to make sure...
    12e8:	80 91 a5 04 	lds	r24, 0x04A5
    12ec:	81 11       	cpse	r24, r1
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <do_ps2device_work+0x1b2>
		sei();
    12f0:	78 94       	sei
    12f2:	11 c0       	rjmp	.+34     	; 0x1316 <do_ps2device_work+0x1d4>
		return;
	}
	_send_buf_head++;
    12f4:	80 91 a6 04 	lds	r24, 0x04A6
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 a6 04 	sts	0x04A6, r24
	_send_buf_len--;
    12fe:	80 91 a5 04 	lds	r24, 0x04A5
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	80 93 a5 04 	sts	0x04A5, r24
	if (_send_buf_head >= SND_BUF_SIZE) {
    1308:	80 91 a6 04 	lds	r24, 0x04A6
    130c:	80 31       	cpi	r24, 0x10	; 16
    130e:	10 f0       	brcs	.+4      	; 0x1314 <do_ps2device_work+0x1d2>
		_send_buf_head = 0;
    1310:	d0 93 a6 04 	sts	0x04A6, r29
	}
	sei();
    1314:	78 94       	sei
			default:
				debug_log("Unrecognized command received\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
    1316:	80 91 a5 04 	lds	r24, 0x04A5
    131a:	81 11       	cpse	r24, r1
    131c:	d4 cf       	rjmp	.-88     	; 0x12c6 <do_ps2device_work+0x184>
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
			_remove_char_from_snd_buf();
		}
	}
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <add_char_to_send_buf>:
	return c;
}

// returning a 0 means buffer is full
static bool _put_char_into_snd_buf(char c) {
	cli();
    1324:	f8 94       	cli
	if (_send_buf_len >= SND_BUF_SIZE) {
    1326:	90 91 a5 04 	lds	r25, 0x04A5
    132a:	90 31       	cpi	r25, 0x10	; 16
    132c:	18 f0       	brcs	.+6      	; 0x1334 <add_char_to_send_buf+0x10>
		sei();
    132e:	78 94       	sei
		return false;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret
	}
	uint8_t i = _send_buf_head + _send_buf_len;
    1334:	90 91 a6 04 	lds	r25, 0x04A6
    1338:	e0 91 a5 04 	lds	r30, 0x04A5
    133c:	e9 0f       	add	r30, r25
	if (i >= SND_BUF_SIZE)
    133e:	e0 31       	cpi	r30, 0x10	; 16
    1340:	08 f0       	brcs	.+2      	; 0x1344 <add_char_to_send_buf+0x20>
		i -= SND_BUF_SIZE;
    1342:	e0 51       	subi	r30, 0x10	; 16
	_send_buf[i] = c;
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	e6 55       	subi	r30, 0x56	; 86
    1348:	fb 4f       	sbci	r31, 0xFB	; 251
    134a:	80 83       	st	Z, r24
	_send_buf_len++;
    134c:	80 91 a5 04 	lds	r24, 0x04A5
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	80 93 a5 04 	sts	0x04A5, r24
	sei();
    1356:	78 94       	sei
	return true;
    1358:	81 e0       	ldi	r24, 0x01	; 1
	}
}

bool add_char_to_send_buf(char c) {
	return _put_char_into_snd_buf(c);
    135a:	08 95       	ret

0000135c <__cmpsf2>:
    135c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fp_cmp>
    1360:	08 f4       	brcc	.+2      	; 0x1364 <__cmpsf2+0x8>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret

00001366 <__floatunsisf>:
    1366:	e8 94       	clt
    1368:	09 c0       	rjmp	.+18     	; 0x137c <__floatsisf+0x12>

0000136a <__floatsisf>:
    136a:	97 fb       	bst	r25, 7
    136c:	3e f4       	brtc	.+14     	; 0x137c <__floatsisf+0x12>
    136e:	90 95       	com	r25
    1370:	80 95       	com	r24
    1372:	70 95       	com	r23
    1374:	61 95       	neg	r22
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	99 23       	and	r25, r25
    137e:	a9 f0       	breq	.+42     	; 0x13aa <__floatsisf+0x40>
    1380:	f9 2f       	mov	r31, r25
    1382:	96 e9       	ldi	r25, 0x96	; 150
    1384:	bb 27       	eor	r27, r27
    1386:	93 95       	inc	r25
    1388:	f6 95       	lsr	r31
    138a:	87 95       	ror	r24
    138c:	77 95       	ror	r23
    138e:	67 95       	ror	r22
    1390:	b7 95       	ror	r27
    1392:	f1 11       	cpse	r31, r1
    1394:	f8 cf       	rjmp	.-16     	; 0x1386 <__floatsisf+0x1c>
    1396:	fa f4       	brpl	.+62     	; 0x13d6 <__floatsisf+0x6c>
    1398:	bb 0f       	add	r27, r27
    139a:	11 f4       	brne	.+4      	; 0x13a0 <__floatsisf+0x36>
    139c:	60 ff       	sbrs	r22, 0
    139e:	1b c0       	rjmp	.+54     	; 0x13d6 <__floatsisf+0x6c>
    13a0:	6f 5f       	subi	r22, 0xFF	; 255
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	8f 4f       	sbci	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	16 c0       	rjmp	.+44     	; 0x13d6 <__floatsisf+0x6c>
    13aa:	88 23       	and	r24, r24
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <__floatsisf+0x48>
    13ae:	96 e9       	ldi	r25, 0x96	; 150
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <__floatsisf+0x6a>
    13b2:	77 23       	and	r23, r23
    13b4:	21 f0       	breq	.+8      	; 0x13be <__floatsisf+0x54>
    13b6:	9e e8       	ldi	r25, 0x8E	; 142
    13b8:	87 2f       	mov	r24, r23
    13ba:	76 2f       	mov	r23, r22
    13bc:	05 c0       	rjmp	.+10     	; 0x13c8 <__floatsisf+0x5e>
    13be:	66 23       	and	r22, r22
    13c0:	71 f0       	breq	.+28     	; 0x13de <__floatsisf+0x74>
    13c2:	96 e8       	ldi	r25, 0x86	; 134
    13c4:	86 2f       	mov	r24, r22
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	2a f0       	brmi	.+10     	; 0x13d6 <__floatsisf+0x6c>
    13cc:	9a 95       	dec	r25
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	da f7       	brpl	.-10     	; 0x13cc <__floatsisf+0x62>
    13d6:	88 0f       	add	r24, r24
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret

000013e0 <__fp_cmp>:
    13e0:	99 0f       	add	r25, r25
    13e2:	00 08       	sbc	r0, r0
    13e4:	55 0f       	add	r21, r21
    13e6:	aa 0b       	sbc	r26, r26
    13e8:	e0 e8       	ldi	r30, 0x80	; 128
    13ea:	fe ef       	ldi	r31, 0xFE	; 254
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	e8 07       	cpc	r30, r24
    13f2:	f9 07       	cpc	r31, r25
    13f4:	c0 f0       	brcs	.+48     	; 0x1426 <__fp_cmp+0x46>
    13f6:	12 16       	cp	r1, r18
    13f8:	13 06       	cpc	r1, r19
    13fa:	e4 07       	cpc	r30, r20
    13fc:	f5 07       	cpc	r31, r21
    13fe:	98 f0       	brcs	.+38     	; 0x1426 <__fp_cmp+0x46>
    1400:	62 1b       	sub	r22, r18
    1402:	73 0b       	sbc	r23, r19
    1404:	84 0b       	sbc	r24, r20
    1406:	95 0b       	sbc	r25, r21
    1408:	39 f4       	brne	.+14     	; 0x1418 <__fp_cmp+0x38>
    140a:	0a 26       	eor	r0, r26
    140c:	61 f0       	breq	.+24     	; 0x1426 <__fp_cmp+0x46>
    140e:	23 2b       	or	r18, r19
    1410:	24 2b       	or	r18, r20
    1412:	25 2b       	or	r18, r21
    1414:	21 f4       	brne	.+8      	; 0x141e <__fp_cmp+0x3e>
    1416:	08 95       	ret
    1418:	0a 26       	eor	r0, r26
    141a:	09 f4       	brne	.+2      	; 0x141e <__fp_cmp+0x3e>
    141c:	a1 40       	sbci	r26, 0x01	; 1
    141e:	a6 95       	lsr	r26
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	81 1d       	adc	r24, r1
    1424:	81 1d       	adc	r24, r1
    1426:	08 95       	ret

00001428 <__mulsf3>:
    1428:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3x>
    142c:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_round>
    1430:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fp_pscA>
    1434:	38 f0       	brcs	.+14     	; 0x1444 <__mulsf3+0x1c>
    1436:	0e 94 91 0a 	call	0x1522	; 0x1522 <__fp_pscB>
    143a:	20 f0       	brcs	.+8      	; 0x1444 <__mulsf3+0x1c>
    143c:	95 23       	and	r25, r21
    143e:	11 f0       	breq	.+4      	; 0x1444 <__mulsf3+0x1c>
    1440:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_inf>
    1444:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__fp_nan>
    1448:	11 24       	eor	r1, r1
    144a:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_szero>

0000144e <__mulsf3x>:
    144e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fp_split3>
    1452:	70 f3       	brcs	.-36     	; 0x1430 <__mulsf3+0x8>

00001454 <__mulsf3_pse>:
    1454:	95 9f       	mul	r25, r21
    1456:	c1 f3       	breq	.-16     	; 0x1448 <__mulsf3+0x20>
    1458:	95 0f       	add	r25, r21
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	55 1f       	adc	r21, r21
    145e:	62 9f       	mul	r22, r18
    1460:	f0 01       	movw	r30, r0
    1462:	72 9f       	mul	r23, r18
    1464:	bb 27       	eor	r27, r27
    1466:	f0 0d       	add	r31, r0
    1468:	b1 1d       	adc	r27, r1
    146a:	63 9f       	mul	r22, r19
    146c:	aa 27       	eor	r26, r26
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	aa 1f       	adc	r26, r26
    1474:	64 9f       	mul	r22, r20
    1476:	66 27       	eor	r22, r22
    1478:	b0 0d       	add	r27, r0
    147a:	a1 1d       	adc	r26, r1
    147c:	66 1f       	adc	r22, r22
    147e:	82 9f       	mul	r24, r18
    1480:	22 27       	eor	r18, r18
    1482:	b0 0d       	add	r27, r0
    1484:	a1 1d       	adc	r26, r1
    1486:	62 1f       	adc	r22, r18
    1488:	73 9f       	mul	r23, r19
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	83 9f       	mul	r24, r19
    1492:	a0 0d       	add	r26, r0
    1494:	61 1d       	adc	r22, r1
    1496:	22 1f       	adc	r18, r18
    1498:	74 9f       	mul	r23, r20
    149a:	33 27       	eor	r19, r19
    149c:	a0 0d       	add	r26, r0
    149e:	61 1d       	adc	r22, r1
    14a0:	23 1f       	adc	r18, r19
    14a2:	84 9f       	mul	r24, r20
    14a4:	60 0d       	add	r22, r0
    14a6:	21 1d       	adc	r18, r1
    14a8:	82 2f       	mov	r24, r18
    14aa:	76 2f       	mov	r23, r22
    14ac:	6a 2f       	mov	r22, r26
    14ae:	11 24       	eor	r1, r1
    14b0:	9f 57       	subi	r25, 0x7F	; 127
    14b2:	50 40       	sbci	r21, 0x00	; 0
    14b4:	9a f0       	brmi	.+38     	; 0x14dc <__mulsf3_pse+0x88>
    14b6:	f1 f0       	breq	.+60     	; 0x14f4 <__mulsf3_pse+0xa0>
    14b8:	88 23       	and	r24, r24
    14ba:	4a f0       	brmi	.+18     	; 0x14ce <__mulsf3_pse+0x7a>
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	bb 1f       	adc	r27, r27
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	91 50       	subi	r25, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	a9 f7       	brne	.-22     	; 0x14b8 <__mulsf3_pse+0x64>
    14ce:	9e 3f       	cpi	r25, 0xFE	; 254
    14d0:	51 05       	cpc	r21, r1
    14d2:	80 f0       	brcs	.+32     	; 0x14f4 <__mulsf3_pse+0xa0>
    14d4:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__fp_inf>
    14d8:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_szero>
    14dc:	5f 3f       	cpi	r21, 0xFF	; 255
    14de:	e4 f3       	brlt	.-8      	; 0x14d8 <__mulsf3_pse+0x84>
    14e0:	98 3e       	cpi	r25, 0xE8	; 232
    14e2:	d4 f3       	brlt	.-12     	; 0x14d8 <__mulsf3_pse+0x84>
    14e4:	86 95       	lsr	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b7 95       	ror	r27
    14ec:	f7 95       	ror	r31
    14ee:	e7 95       	ror	r30
    14f0:	9f 5f       	subi	r25, 0xFF	; 255
    14f2:	c1 f7       	brne	.-16     	; 0x14e4 <__mulsf3_pse+0x90>
    14f4:	fe 2b       	or	r31, r30
    14f6:	88 0f       	add	r24, r24
    14f8:	91 1d       	adc	r25, r1
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	97 f9       	bld	r25, 7
    1500:	08 95       	ret

00001502 <__fp_inf>:
    1502:	97 f9       	bld	r25, 7
    1504:	9f 67       	ori	r25, 0x7F	; 127
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	08 95       	ret

0000150e <__fp_nan>:
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	80 ec       	ldi	r24, 0xC0	; 192
    1512:	08 95       	ret

00001514 <__fp_pscA>:
    1514:	00 24       	eor	r0, r0
    1516:	0a 94       	dec	r0
    1518:	16 16       	cp	r1, r22
    151a:	17 06       	cpc	r1, r23
    151c:	18 06       	cpc	r1, r24
    151e:	09 06       	cpc	r0, r25
    1520:	08 95       	ret

00001522 <__fp_pscB>:
    1522:	00 24       	eor	r0, r0
    1524:	0a 94       	dec	r0
    1526:	12 16       	cp	r1, r18
    1528:	13 06       	cpc	r1, r19
    152a:	14 06       	cpc	r1, r20
    152c:	05 06       	cpc	r0, r21
    152e:	08 95       	ret

00001530 <__fp_round>:
    1530:	09 2e       	mov	r0, r25
    1532:	03 94       	inc	r0
    1534:	00 0c       	add	r0, r0
    1536:	11 f4       	brne	.+4      	; 0x153c <__fp_round+0xc>
    1538:	88 23       	and	r24, r24
    153a:	52 f0       	brmi	.+20     	; 0x1550 <__fp_round+0x20>
    153c:	bb 0f       	add	r27, r27
    153e:	40 f4       	brcc	.+16     	; 0x1550 <__fp_round+0x20>
    1540:	bf 2b       	or	r27, r31
    1542:	11 f4       	brne	.+4      	; 0x1548 <__fp_round+0x18>
    1544:	60 ff       	sbrs	r22, 0
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <__fp_round+0x20>
    1548:	6f 5f       	subi	r22, 0xFF	; 255
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	08 95       	ret

00001552 <__fp_split3>:
    1552:	57 fd       	sbrc	r21, 7
    1554:	90 58       	subi	r25, 0x80	; 128
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	59 f0       	breq	.+22     	; 0x1572 <__fp_splitA+0x10>
    155c:	5f 3f       	cpi	r21, 0xFF	; 255
    155e:	71 f0       	breq	.+28     	; 0x157c <__fp_splitA+0x1a>
    1560:	47 95       	ror	r20

00001562 <__fp_splitA>:
    1562:	88 0f       	add	r24, r24
    1564:	97 fb       	bst	r25, 7
    1566:	99 1f       	adc	r25, r25
    1568:	61 f0       	breq	.+24     	; 0x1582 <__fp_splitA+0x20>
    156a:	9f 3f       	cpi	r25, 0xFF	; 255
    156c:	79 f0       	breq	.+30     	; 0x158c <__fp_splitA+0x2a>
    156e:	87 95       	ror	r24
    1570:	08 95       	ret
    1572:	12 16       	cp	r1, r18
    1574:	13 06       	cpc	r1, r19
    1576:	14 06       	cpc	r1, r20
    1578:	55 1f       	adc	r21, r21
    157a:	f2 cf       	rjmp	.-28     	; 0x1560 <__fp_split3+0xe>
    157c:	46 95       	lsr	r20
    157e:	f1 df       	rcall	.-30     	; 0x1562 <__fp_splitA>
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <__fp_splitA+0x30>
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	99 1f       	adc	r25, r25
    158a:	f1 cf       	rjmp	.-30     	; 0x156e <__fp_splitA+0xc>
    158c:	86 95       	lsr	r24
    158e:	71 05       	cpc	r23, r1
    1590:	61 05       	cpc	r22, r1
    1592:	08 94       	sec
    1594:	08 95       	ret

00001596 <__fp_zero>:
    1596:	e8 94       	clt

00001598 <__fp_szero>:
    1598:	bb 27       	eor	r27, r27
    159a:	66 27       	eor	r22, r22
    159c:	77 27       	eor	r23, r23
    159e:	cb 01       	movw	r24, r22
    15a0:	97 f9       	bld	r25, 7
    15a2:	08 95       	ret

000015a4 <__mulsi3>:
    15a4:	db 01       	movw	r26, r22
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__muluhisi3>
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	a2 9f       	mul	r26, r18
    15b4:	80 0d       	add	r24, r0
    15b6:	91 1d       	adc	r25, r1
    15b8:	a3 9f       	mul	r26, r19
    15ba:	90 0d       	add	r25, r0
    15bc:	b2 9f       	mul	r27, r18
    15be:	90 0d       	add	r25, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	08 95       	ret

000015c4 <__tablejump2__>:
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	05 90       	lpm	r0, Z+
    15ca:	f4 91       	lpm	r31, Z
    15cc:	e0 2d       	mov	r30, r0
    15ce:	09 94       	ijmp

000015d0 <__muluhisi3>:
    15d0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__umulhisi3>
    15d4:	a5 9f       	mul	r26, r21
    15d6:	90 0d       	add	r25, r0
    15d8:	b4 9f       	mul	r27, r20
    15da:	90 0d       	add	r25, r0
    15dc:	a4 9f       	mul	r26, r20
    15de:	80 0d       	add	r24, r0
    15e0:	91 1d       	adc	r25, r1
    15e2:	11 24       	eor	r1, r1
    15e4:	08 95       	ret

000015e6 <__umulhisi3>:
    15e6:	a2 9f       	mul	r26, r18
    15e8:	b0 01       	movw	r22, r0
    15ea:	b3 9f       	mul	r27, r19
    15ec:	c0 01       	movw	r24, r0
    15ee:	a3 9f       	mul	r26, r19
    15f0:	70 0d       	add	r23, r0
    15f2:	81 1d       	adc	r24, r1
    15f4:	11 24       	eor	r1, r1
    15f6:	91 1d       	adc	r25, r1
    15f8:	b2 9f       	mul	r27, r18
    15fa:	70 0d       	add	r23, r0
    15fc:	81 1d       	adc	r24, r1
    15fe:	11 24       	eor	r1, r1
    1600:	91 1d       	adc	r25, r1
    1602:	08 95       	ret

00001604 <sprintf>:
    1604:	ae e0       	ldi	r26, 0x0E	; 14
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e0       	ldi	r30, 0x08	; 8
    160a:	fb e0       	ldi	r31, 0x0B	; 11
    160c:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__prologue_saves__+0x1c>
    1610:	0d 89       	ldd	r16, Y+21	; 0x15
    1612:	1e 89       	ldd	r17, Y+22	; 0x16
    1614:	86 e0       	ldi	r24, 0x06	; 6
    1616:	8c 83       	std	Y+4, r24	; 0x04
    1618:	1a 83       	std	Y+2, r17	; 0x02
    161a:	09 83       	std	Y+1, r16	; 0x01
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	9f e7       	ldi	r25, 0x7F	; 127
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	ae 01       	movw	r20, r28
    1626:	47 5e       	subi	r20, 0xE7	; 231
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	6f 89       	ldd	r22, Y+23	; 0x17
    162c:	78 8d       	ldd	r23, Y+24	; 0x18
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	0e 94 25 0b 	call	0x164a	; 0x164a <vfprintf>
    1636:	2f 81       	ldd	r18, Y+7	; 0x07
    1638:	38 85       	ldd	r19, Y+8	; 0x08
    163a:	f8 01       	movw	r30, r16
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	10 82       	st	Z, r1
    1642:	2e 96       	adiw	r28, 0x0e	; 14
    1644:	e4 e0       	ldi	r30, 0x04	; 4
    1646:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__epilogue_restores__+0x1c>

0000164a <vfprintf>:
    164a:	ac e0       	ldi	r26, 0x0C	; 12
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	eb e2       	ldi	r30, 0x2B	; 43
    1650:	fb e0       	ldi	r31, 0x0B	; 11
    1652:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__>
    1656:	7c 01       	movw	r14, r24
    1658:	6b 01       	movw	r12, r22
    165a:	8a 01       	movw	r16, r20
    165c:	fc 01       	movw	r30, r24
    165e:	17 82       	std	Z+7, r1	; 0x07
    1660:	16 82       	std	Z+6, r1	; 0x06
    1662:	83 81       	ldd	r24, Z+3	; 0x03
    1664:	81 ff       	sbrs	r24, 1
    1666:	bd c1       	rjmp	.+890    	; 0x19e2 <vfprintf+0x398>
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	4c 01       	movw	r8, r24
    166e:	f7 01       	movw	r30, r14
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	f6 01       	movw	r30, r12
    1674:	93 fd       	sbrc	r25, 3
    1676:	85 91       	lpm	r24, Z+
    1678:	93 ff       	sbrs	r25, 3
    167a:	81 91       	ld	r24, Z+
    167c:	6f 01       	movw	r12, r30
    167e:	88 23       	and	r24, r24
    1680:	09 f4       	brne	.+2      	; 0x1684 <vfprintf+0x3a>
    1682:	ab c1       	rjmp	.+854    	; 0x19da <vfprintf+0x390>
    1684:	85 32       	cpi	r24, 0x25	; 37
    1686:	39 f4       	brne	.+14     	; 0x1696 <vfprintf+0x4c>
    1688:	93 fd       	sbrc	r25, 3
    168a:	85 91       	lpm	r24, Z+
    168c:	93 ff       	sbrs	r25, 3
    168e:	81 91       	ld	r24, Z+
    1690:	6f 01       	movw	r12, r30
    1692:	85 32       	cpi	r24, 0x25	; 37
    1694:	29 f4       	brne	.+10     	; 0x16a0 <vfprintf+0x56>
    1696:	b7 01       	movw	r22, r14
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    169e:	e7 cf       	rjmp	.-50     	; 0x166e <vfprintf+0x24>
    16a0:	51 2c       	mov	r5, r1
    16a2:	31 2c       	mov	r3, r1
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	20 32       	cpi	r18, 0x20	; 32
    16a8:	a0 f4       	brcc	.+40     	; 0x16d2 <vfprintf+0x88>
    16aa:	8b 32       	cpi	r24, 0x2B	; 43
    16ac:	69 f0       	breq	.+26     	; 0x16c8 <vfprintf+0x7e>
    16ae:	30 f4       	brcc	.+12     	; 0x16bc <vfprintf+0x72>
    16b0:	80 32       	cpi	r24, 0x20	; 32
    16b2:	59 f0       	breq	.+22     	; 0x16ca <vfprintf+0x80>
    16b4:	83 32       	cpi	r24, 0x23	; 35
    16b6:	69 f4       	brne	.+26     	; 0x16d2 <vfprintf+0x88>
    16b8:	20 61       	ori	r18, 0x10	; 16
    16ba:	2c c0       	rjmp	.+88     	; 0x1714 <vfprintf+0xca>
    16bc:	8d 32       	cpi	r24, 0x2D	; 45
    16be:	39 f0       	breq	.+14     	; 0x16ce <vfprintf+0x84>
    16c0:	80 33       	cpi	r24, 0x30	; 48
    16c2:	39 f4       	brne	.+14     	; 0x16d2 <vfprintf+0x88>
    16c4:	21 60       	ori	r18, 0x01	; 1
    16c6:	26 c0       	rjmp	.+76     	; 0x1714 <vfprintf+0xca>
    16c8:	22 60       	ori	r18, 0x02	; 2
    16ca:	24 60       	ori	r18, 0x04	; 4
    16cc:	23 c0       	rjmp	.+70     	; 0x1714 <vfprintf+0xca>
    16ce:	28 60       	ori	r18, 0x08	; 8
    16d0:	21 c0       	rjmp	.+66     	; 0x1714 <vfprintf+0xca>
    16d2:	27 fd       	sbrc	r18, 7
    16d4:	27 c0       	rjmp	.+78     	; 0x1724 <vfprintf+0xda>
    16d6:	30 ed       	ldi	r19, 0xD0	; 208
    16d8:	38 0f       	add	r19, r24
    16da:	3a 30       	cpi	r19, 0x0A	; 10
    16dc:	78 f4       	brcc	.+30     	; 0x16fc <vfprintf+0xb2>
    16de:	26 ff       	sbrs	r18, 6
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0xa4>
    16e2:	fa e0       	ldi	r31, 0x0A	; 10
    16e4:	5f 9e       	mul	r5, r31
    16e6:	30 0d       	add	r19, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	53 2e       	mov	r5, r19
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <vfprintf+0xca>
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	38 9e       	mul	r3, r24
    16f2:	30 0d       	add	r19, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	33 2e       	mov	r3, r19
    16f8:	20 62       	ori	r18, 0x20	; 32
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <vfprintf+0xca>
    16fc:	8e 32       	cpi	r24, 0x2E	; 46
    16fe:	21 f4       	brne	.+8      	; 0x1708 <vfprintf+0xbe>
    1700:	26 fd       	sbrc	r18, 6
    1702:	6b c1       	rjmp	.+726    	; 0x19da <vfprintf+0x390>
    1704:	20 64       	ori	r18, 0x40	; 64
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <vfprintf+0xca>
    1708:	8c 36       	cpi	r24, 0x6C	; 108
    170a:	11 f4       	brne	.+4      	; 0x1710 <vfprintf+0xc6>
    170c:	20 68       	ori	r18, 0x80	; 128
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <vfprintf+0xca>
    1710:	88 36       	cpi	r24, 0x68	; 104
    1712:	41 f4       	brne	.+16     	; 0x1724 <vfprintf+0xda>
    1714:	f6 01       	movw	r30, r12
    1716:	93 fd       	sbrc	r25, 3
    1718:	85 91       	lpm	r24, Z+
    171a:	93 ff       	sbrs	r25, 3
    171c:	81 91       	ld	r24, Z+
    171e:	6f 01       	movw	r12, r30
    1720:	81 11       	cpse	r24, r1
    1722:	c1 cf       	rjmp	.-126    	; 0x16a6 <vfprintf+0x5c>
    1724:	98 2f       	mov	r25, r24
    1726:	9f 7d       	andi	r25, 0xDF	; 223
    1728:	95 54       	subi	r25, 0x45	; 69
    172a:	93 30       	cpi	r25, 0x03	; 3
    172c:	28 f4       	brcc	.+10     	; 0x1738 <vfprintf+0xee>
    172e:	0c 5f       	subi	r16, 0xFC	; 252
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	ff e3       	ldi	r31, 0x3F	; 63
    1734:	f9 83       	std	Y+1, r31	; 0x01
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <vfprintf+0x108>
    1738:	83 36       	cpi	r24, 0x63	; 99
    173a:	31 f0       	breq	.+12     	; 0x1748 <vfprintf+0xfe>
    173c:	83 37       	cpi	r24, 0x73	; 115
    173e:	71 f0       	breq	.+28     	; 0x175c <vfprintf+0x112>
    1740:	83 35       	cpi	r24, 0x53	; 83
    1742:	09 f0       	breq	.+2      	; 0x1746 <vfprintf+0xfc>
    1744:	5b c0       	rjmp	.+182    	; 0x17fc <vfprintf+0x1b2>
    1746:	22 c0       	rjmp	.+68     	; 0x178c <vfprintf+0x142>
    1748:	f8 01       	movw	r30, r16
    174a:	80 81       	ld	r24, Z
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	0e 5f       	subi	r16, 0xFE	; 254
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	44 24       	eor	r4, r4
    1754:	43 94       	inc	r4
    1756:	51 2c       	mov	r5, r1
    1758:	54 01       	movw	r10, r8
    175a:	15 c0       	rjmp	.+42     	; 0x1786 <vfprintf+0x13c>
    175c:	38 01       	movw	r6, r16
    175e:	f2 e0       	ldi	r31, 0x02	; 2
    1760:	6f 0e       	add	r6, r31
    1762:	71 1c       	adc	r7, r1
    1764:	f8 01       	movw	r30, r16
    1766:	a0 80       	ld	r10, Z
    1768:	b1 80       	ldd	r11, Z+1	; 0x01
    176a:	26 ff       	sbrs	r18, 6
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <vfprintf+0x12a>
    176e:	65 2d       	mov	r22, r5
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x12e>
    1774:	6f ef       	ldi	r22, 0xFF	; 255
    1776:	7f ef       	ldi	r23, 0xFF	; 255
    1778:	c5 01       	movw	r24, r10
    177a:	2c 87       	std	Y+12, r18	; 0x0c
    177c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <strnlen>
    1780:	2c 01       	movw	r4, r24
    1782:	83 01       	movw	r16, r6
    1784:	2c 85       	ldd	r18, Y+12	; 0x0c
    1786:	2f 77       	andi	r18, 0x7F	; 127
    1788:	22 2e       	mov	r2, r18
    178a:	17 c0       	rjmp	.+46     	; 0x17ba <vfprintf+0x170>
    178c:	38 01       	movw	r6, r16
    178e:	f2 e0       	ldi	r31, 0x02	; 2
    1790:	6f 0e       	add	r6, r31
    1792:	71 1c       	adc	r7, r1
    1794:	f8 01       	movw	r30, r16
    1796:	a0 80       	ld	r10, Z
    1798:	b1 80       	ldd	r11, Z+1	; 0x01
    179a:	26 ff       	sbrs	r18, 6
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <vfprintf+0x15a>
    179e:	65 2d       	mov	r22, r5
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x15e>
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	7f ef       	ldi	r23, 0xFF	; 255
    17a8:	c5 01       	movw	r24, r10
    17aa:	2c 87       	std	Y+12, r18	; 0x0c
    17ac:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <strnlen_P>
    17b0:	2c 01       	movw	r4, r24
    17b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17b4:	20 68       	ori	r18, 0x80	; 128
    17b6:	22 2e       	mov	r2, r18
    17b8:	83 01       	movw	r16, r6
    17ba:	23 fc       	sbrc	r2, 3
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <vfprintf+0x1aa>
    17be:	83 2d       	mov	r24, r3
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	48 16       	cp	r4, r24
    17c4:	59 06       	cpc	r5, r25
    17c6:	b0 f4       	brcc	.+44     	; 0x17f4 <vfprintf+0x1aa>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    17d2:	3a 94       	dec	r3
    17d4:	f4 cf       	rjmp	.-24     	; 0x17be <vfprintf+0x174>
    17d6:	f5 01       	movw	r30, r10
    17d8:	27 fc       	sbrc	r2, 7
    17da:	85 91       	lpm	r24, Z+
    17dc:	27 fe       	sbrs	r2, 7
    17de:	81 91       	ld	r24, Z+
    17e0:	5f 01       	movw	r10, r30
    17e2:	b7 01       	movw	r22, r14
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    17ea:	31 10       	cpse	r3, r1
    17ec:	3a 94       	dec	r3
    17ee:	f1 e0       	ldi	r31, 0x01	; 1
    17f0:	4f 1a       	sub	r4, r31
    17f2:	51 08       	sbc	r5, r1
    17f4:	41 14       	cp	r4, r1
    17f6:	51 04       	cpc	r5, r1
    17f8:	71 f7       	brne	.-36     	; 0x17d6 <vfprintf+0x18c>
    17fa:	e5 c0       	rjmp	.+458    	; 0x19c6 <vfprintf+0x37c>
    17fc:	84 36       	cpi	r24, 0x64	; 100
    17fe:	11 f0       	breq	.+4      	; 0x1804 <vfprintf+0x1ba>
    1800:	89 36       	cpi	r24, 0x69	; 105
    1802:	39 f5       	brne	.+78     	; 0x1852 <vfprintf+0x208>
    1804:	f8 01       	movw	r30, r16
    1806:	27 ff       	sbrs	r18, 7
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <vfprintf+0x1ce>
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	0c 5f       	subi	r16, 0xFC	; 252
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <vfprintf+0x1de>
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	07 2e       	mov	r0, r23
    181e:	00 0c       	add	r0, r0
    1820:	88 0b       	sbc	r24, r24
    1822:	99 0b       	sbc	r25, r25
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	2f 76       	andi	r18, 0x6F	; 111
    182a:	72 2e       	mov	r7, r18
    182c:	97 ff       	sbrs	r25, 7
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <vfprintf+0x1f8>
    1830:	90 95       	com	r25
    1832:	80 95       	com	r24
    1834:	70 95       	com	r23
    1836:	61 95       	neg	r22
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	8f 4f       	sbci	r24, 0xFF	; 255
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	20 68       	ori	r18, 0x80	; 128
    1840:	72 2e       	mov	r7, r18
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	a4 01       	movw	r20, r8
    1848:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__ultoa_invert>
    184c:	a8 2e       	mov	r10, r24
    184e:	a8 18       	sub	r10, r8
    1850:	44 c0       	rjmp	.+136    	; 0x18da <vfprintf+0x290>
    1852:	85 37       	cpi	r24, 0x75	; 117
    1854:	29 f4       	brne	.+10     	; 0x1860 <vfprintf+0x216>
    1856:	2f 7e       	andi	r18, 0xEF	; 239
    1858:	b2 2e       	mov	r11, r18
    185a:	2a e0       	ldi	r18, 0x0A	; 10
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	25 c0       	rjmp	.+74     	; 0x18aa <vfprintf+0x260>
    1860:	f2 2f       	mov	r31, r18
    1862:	f9 7f       	andi	r31, 0xF9	; 249
    1864:	bf 2e       	mov	r11, r31
    1866:	8f 36       	cpi	r24, 0x6F	; 111
    1868:	c1 f0       	breq	.+48     	; 0x189a <vfprintf+0x250>
    186a:	18 f4       	brcc	.+6      	; 0x1872 <vfprintf+0x228>
    186c:	88 35       	cpi	r24, 0x58	; 88
    186e:	79 f0       	breq	.+30     	; 0x188e <vfprintf+0x244>
    1870:	b4 c0       	rjmp	.+360    	; 0x19da <vfprintf+0x390>
    1872:	80 37       	cpi	r24, 0x70	; 112
    1874:	19 f0       	breq	.+6      	; 0x187c <vfprintf+0x232>
    1876:	88 37       	cpi	r24, 0x78	; 120
    1878:	21 f0       	breq	.+8      	; 0x1882 <vfprintf+0x238>
    187a:	af c0       	rjmp	.+350    	; 0x19da <vfprintf+0x390>
    187c:	2f 2f       	mov	r18, r31
    187e:	20 61       	ori	r18, 0x10	; 16
    1880:	b2 2e       	mov	r11, r18
    1882:	b4 fe       	sbrs	r11, 4
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <vfprintf+0x256>
    1886:	8b 2d       	mov	r24, r11
    1888:	84 60       	ori	r24, 0x04	; 4
    188a:	b8 2e       	mov	r11, r24
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x256>
    188e:	24 ff       	sbrs	r18, 4
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <vfprintf+0x25c>
    1892:	9f 2f       	mov	r25, r31
    1894:	96 60       	ori	r25, 0x06	; 6
    1896:	b9 2e       	mov	r11, r25
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0x25c>
    189a:	28 e0       	ldi	r18, 0x08	; 8
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x260>
    18a0:	20 e1       	ldi	r18, 0x10	; 16
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x260>
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	32 e0       	ldi	r19, 0x02	; 2
    18aa:	f8 01       	movw	r30, r16
    18ac:	b7 fe       	sbrs	r11, 7
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <vfprintf+0x274>
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	0c 5f       	subi	r16, 0xFC	; 252
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	06 c0       	rjmp	.+12     	; 0x18ca <vfprintf+0x280>
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 5f       	subi	r16, 0xFE	; 254
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	a4 01       	movw	r20, r8
    18cc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__ultoa_invert>
    18d0:	a8 2e       	mov	r10, r24
    18d2:	a8 18       	sub	r10, r8
    18d4:	fb 2d       	mov	r31, r11
    18d6:	ff 77       	andi	r31, 0x7F	; 127
    18d8:	7f 2e       	mov	r7, r31
    18da:	76 fe       	sbrs	r7, 6
    18dc:	0b c0       	rjmp	.+22     	; 0x18f4 <vfprintf+0x2aa>
    18de:	37 2d       	mov	r19, r7
    18e0:	3e 7f       	andi	r19, 0xFE	; 254
    18e2:	a5 14       	cp	r10, r5
    18e4:	50 f4       	brcc	.+20     	; 0x18fa <vfprintf+0x2b0>
    18e6:	74 fe       	sbrs	r7, 4
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <vfprintf+0x2b4>
    18ea:	72 fc       	sbrc	r7, 2
    18ec:	08 c0       	rjmp	.+16     	; 0x18fe <vfprintf+0x2b4>
    18ee:	37 2d       	mov	r19, r7
    18f0:	3e 7e       	andi	r19, 0xEE	; 238
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x2b4>
    18f4:	ba 2c       	mov	r11, r10
    18f6:	37 2d       	mov	r19, r7
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <vfprintf+0x2b6>
    18fa:	ba 2c       	mov	r11, r10
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <vfprintf+0x2b6>
    18fe:	b5 2c       	mov	r11, r5
    1900:	34 ff       	sbrs	r19, 4
    1902:	0d c0       	rjmp	.+26     	; 0x191e <vfprintf+0x2d4>
    1904:	fe 01       	movw	r30, r28
    1906:	ea 0d       	add	r30, r10
    1908:	f1 1d       	adc	r31, r1
    190a:	80 81       	ld	r24, Z
    190c:	80 33       	cpi	r24, 0x30	; 48
    190e:	11 f4       	brne	.+4      	; 0x1914 <vfprintf+0x2ca>
    1910:	39 7e       	andi	r19, 0xE9	; 233
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x2dc>
    1914:	32 ff       	sbrs	r19, 2
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <vfprintf+0x2da>
    1918:	b3 94       	inc	r11
    191a:	b3 94       	inc	r11
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <vfprintf+0x2dc>
    191e:	83 2f       	mov	r24, r19
    1920:	86 78       	andi	r24, 0x86	; 134
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x2dc>
    1924:	b3 94       	inc	r11
    1926:	33 fd       	sbrc	r19, 3
    1928:	13 c0       	rjmp	.+38     	; 0x1950 <vfprintf+0x306>
    192a:	30 ff       	sbrs	r19, 0
    192c:	06 c0       	rjmp	.+12     	; 0x193a <vfprintf+0x2f0>
    192e:	5a 2c       	mov	r5, r10
    1930:	b3 14       	cp	r11, r3
    1932:	18 f4       	brcc	.+6      	; 0x193a <vfprintf+0x2f0>
    1934:	53 0c       	add	r5, r3
    1936:	5b 18       	sub	r5, r11
    1938:	b3 2c       	mov	r11, r3
    193a:	b3 14       	cp	r11, r3
    193c:	68 f4       	brcc	.+26     	; 0x1958 <vfprintf+0x30e>
    193e:	b7 01       	movw	r22, r14
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	3c 87       	std	Y+12, r19	; 0x0c
    1946:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    194a:	b3 94       	inc	r11
    194c:	3c 85       	ldd	r19, Y+12	; 0x0c
    194e:	f5 cf       	rjmp	.-22     	; 0x193a <vfprintf+0x2f0>
    1950:	b3 14       	cp	r11, r3
    1952:	10 f4       	brcc	.+4      	; 0x1958 <vfprintf+0x30e>
    1954:	3b 18       	sub	r3, r11
    1956:	01 c0       	rjmp	.+2      	; 0x195a <vfprintf+0x310>
    1958:	31 2c       	mov	r3, r1
    195a:	34 ff       	sbrs	r19, 4
    195c:	12 c0       	rjmp	.+36     	; 0x1982 <vfprintf+0x338>
    195e:	b7 01       	movw	r22, r14
    1960:	80 e3       	ldi	r24, 0x30	; 48
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	3c 87       	std	Y+12, r19	; 0x0c
    1966:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    196a:	3c 85       	ldd	r19, Y+12	; 0x0c
    196c:	32 ff       	sbrs	r19, 2
    196e:	17 c0       	rjmp	.+46     	; 0x199e <vfprintf+0x354>
    1970:	31 fd       	sbrc	r19, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <vfprintf+0x330>
    1974:	88 e7       	ldi	r24, 0x78	; 120
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x334>
    197a:	88 e5       	ldi	r24, 0x58	; 88
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b7 01       	movw	r22, r14
    1980:	0c c0       	rjmp	.+24     	; 0x199a <vfprintf+0x350>
    1982:	83 2f       	mov	r24, r19
    1984:	86 78       	andi	r24, 0x86	; 134
    1986:	59 f0       	breq	.+22     	; 0x199e <vfprintf+0x354>
    1988:	31 ff       	sbrs	r19, 1
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x346>
    198c:	8b e2       	ldi	r24, 0x2B	; 43
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <vfprintf+0x348>
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	37 fd       	sbrc	r19, 7
    1994:	8d e2       	ldi	r24, 0x2D	; 45
    1996:	b7 01       	movw	r22, r14
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    199e:	a5 14       	cp	r10, r5
    19a0:	38 f4       	brcc	.+14     	; 0x19b0 <vfprintf+0x366>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e3       	ldi	r24, 0x30	; 48
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    19ac:	5a 94       	dec	r5
    19ae:	f7 cf       	rjmp	.-18     	; 0x199e <vfprintf+0x354>
    19b0:	aa 94       	dec	r10
    19b2:	f4 01       	movw	r30, r8
    19b4:	ea 0d       	add	r30, r10
    19b6:	f1 1d       	adc	r31, r1
    19b8:	80 81       	ld	r24, Z
    19ba:	b7 01       	movw	r22, r14
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    19c2:	a1 10       	cpse	r10, r1
    19c4:	f5 cf       	rjmp	.-22     	; 0x19b0 <vfprintf+0x366>
    19c6:	33 20       	and	r3, r3
    19c8:	09 f4       	brne	.+2      	; 0x19cc <vfprintf+0x382>
    19ca:	51 ce       	rjmp	.-862    	; 0x166e <vfprintf+0x24>
    19cc:	b7 01       	movw	r22, r14
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <fputc>
    19d6:	3a 94       	dec	r3
    19d8:	f6 cf       	rjmp	.-20     	; 0x19c6 <vfprintf+0x37c>
    19da:	f7 01       	movw	r30, r14
    19dc:	86 81       	ldd	r24, Z+6	; 0x06
    19de:	97 81       	ldd	r25, Z+7	; 0x07
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <vfprintf+0x39c>
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	9f ef       	ldi	r25, 0xFF	; 255
    19e6:	2c 96       	adiw	r28, 0x0c	; 12
    19e8:	e2 e1       	ldi	r30, 0x12	; 18
    19ea:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__>

000019ee <strnlen_P>:
    19ee:	fc 01       	movw	r30, r24
    19f0:	05 90       	lpm	r0, Z+
    19f2:	61 50       	subi	r22, 0x01	; 1
    19f4:	70 40       	sbci	r23, 0x00	; 0
    19f6:	01 10       	cpse	r0, r1
    19f8:	d8 f7       	brcc	.-10     	; 0x19f0 <strnlen_P+0x2>
    19fa:	80 95       	com	r24
    19fc:	90 95       	com	r25
    19fe:	8e 0f       	add	r24, r30
    1a00:	9f 1f       	adc	r25, r31
    1a02:	08 95       	ret

00001a04 <strnlen>:
    1a04:	fc 01       	movw	r30, r24
    1a06:	61 50       	subi	r22, 0x01	; 1
    1a08:	70 40       	sbci	r23, 0x00	; 0
    1a0a:	01 90       	ld	r0, Z+
    1a0c:	01 10       	cpse	r0, r1
    1a0e:	d8 f7       	brcc	.-10     	; 0x1a06 <strnlen+0x2>
    1a10:	80 95       	com	r24
    1a12:	90 95       	com	r25
    1a14:	8e 0f       	add	r24, r30
    1a16:	9f 1f       	adc	r25, r31
    1a18:	08 95       	ret

00001a1a <fputc>:
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	fb 01       	movw	r30, r22
    1a24:	23 81       	ldd	r18, Z+3	; 0x03
    1a26:	21 fd       	sbrc	r18, 1
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <fputc+0x16>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	28 c0       	rjmp	.+80     	; 0x1a80 <fputc+0x66>
    1a30:	22 ff       	sbrs	r18, 2
    1a32:	16 c0       	rjmp	.+44     	; 0x1a60 <fputc+0x46>
    1a34:	46 81       	ldd	r20, Z+6	; 0x06
    1a36:	57 81       	ldd	r21, Z+7	; 0x07
    1a38:	24 81       	ldd	r18, Z+4	; 0x04
    1a3a:	35 81       	ldd	r19, Z+5	; 0x05
    1a3c:	42 17       	cp	r20, r18
    1a3e:	53 07       	cpc	r21, r19
    1a40:	44 f4       	brge	.+16     	; 0x1a52 <fputc+0x38>
    1a42:	a0 81       	ld	r26, Z
    1a44:	b1 81       	ldd	r27, Z+1	; 0x01
    1a46:	9d 01       	movw	r18, r26
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	31 83       	std	Z+1, r19	; 0x01
    1a4e:	20 83       	st	Z, r18
    1a50:	8c 93       	st	X, r24
    1a52:	26 81       	ldd	r18, Z+6	; 0x06
    1a54:	37 81       	ldd	r19, Z+7	; 0x07
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	37 83       	std	Z+7, r19	; 0x07
    1a5c:	26 83       	std	Z+6, r18	; 0x06
    1a5e:	10 c0       	rjmp	.+32     	; 0x1a80 <fputc+0x66>
    1a60:	eb 01       	movw	r28, r22
    1a62:	09 2f       	mov	r16, r25
    1a64:	18 2f       	mov	r17, r24
    1a66:	00 84       	ldd	r0, Z+8	; 0x08
    1a68:	f1 85       	ldd	r31, Z+9	; 0x09
    1a6a:	e0 2d       	mov	r30, r0
    1a6c:	09 95       	icall
    1a6e:	89 2b       	or	r24, r25
    1a70:	e1 f6       	brne	.-72     	; 0x1a2a <fputc+0x10>
    1a72:	8e 81       	ldd	r24, Y+6	; 0x06
    1a74:	9f 81       	ldd	r25, Y+7	; 0x07
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	9f 83       	std	Y+7, r25	; 0x07
    1a7a:	8e 83       	std	Y+6, r24	; 0x06
    1a7c:	81 2f       	mov	r24, r17
    1a7e:	90 2f       	mov	r25, r16
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <__ultoa_invert>:
    1a8a:	fa 01       	movw	r30, r20
    1a8c:	aa 27       	eor	r26, r26
    1a8e:	28 30       	cpi	r18, 0x08	; 8
    1a90:	51 f1       	breq	.+84     	; 0x1ae6 <__ultoa_invert+0x5c>
    1a92:	20 31       	cpi	r18, 0x10	; 16
    1a94:	81 f1       	breq	.+96     	; 0x1af6 <__ultoa_invert+0x6c>
    1a96:	e8 94       	clt
    1a98:	6f 93       	push	r22
    1a9a:	6e 7f       	andi	r22, 0xFE	; 254
    1a9c:	6e 5f       	subi	r22, 0xFE	; 254
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	af 4f       	sbci	r26, 0xFF	; 255
    1aa6:	b1 e0       	ldi	r27, 0x01	; 1
    1aa8:	3e d0       	rcall	.+124    	; 0x1b26 <__ultoa_invert+0x9c>
    1aaa:	b4 e0       	ldi	r27, 0x04	; 4
    1aac:	3c d0       	rcall	.+120    	; 0x1b26 <__ultoa_invert+0x9c>
    1aae:	67 0f       	add	r22, r23
    1ab0:	78 1f       	adc	r23, r24
    1ab2:	89 1f       	adc	r24, r25
    1ab4:	9a 1f       	adc	r25, r26
    1ab6:	a1 1d       	adc	r26, r1
    1ab8:	68 0f       	add	r22, r24
    1aba:	79 1f       	adc	r23, r25
    1abc:	8a 1f       	adc	r24, r26
    1abe:	91 1d       	adc	r25, r1
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	6a 0f       	add	r22, r26
    1ac4:	71 1d       	adc	r23, r1
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	91 1d       	adc	r25, r1
    1aca:	a1 1d       	adc	r26, r1
    1acc:	20 d0       	rcall	.+64     	; 0x1b0e <__ultoa_invert+0x84>
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <__ultoa_invert+0x48>
    1ad0:	68 94       	set
    1ad2:	3f 91       	pop	r19
    1ad4:	2a e0       	ldi	r18, 0x0A	; 10
    1ad6:	26 9f       	mul	r18, r22
    1ad8:	11 24       	eor	r1, r1
    1ada:	30 19       	sub	r19, r0
    1adc:	30 5d       	subi	r19, 0xD0	; 208
    1ade:	31 93       	st	Z+, r19
    1ae0:	de f6       	brtc	.-74     	; 0x1a98 <__ultoa_invert+0xe>
    1ae2:	cf 01       	movw	r24, r30
    1ae4:	08 95       	ret
    1ae6:	46 2f       	mov	r20, r22
    1ae8:	47 70       	andi	r20, 0x07	; 7
    1aea:	40 5d       	subi	r20, 0xD0	; 208
    1aec:	41 93       	st	Z+, r20
    1aee:	b3 e0       	ldi	r27, 0x03	; 3
    1af0:	0f d0       	rcall	.+30     	; 0x1b10 <__ultoa_invert+0x86>
    1af2:	c9 f7       	brne	.-14     	; 0x1ae6 <__ultoa_invert+0x5c>
    1af4:	f6 cf       	rjmp	.-20     	; 0x1ae2 <__ultoa_invert+0x58>
    1af6:	46 2f       	mov	r20, r22
    1af8:	4f 70       	andi	r20, 0x0F	; 15
    1afa:	40 5d       	subi	r20, 0xD0	; 208
    1afc:	4a 33       	cpi	r20, 0x3A	; 58
    1afe:	18 f0       	brcs	.+6      	; 0x1b06 <__ultoa_invert+0x7c>
    1b00:	49 5d       	subi	r20, 0xD9	; 217
    1b02:	31 fd       	sbrc	r19, 1
    1b04:	40 52       	subi	r20, 0x20	; 32
    1b06:	41 93       	st	Z+, r20
    1b08:	02 d0       	rcall	.+4      	; 0x1b0e <__ultoa_invert+0x84>
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <__ultoa_invert+0x6c>
    1b0c:	ea cf       	rjmp	.-44     	; 0x1ae2 <__ultoa_invert+0x58>
    1b0e:	b4 e0       	ldi	r27, 0x04	; 4
    1b10:	a6 95       	lsr	r26
    1b12:	97 95       	ror	r25
    1b14:	87 95       	ror	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	ba 95       	dec	r27
    1b1c:	c9 f7       	brne	.-14     	; 0x1b10 <__ultoa_invert+0x86>
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 05       	cpc	r22, r1
    1b22:	71 05       	cpc	r23, r1
    1b24:	08 95       	ret
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	0a 2e       	mov	r0, r26
    1b2c:	06 94       	lsr	r0
    1b2e:	57 95       	ror	r21
    1b30:	47 95       	ror	r20
    1b32:	37 95       	ror	r19
    1b34:	27 95       	ror	r18
    1b36:	ba 95       	dec	r27
    1b38:	c9 f7       	brne	.-14     	; 0x1b2c <__ultoa_invert+0xa2>
    1b3a:	62 0f       	add	r22, r18
    1b3c:	73 1f       	adc	r23, r19
    1b3e:	84 1f       	adc	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	a0 1d       	adc	r26, r0
    1b44:	08 95       	ret

00001b46 <__prologue_saves__>:
    1b46:	2f 92       	push	r2
    1b48:	3f 92       	push	r3
    1b4a:	4f 92       	push	r4
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	ca 1b       	sub	r28, r26
    1b70:	db 0b       	sbc	r29, r27
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	09 94       	ijmp

00001b7e <__epilogue_restores__>:
    1b7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b80:	39 88       	ldd	r3, Y+17	; 0x11
    1b82:	48 88       	ldd	r4, Y+16	; 0x10
    1b84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b90:	b9 84       	ldd	r11, Y+9	; 0x09
    1b92:	c8 84       	ldd	r12, Y+8	; 0x08
    1b94:	df 80       	ldd	r13, Y+7	; 0x07
    1b96:	ee 80       	ldd	r14, Y+6	; 0x06
    1b98:	fd 80       	ldd	r15, Y+5	; 0x05
    1b9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1ba0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba2:	ce 0f       	add	r28, r30
    1ba4:	d1 1d       	adc	r29, r1
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	ed 01       	movw	r28, r26
    1bb2:	08 95       	ret

00001bb4 <_exit>:
    1bb4:	f8 94       	cli

00001bb6 <__stop_program>:
    1bb6:	ff cf       	rjmp	.-2      	; 0x1bb6 <__stop_program>
