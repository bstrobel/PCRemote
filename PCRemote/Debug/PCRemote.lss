
PCRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  000019e0  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000309  0080024c  0080024c  00001bc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e3  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ad  00000000  00000000  00002f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000710  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b3  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a89  00000000  00000000  0000467f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_3>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_7>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_14>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_19>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	04 08       	sbc	r0, r4
      6a:	fb 07       	cpc	r31, r27
      6c:	f1 07       	cpc	r31, r17
      6e:	e8 07       	cpc	r30, r24
      70:	e0 07       	cpc	r30, r16
      72:	d7 07       	cpc	r29, r23
      74:	cf 07       	cpc	r28, r31
      76:	c8 07       	cpc	r28, r24
      78:	c5 07       	cpc	r28, r21
      7a:	42 09       	sbc	r20, r2
      7c:	02 09       	sbc	r16, r2
      7e:	90 09       	sbc	r25, r0
      80:	90 09       	sbc	r25, r0
      82:	90 09       	sbc	r25, r0
      84:	50 09       	sbc	r21, r0
      86:	34 09       	sbc	r19, r4
      88:	81 09       	sbc	r24, r1
      8a:	6f 09       	sbc	r22, r15
      8c:	63 09       	sbc	r22, r3
      8e:	28 09       	sbc	r18, r8
      90:	28 09       	sbc	r18, r8
      92:	28 09       	sbc	r18, r8
      94:	28 09       	sbc	r18, r8
      96:	28 09       	sbc	r18, r8
      98:	28 09       	sbc	r18, r8
      9a:	28 09       	sbc	r18, r8
      9c:	0e 09       	sbc	r16, r14
      9e:	1a 09       	sbc	r17, r10

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	12 e0       	ldi	r17, 0x02	; 2
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e0 ee       	ldi	r30, 0xE0	; 224
      b4:	f9 e1       	ldi	r31, 0x19	; 25
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	ac 34       	cpi	r26, 0x4C	; 76
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	25 e0       	ldi	r18, 0x05	; 5
      c4:	ac e4       	ldi	r26, 0x4C	; 76
      c6:	b2 e0       	ldi	r27, 0x02	; 2
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a5 35       	cpi	r26, 0x55	; 85
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 6f 00 	call	0xde	; 0xde <main>
      d6:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <main>:
volatile decode_results_t decode_results;
static char strbuf1[10];

int main(void)
{
	init_debug_log();
      de:	0e 94 4b 02 	call	0x496	; 0x496 <init_debug_log>
	enableIRRecv();
      e2:	0e 94 a0 03 	call	0x740	; 0x740 <enableIRRecv>
	setup_ps2device(PINB2, PINB1);
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	0e 94 9b 08 	call	0x1136	; 0x1136 <setup_ps2device>
	DDRB &= ~_BV(DDB0); // data direction input for B0
      ee:	20 98       	cbi	0x04, 0	; 4
	PORTB |= _BV(PORTB0); // enable pullup
      f0:	28 9a       	sbi	0x05, 0	; 5
	DDRD &= ~(_BV(DDD7) | _BV(DDD6) | _BV(DDD5));
      f2:	8a b1       	in	r24, 0x0a	; 10
      f4:	8f 71       	andi	r24, 0x1F	; 31
      f6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= _BV(PORTD7) | _BV(PORTD6) | _BV(PORTD5);
      f8:	8b b1       	in	r24, 0x0b	; 11
      fa:	80 6e       	ori	r24, 0xE0	; 224
      fc:	8b b9       	out	0x0b, r24	; 11
    while (1) 
    {
		do_ps2device_work();
		if (decodeHashIRRecv(&decode_results)) {
      fe:	07 e4       	ldi	r16, 0x47	; 71
     100:	15 e0       	ldi	r17, 0x05	; 5
			debug_log("-R:");
			sprintf(strbuf1,"%d",decode_results.rawlen);
     102:	0f 2e       	mov	r0, r31
     104:	f6 e0       	ldi	r31, 0x06	; 6
     106:	cf 2e       	mov	r12, r31
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	df 2e       	mov	r13, r31
     10c:	f0 2d       	mov	r31, r0
     10e:	0f 2e       	mov	r0, r31
     110:	fc e4       	ldi	r31, 0x4C	; 76
     112:	ef 2e       	mov	r14, r31
     114:	f2 e0       	ldi	r31, 0x02	; 2
     116:	ff 2e       	mov	r15, r31
     118:	f0 2d       	mov	r31, r0
			debug_log(strbuf1);
			debug_log("\r\n");
			for (int i = 0; i< decode_results.rawlen; i++)
     11a:	40 2e       	mov	r4, r16
     11c:	51 2e       	mov	r5, r17
				if (i + 1 < decode_results.rawlen) {
					debug_log(",");
				}
			}
			debug_log("\r\n0x");
			sprintf(strbuf1,"%lx",decode_results.value);
     11e:	0f 2e       	mov	r0, r31
     120:	f0 e1       	ldi	r31, 0x10	; 16
     122:	8f 2e       	mov	r8, r31
     124:	f1 e0       	ldi	r31, 0x01	; 1
     126:	9f 2e       	mov	r9, r31
     128:	f0 2d       	mov	r31, r0
			sprintf(strbuf1,"%d",decode_results.rawlen);
			debug_log(strbuf1);
			debug_log("\r\n");
			for (int i = 0; i< decode_results.rawlen; i++)
			{
				sprintf(strbuf1, "%d",decode_results.rawbuf[i]);
     12a:	6e 2c       	mov	r6, r14
     12c:	7f 2c       	mov	r7, r15
		if (decodeHashIRRecv(&decode_results)) {
			debug_log("-R:");
			sprintf(strbuf1,"%d",decode_results.rawlen);
			debug_log(strbuf1);
			debug_log("\r\n");
			for (int i = 0; i< decode_results.rawlen; i++)
     12e:	21 2c       	mov	r2, r1
     130:	31 2c       	mov	r3, r1
			{
				sprintf(strbuf1, "%d",decode_results.rawbuf[i]);
     132:	ae 2c       	mov	r10, r14
     134:	bf 2c       	mov	r11, r15
	PORTB |= _BV(PORTB0); // enable pullup
	DDRD &= ~(_BV(DDD7) | _BV(DDD6) | _BV(DDD5));
	PORTD |= _BV(PORTD7) | _BV(PORTD6) | _BV(PORTD5);
    while (1) 
    {
		do_ps2device_work();
     136:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
		if (decodeHashIRRecv(&decode_results)) {
     13a:	84 2d       	mov	r24, r4
     13c:	95 2d       	mov	r25, r5
     13e:	0e 94 0d 03 	call	0x61a	; 0x61a <decodeHashIRRecv>
     142:	88 23       	and	r24, r24
     144:	09 f4       	brne	.+2      	; 0x148 <main+0x6a>
     146:	76 c0       	rjmp	.+236    	; 0x234 <main+0x156>
			debug_log("-R:");
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			sprintf(strbuf1,"%d",decode_results.rawlen);
     150:	d8 01       	movw	r26, r16
     152:	1c 96       	adiw	r26, 0x0c	; 12
     154:	8d 91       	ld	r24, X+
     156:	9c 91       	ld	r25, X
     158:	1d 97       	sbiw	r26, 0x0d	; 13
     15a:	9f 93       	push	r25
     15c:	8f 93       	push	r24
     15e:	df 92       	push	r13
     160:	cf 92       	push	r12
     162:	ff 92       	push	r15
     164:	ef 92       	push	r14
     166:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
			debug_log(strbuf1);
     16a:	86 2d       	mov	r24, r6
     16c:	97 2d       	mov	r25, r7
     16e:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			debug_log("\r\n");
     172:	8a e1       	ldi	r24, 0x1A	; 26
     174:	92 e0       	ldi	r25, 0x02	; 2
     176:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			for (int i = 0; i< decode_results.rawlen; i++)
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	c2 2d       	mov	r28, r2
     188:	d3 2d       	mov	r29, r3
     18a:	29 c0       	rjmp	.+82     	; 0x1de <main+0x100>
			{
				sprintf(strbuf1, "%d",decode_results.rawbuf[i]);
     18c:	d8 01       	movw	r26, r16
     18e:	1a 96       	adiw	r26, 0x0a	; 10
     190:	ed 91       	ld	r30, X+
     192:	fc 91       	ld	r31, X
     194:	1b 97       	sbiw	r26, 0x0b	; 11
     196:	ce 01       	movw	r24, r28
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	e8 0f       	add	r30, r24
     19e:	f9 1f       	adc	r31, r25
     1a0:	80 81       	ld	r24, Z
     1a2:	91 81       	ldd	r25, Z+1	; 0x01
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	df 92       	push	r13
     1aa:	cf 92       	push	r12
     1ac:	ff 92       	push	r15
     1ae:	ef 92       	push	r14
     1b0:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
				debug_log(strbuf1);
     1b4:	8a 2d       	mov	r24, r10
     1b6:	9b 2d       	mov	r25, r11
     1b8:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				if (i + 1 < decode_results.rawlen) {
     1bc:	21 96       	adiw	r28, 0x01	; 1
     1be:	f8 01       	movw	r30, r16
     1c0:	84 85       	ldd	r24, Z+12	; 0x0c
     1c2:	95 85       	ldd	r25, Z+13	; 0x0d
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	c8 17       	cp	r28, r24
     1d2:	d9 07       	cpc	r29, r25
     1d4:	24 f4       	brge	.+8      	; 0x1de <main+0x100>
					debug_log(",");
     1d6:	89 e0       	ldi	r24, 0x09	; 9
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
		if (decodeHashIRRecv(&decode_results)) {
			debug_log("-R:");
			sprintf(strbuf1,"%d",decode_results.rawlen);
			debug_log(strbuf1);
			debug_log("\r\n");
			for (int i = 0; i< decode_results.rawlen; i++)
     1de:	d8 01       	movw	r26, r16
     1e0:	1c 96       	adiw	r26, 0x0c	; 12
     1e2:	8d 91       	ld	r24, X+
     1e4:	9c 91       	ld	r25, X
     1e6:	1d 97       	sbiw	r26, 0x0d	; 13
     1e8:	c8 17       	cp	r28, r24
     1ea:	d9 07       	cpc	r29, r25
     1ec:	7c f2       	brlt	.-98     	; 0x18c <main+0xae>
				debug_log(strbuf1);
				if (i + 1 < decode_results.rawlen) {
					debug_log(",");
				}
			}
			debug_log("\r\n0x");
     1ee:	8b e0       	ldi	r24, 0x0B	; 11
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			sprintf(strbuf1,"%lx",decode_results.value);
     1f6:	f8 01       	movw	r30, r16
     1f8:	84 81       	ldd	r24, Z+4	; 0x04
     1fa:	95 81       	ldd	r25, Z+5	; 0x05
     1fc:	a6 81       	ldd	r26, Z+6	; 0x06
     1fe:	b7 81       	ldd	r27, Z+7	; 0x07
     200:	bf 93       	push	r27
     202:	af 93       	push	r26
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	9f 92       	push	r9
     20a:	8f 92       	push	r8
     20c:	ff 92       	push	r15
     20e:	ef 92       	push	r14
     210:	0e 94 16 0a 	call	0x142c	; 0x142c <sprintf>
			debug_log(strbuf1);
     214:	86 2d       	mov	r24, r6
     216:	97 2d       	mov	r25, r7
     218:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			debug_log("\r\n");
     21c:	8a e1       	ldi	r24, 0x1A	; 26
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
     224:	8d b7       	in	r24, 0x3d	; 61
     226:	9e b7       	in	r25, 0x3e	; 62
     228:	08 96       	adiw	r24, 0x08	; 8
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	9e bf       	out	0x3e, r25	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	8d bf       	out	0x3d, r24	; 61
		}
		if (bit_is_clear(PINB,PINB0)) {
     234:	18 99       	sbic	0x03, 0	; 3
     236:	2d c0       	rjmp	.+90     	; 0x292 <main+0x1b4>
			debug_log("Make U ARROW\r\n");
     238:	84 e1       	ldi	r24, 0x14	; 20
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_MAKE(PS2DC_U_ARROW_EXT);
     240:	80 ee       	ldi	r24, 0xE0	; 224
     242:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     246:	85 e7       	ldi	r24, 0x75	; 117
     248:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     24c:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     250:	9f ef       	ldi	r25, 0xFF	; 255
     252:	a0 e7       	ldi	r26, 0x70	; 112
     254:	b2 e0       	ldi	r27, 0x02	; 2
     256:	91 50       	subi	r25, 0x01	; 1
     258:	a0 40       	sbci	r26, 0x00	; 0
     25a:	b0 40       	sbci	r27, 0x00	; 0
     25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x178>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x182>
     260:	00 00       	nop
			_delay_ms(100);
			debug_log("Break U ARROW\r\n");
     262:	83 e2       	ldi	r24, 0x23	; 35
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_BREAK(PS2DC_U_ARROW_EXT);
     26a:	80 ef       	ldi	r24, 0xF0	; 240
     26c:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     270:	80 ee       	ldi	r24, 0xE0	; 224
     272:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     276:	85 e7       	ldi	r24, 0x75	; 117
     278:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     27c:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     280:	ef ef       	ldi	r30, 0xFF	; 255
     282:	f0 e7       	ldi	r31, 0x70	; 112
     284:	22 e0       	ldi	r18, 0x02	; 2
     286:	e1 50       	subi	r30, 0x01	; 1
     288:	f0 40       	sbci	r31, 0x00	; 0
     28a:	20 40       	sbci	r18, 0x00	; 0
     28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x1a8>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x1b2>
     290:	00 00       	nop
			_delay_ms(100);
		}
		if (bit_is_clear(PIND,PIND7)) {
     292:	4f 99       	sbic	0x09, 7	; 9
     294:	2d c0       	rjmp	.+90     	; 0x2f0 <main+0x212>
			debug_log("Make D ARROW\r\n");
     296:	83 e3       	ldi	r24, 0x33	; 51
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_MAKE(PS2DC_D_ARROW_EXT);
     29e:	80 ee       	ldi	r24, 0xE0	; 224
     2a0:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     2a4:	82 e7       	ldi	r24, 0x72	; 114
     2a6:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     2aa:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	90 e7       	ldi	r25, 0x70	; 112
     2b2:	a2 e0       	ldi	r26, 0x02	; 2
     2b4:	81 50       	subi	r24, 0x01	; 1
     2b6:	90 40       	sbci	r25, 0x00	; 0
     2b8:	a0 40       	sbci	r26, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x1d6>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x1e0>
     2be:	00 00       	nop
			_delay_ms(100);
			debug_log("Break D ARROW\r\n");
     2c0:	82 e4       	ldi	r24, 0x42	; 66
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_BREAK(PS2DC_D_ARROW_EXT);
     2c8:	80 ef       	ldi	r24, 0xF0	; 240
     2ca:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     2ce:	80 ee       	ldi	r24, 0xE0	; 224
     2d0:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     2d4:	82 e7       	ldi	r24, 0x72	; 114
     2d6:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     2da:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     2de:	bf ef       	ldi	r27, 0xFF	; 255
     2e0:	e0 e7       	ldi	r30, 0x70	; 112
     2e2:	f2 e0       	ldi	r31, 0x02	; 2
     2e4:	b1 50       	subi	r27, 0x01	; 1
     2e6:	e0 40       	sbci	r30, 0x00	; 0
     2e8:	f0 40       	sbci	r31, 0x00	; 0
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x206>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x210>
     2ee:	00 00       	nop
			_delay_ms(100);
		}
		if (bit_is_clear(PIND,PIND6)) {
     2f0:	4e 99       	sbic	0x09, 6	; 9
     2f2:	2d c0       	rjmp	.+90     	; 0x34e <main+0x270>
			debug_log("Make R ARROW\r\n");
     2f4:	82 e5       	ldi	r24, 0x52	; 82
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_MAKE(PS2DC_R_ARROW_EXT);
     2fc:	80 ee       	ldi	r24, 0xE0	; 224
     2fe:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     302:	84 e7       	ldi	r24, 0x74	; 116
     304:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     308:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	80 e7       	ldi	r24, 0x70	; 112
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <main+0x234>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x23e>
     31c:	00 00       	nop
			_delay_ms(100);
			debug_log("Break R ARROW\r\n");
     31e:	81 e6       	ldi	r24, 0x61	; 97
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_BREAK(PS2DC_R_ARROW_EXT);
     326:	80 ef       	ldi	r24, 0xF0	; 240
     328:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     32c:	80 ee       	ldi	r24, 0xE0	; 224
     32e:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     332:	84 e7       	ldi	r24, 0x74	; 116
     334:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     338:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     33c:	af ef       	ldi	r26, 0xFF	; 255
     33e:	b0 e7       	ldi	r27, 0x70	; 112
     340:	e2 e0       	ldi	r30, 0x02	; 2
     342:	a1 50       	subi	r26, 0x01	; 1
     344:	b0 40       	sbci	r27, 0x00	; 0
     346:	e0 40       	sbci	r30, 0x00	; 0
     348:	e1 f7       	brne	.-8      	; 0x342 <main+0x264>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x26e>
     34c:	00 00       	nop
			_delay_ms(100);
		}
		if (bit_is_clear(PIND,PIND5)) {
     34e:	4d 99       	sbic	0x09, 5	; 9
     350:	f2 ce       	rjmp	.-540    	; 0x136 <main+0x58>
			debug_log("Make L ARROW\r\n");
     352:	81 e7       	ldi	r24, 0x71	; 113
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_MAKE(PS2DC_L_ARROW_EXT);
     35a:	80 ee       	ldi	r24, 0xE0	; 224
     35c:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     360:	8b e6       	ldi	r24, 0x6B	; 107
     362:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     366:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     36a:	ff ef       	ldi	r31, 0xFF	; 255
     36c:	20 e7       	ldi	r18, 0x70	; 112
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	f1 50       	subi	r31, 0x01	; 1
     372:	20 40       	sbci	r18, 0x00	; 0
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <main+0x292>
     378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x29c>
     37a:	00 00       	nop
			_delay_ms(100);
			debug_log("Break L ARROW\r\n");
     37c:	80 e8       	ldi	r24, 0x80	; 128
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			SEND_EXT_BREAK(PS2DC_L_ARROW_EXT);
     384:	80 ef       	ldi	r24, 0xF0	; 240
     386:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     38a:	80 ee       	ldi	r24, 0xE0	; 224
     38c:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     390:	8b e6       	ldi	r24, 0x6B	; 107
     392:	0e 94 ca 09 	call	0x1394	; 0x1394 <add_char_to_send_buf>
     396:	0e 94 a2 08 	call	0x1144	; 0x1144 <do_ps2device_work>
     39a:	9f ef       	ldi	r25, 0xFF	; 255
     39c:	a0 e7       	ldi	r26, 0x70	; 112
     39e:	b2 e0       	ldi	r27, 0x02	; 2
     3a0:	91 50       	subi	r25, 0x01	; 1
     3a2:	a0 40       	sbci	r26, 0x00	; 0
     3a4:	b0 40       	sbci	r27, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x2c2>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x2cc>
     3aa:	00 00       	nop
     3ac:	c4 ce       	rjmp	.-632    	; 0x136 <main+0x58>

000003ae <_get_char_from_log_buf>:
static volatile uint8_t _log_buf_head = 0;
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
     3ae:	80 91 56 02 	lds	r24, 0x0256
     3b2:	88 23       	and	r24, r24
     3b4:	99 f0       	breq	.+38     	; 0x3dc <_get_char_from_log_buf+0x2e>
		return 0;
	}
	char c = _log_buf[_log_buf_head];
     3b6:	e0 91 57 02 	lds	r30, 0x0257
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	e8 5a       	subi	r30, 0xA8	; 168
     3be:	fd 4f       	sbci	r31, 0xFD	; 253
     3c0:	80 81       	ld	r24, Z
	_log_buf_head++;
     3c2:	90 91 57 02 	lds	r25, 0x0257
     3c6:	9f 5f       	subi	r25, 0xFF	; 255
     3c8:	90 93 57 02 	sts	0x0257, r25
	_log_buf_len--;
     3cc:	90 91 56 02 	lds	r25, 0x0256
     3d0:	91 50       	subi	r25, 0x01	; 1
     3d2:	90 93 56 02 	sts	0x0256, r25
	if (_log_buf_head >= LOG_BUF_SIZE) {
     3d6:	90 91 57 02 	lds	r25, 0x0257
		_log_buf_head = 0;
	}
	return c;
     3da:	08 95       	ret
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
		return 0;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
	_log_buf_len--;
	if (_log_buf_head >= LOG_BUF_SIZE) {
		_log_buf_head = 0;
	}
	return c;
}
     3de:	08 95       	ret

000003e0 <__vector_19>:
	_log_buf_len++;
	sei();
	return true;
}

ISR(USART_UDRE_vect) {
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
	// if num char in buf <= 1 then disable this int
	// if char in buf -> get char from bug and put in UART
	char c = _get_char_from_log_buf();
     402:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_get_char_from_log_buf>
	if (c) {
     406:	88 23       	and	r24, r24
     408:	19 f0       	breq	.+6      	; 0x410 <__vector_19+0x30>
		UDR0 = c;
     40a:	80 93 c6 00 	sts	0x00C6, r24
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__vector_19+0x3a>
	} else {
		UCSR0B &= ~_BV(UDRIE0);
     410:	e1 ec       	ldi	r30, 0xC1	; 193
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8f 7d       	andi	r24, 0xDF	; 223
     418:	80 83       	st	Z, r24
	}
}
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <debug_log>:

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     43c:	fc 01       	movw	r30, r24
     43e:	20 81       	ld	r18, Z
     440:	22 23       	and	r18, r18
     442:	b9 f0       	breq	.+46     	; 0x472 <debug_log+0x36>
     444:	dc 01       	movw	r26, r24
     446:	11 96       	adiw	r26, 0x01	; 1
	return c;
}

// returns true if successful and false if buffer full
static bool _put_char_into_log_buf(char c) {
	cli();
     448:	f8 94       	cli
	if (_log_buf_len >= LOG_BUF_SIZE) {
     44a:	80 91 56 02 	lds	r24, 0x0256
		sei();
		return false;
	}
	uint8_t i = _log_buf_head + _log_buf_len;
     44e:	90 91 57 02 	lds	r25, 0x0257
     452:	e0 91 56 02 	lds	r30, 0x0256
     456:	e9 0f       	add	r30, r25
	if (i >= LOG_BUF_SIZE) {
		i -= LOG_BUF_SIZE;
	}
	_log_buf[i] = c;
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	e8 5a       	subi	r30, 0xA8	; 168
     45c:	fd 4f       	sbci	r31, 0xFD	; 253
     45e:	20 83       	st	Z, r18
	_log_buf_len++;
     460:	90 91 56 02 	lds	r25, 0x0256
     464:	9f 5f       	subi	r25, 0xFF	; 255
     466:	90 93 56 02 	sts	0x0256, r25
	sei();
     46a:	78 94       	sei
	}
}

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     46c:	2d 91       	ld	r18, X+
     46e:	21 11       	cpse	r18, r1
     470:	eb cf       	rjmp	.-42     	; 0x448 <debug_log+0xc>
		if (!_put_char_into_log_buf(str[i])) {
			break;
		}
	}
	// if !(USART_UDRE enabled) then enabled it and put first char in UART
	if (!(UCSR0B & _BV(UDRIE0))) {
     472:	80 91 c1 00 	lds	r24, 0x00C1
     476:	85 fd       	sbrc	r24, 5
     478:	0d c0       	rjmp	.+26     	; 0x494 <debug_log+0x58>
		cli();
     47a:	f8 94       	cli
		char c = _get_char_from_log_buf();
     47c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_get_char_from_log_buf>
		if (c) {
     480:	88 23       	and	r24, r24
     482:	39 f0       	breq	.+14     	; 0x492 <debug_log+0x56>
			UCSR0B |= _BV(UDRIE0);
     484:	e1 ec       	ldi	r30, 0xC1	; 193
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	90 81       	ld	r25, Z
     48a:	90 62       	ori	r25, 0x20	; 32
     48c:	90 83       	st	Z, r25
			UDR0 = c;
     48e:	80 93 c6 00 	sts	0x00C6, r24
		}
		sei();		
     492:	78 94       	sei
     494:	08 95       	ret

00000496 <init_debug_log>:
	}
}

void init_debug_log() {
	UCSR0A = _BV(U2X0);
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	80 93 c0 00 	sts	0x00C0, r24
	UBRR0L = 8; //115200 baud - see page 188 of ATmega328 book
     49c:	88 e0       	ldi	r24, 0x08	; 8
     49e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(TXEN0); /* only tx enable */
     4a2:	80 93 c1 00 	sts	0x00C1, r24
     4a6:	08 95       	ret

000004a8 <__vector_7>:
// First entry is the SPACE between transmissions.
//    -> we don't need that at all. carries no information since the counter overflows without detection
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
ISR(TIMER_INTR_NAME)
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 93       	push	r18
     4b4:	3f 93       	push	r19
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31

	uint8_t irdata = bit_is_set(_IRPIN,IR_RECV_PIN) ? SPACE : MARK;
     4c6:	89 b1       	in	r24, 0x09	; 9
     4c8:	82 fb       	bst	r24, 2
     4ca:	88 27       	eor	r24, r24
     4cc:	80 f9       	bld	r24, 0

	irparams.timer++; // One more 50us tick
     4ce:	e8 e5       	ldi	r30, 0x58	; 88
     4d0:	f4 e0       	ldi	r31, 0x04	; 4
     4d2:	21 81       	ldd	r18, Z+1	; 0x01
     4d4:	32 81       	ldd	r19, Z+2	; 0x02
     4d6:	2f 5f       	subi	r18, 0xFF	; 255
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	32 83       	std	Z+2, r19	; 0x02
     4dc:	21 83       	std	Z+1, r18	; 0x01
	if (irparams.rawlen >= RAWBUF) {
     4de:	90 91 23 05 	lds	r25, 0x0523
     4e2:	94 36       	cpi	r25, 0x64	; 100
     4e4:	18 f0       	brcs	.+6      	; 0x4ec <__vector_7+0x44>
		// Buffer overflow
		irparams.rcvstate = STATE_STOP;
     4e6:	95 e0       	ldi	r25, 0x05	; 5
     4e8:	90 93 58 04 	sts	0x0458, r25
	}
	switch(irparams.rcvstate) {
     4ec:	90 91 58 04 	lds	r25, 0x0458
     4f0:	93 30       	cpi	r25, 0x03	; 3
     4f2:	09 f1       	breq	.+66     	; 0x536 <__vector_7+0x8e>
     4f4:	18 f4       	brcc	.+6      	; 0x4fc <__vector_7+0x54>
     4f6:	92 30       	cpi	r25, 0x02	; 2
     4f8:	39 f0       	breq	.+14     	; 0x508 <__vector_7+0x60>
     4fa:	67 c0       	rjmp	.+206    	; 0x5ca <__vector_7+0x122>
     4fc:	94 30       	cpi	r25, 0x04	; 4
     4fe:	b9 f1       	breq	.+110    	; 0x56e <__vector_7+0xc6>
     500:	95 30       	cpi	r25, 0x05	; 5
     502:	09 f4       	brne	.+2      	; 0x506 <__vector_7+0x5e>
     504:	5b c0       	rjmp	.+182    	; 0x5bc <__vector_7+0x114>
     506:	61 c0       	rjmp	.+194    	; 0x5ca <__vector_7+0x122>
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
     508:	81 11       	cpse	r24, r1
     50a:	63 c0       	rjmp	.+198    	; 0x5d2 <__vector_7+0x12a>
				if (irparams.timer < GAP_TICKS) {
     50c:	80 91 59 04 	lds	r24, 0x0459
     510:	90 91 5a 04 	lds	r25, 0x045A
     514:	84 36       	cpi	r24, 0x64	; 100
     516:	91 05       	cpc	r25, r1
     518:	28 f4       	brcc	.+10     	; 0x524 <__vector_7+0x7c>
					// Not big enough to be a gap.
					irparams.timer = 0;
     51a:	10 92 5a 04 	sts	0x045A, r1
     51e:	10 92 59 04 	sts	0x0459, r1
     522:	55 c0       	rjmp	.+170    	; 0x5ce <__vector_7+0x126>
				}
				else {
					// gap just ended, record duration and start recording transmission
					irparams.rawlen = 0;
     524:	e8 e5       	ldi	r30, 0x58	; 88
     526:	f4 e0       	ldi	r31, 0x04	; 4
     528:	10 92 23 05 	sts	0x0523, r1
					//irparams.rawbuf[irparams.rawlen++] = irparams.timer;
					irparams.timer = 0;
     52c:	12 82       	std	Z+2, r1	; 0x02
     52e:	11 82       	std	Z+1, r1	; 0x01
					irparams.rcvstate = STATE_MARK;
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	80 83       	st	Z, r24
     534:	4c c0       	rjmp	.+152    	; 0x5ce <__vector_7+0x126>
				}
			}
			break;
		case STATE_MARK: // timing MARK
			if (irdata == SPACE) {   // MARK ended, record time
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	09 f0       	breq	.+2      	; 0x53c <__vector_7+0x94>
     53a:	47 c0       	rjmp	.+142    	; 0x5ca <__vector_7+0x122>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     53c:	a8 e5       	ldi	r26, 0x58	; 88
     53e:	b4 e0       	ldi	r27, 0x04	; 4
     540:	c3 e2       	ldi	r28, 0x23	; 35
     542:	d5 e0       	ldi	r29, 0x05	; 5
     544:	e8 81       	ld	r30, Y
     546:	8e 0f       	add	r24, r30
     548:	88 83       	st	Y, r24
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	8d 91       	ld	r24, X+
     550:	9c 91       	ld	r25, X
     552:	12 97       	sbiw	r26, 0x02	; 2
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	e8 5a       	subi	r30, 0xA8	; 168
     55a:	fb 4f       	sbci	r31, 0xFB	; 251
     55c:	94 83       	std	Z+4, r25	; 0x04
     55e:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	1c 92       	st	X, r1
     564:	1e 92       	st	-X, r1
     566:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_SPACE;
     568:	84 e0       	ldi	r24, 0x04	; 4
     56a:	8c 93       	st	X, r24
     56c:	32 c0       	rjmp	.+100    	; 0x5d2 <__vector_7+0x12a>
			}
			break;
		case STATE_SPACE: // timing SPACE
			if (irdata == MARK) { // SPACE just ended, record it
     56e:	81 11       	cpse	r24, r1
     570:	1a c0       	rjmp	.+52     	; 0x5a6 <__vector_7+0xfe>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     572:	a8 e5       	ldi	r26, 0x58	; 88
     574:	b4 e0       	ldi	r27, 0x04	; 4
     576:	c3 e2       	ldi	r28, 0x23	; 35
     578:	d5 e0       	ldi	r29, 0x05	; 5
     57a:	e8 81       	ld	r30, Y
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	8e 0f       	add	r24, r30
     580:	88 83       	st	Y, r24
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	8d 91       	ld	r24, X+
     588:	9c 91       	ld	r25, X
     58a:	12 97       	sbiw	r26, 0x02	; 2
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e8 5a       	subi	r30, 0xA8	; 168
     592:	fb 4f       	sbci	r31, 0xFB	; 251
     594:	94 83       	std	Z+4, r25	; 0x04
     596:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     598:	12 96       	adiw	r26, 0x02	; 2
     59a:	1c 92       	st	X, r1
     59c:	1e 92       	st	-X, r1
     59e:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_MARK;
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	8c 93       	st	X, r24
     5a4:	14 c0       	rjmp	.+40     	; 0x5ce <__vector_7+0x126>
			}
			else { // SPACE
				if (irparams.timer > GAP_TICKS) {
     5a6:	80 91 59 04 	lds	r24, 0x0459
     5aa:	90 91 5a 04 	lds	r25, 0x045A
     5ae:	85 36       	cpi	r24, 0x65	; 101
     5b0:	91 05       	cpc	r25, r1
     5b2:	78 f0       	brcs	.+30     	; 0x5d2 <__vector_7+0x12a>
					// big SPACE, indicates gap between codes
					// Mark current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting space width
					irparams.rcvstate = STATE_STOP;
     5b4:	85 e0       	ldi	r24, 0x05	; 5
     5b6:	80 93 58 04 	sts	0x0458, r24
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <__vector_7+0x12a>
				}
			}
			break;
		case STATE_STOP: // waiting, measuring gap
			if (irdata == MARK) { // reset gap timer
     5bc:	81 11       	cpse	r24, r1
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__vector_7+0x12a>
				irparams.timer = 0;
     5c0:	10 92 5a 04 	sts	0x045A, r1
     5c4:	10 92 59 04 	sts	0x0459, r1
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__vector_7+0x126>
			}
			break;
	}

#ifdef BLINK_LED
	if (irdata == MARK) {
     5ca:	81 11       	cpse	r24, r1
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <__vector_7+0x12a>
		_LED_PORT |= _BV(BLINK_LED_PIN);
     5ce:	45 9a       	sbi	0x08, 5	; 8
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__vector_7+0x12c>
		//PORTC |= _BV(PORTC5); //set the bit
	}
	else {
		_LED_PORT &=~ _BV(BLINK_LED_PIN);
     5d2:	45 98       	cbi	0x08, 5	; 8
		//PORTC &= ~_BV(PORTC5); //clear the bit
	}
#endif
}
     5d4:	ff 91       	pop	r31
     5d6:	ef 91       	pop	r30
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <compare>:
// ----Use a tolerance of 20%
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
//	if (newval < oldval * .8) {
	if (newval < oldval - 4) {
     5f2:	9c 01       	movw	r18, r24
     5f4:	24 50       	subi	r18, 0x04	; 4
     5f6:	31 09       	sbc	r19, r1
     5f8:	62 17       	cp	r22, r18
     5fa:	73 07       	cpc	r23, r19
     5fc:	40 f0       	brcs	.+16     	; 0x60e <compare+0x1c>
		return 0;
	}
//	else if (oldval < newval * .8) {
	else if (oldval < newval - 4) {
     5fe:	64 50       	subi	r22, 0x04	; 4
     600:	71 09       	sbc	r23, r1
     602:	86 17       	cp	r24, r22
     604:	97 07       	cpc	r25, r23
     606:	30 f0       	brcs	.+12     	; 0x614 <compare+0x22>
		return 2;
	}
	else {
		return 1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	08 95       	ret
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
//	if (newval < oldval * .8) {
	if (newval < oldval - 4) {
		return 0;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret
	}
//	else if (oldval < newval * .8) {
	else if (oldval < newval - 4) {
		return 2;
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 1;
	}
}
     618:	08 95       	ret

0000061a <decodeHashIRRecv>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
bool decodeHashIRRecv(volatile decode_results_t *results) {
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
  results->rawbuf = irparams.rawbuf;
     630:	8b e5       	ldi	r24, 0x5B	; 91
     632:	94 e0       	ldi	r25, 0x04	; 4
     634:	9b 87       	std	Y+11, r25	; 0x0b
     636:	8a 87       	std	Y+10, r24	; 0x0a
  results->rawlen = irparams.rawlen;
     638:	20 91 23 05 	lds	r18, 0x0523
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	3d 87       	std	Y+13, r19	; 0x0d
     640:	2c 87       	std	Y+12, r18	; 0x0c
  if (irparams.rcvstate != STATE_STOP)
     642:	80 91 58 04 	lds	r24, 0x0458
     646:	85 30       	cpi	r24, 0x05	; 5
     648:	09 f0       	breq	.+2      	; 0x64c <decodeHashIRRecv+0x32>
     64a:	6e c0       	rjmp	.+220    	; 0x728 <decodeHashIRRecv+0x10e>
  {
	 return NO_DATA; 
  }
  if (results->rawlen < 5 && irparams.rcvstate == STATE_STOP) {
     64c:	8c 85       	ldd	r24, Y+12	; 0x0c
     64e:	9d 85       	ldd	r25, Y+13	; 0x0d
     650:	05 97       	sbiw	r24, 0x05	; 5
     652:	7c f0       	brlt	.+30     	; 0x672 <decodeHashIRRecv+0x58>
	  	irparams.rcvstate = STATE_IDLE;
	  	irparams.rawlen = 0;
		return NO_DATA;
  }
  long hash = FNV_BASIS_32;
  for (int i = 0; i+2 < results->rawlen; i++) {
     654:	8c 85       	ldd	r24, Y+12	; 0x0c
     656:	9d 85       	ldd	r25, Y+13	; 0x0d
     658:	03 97       	sbiw	r24, 0x03	; 3
     65a:	b4 f4       	brge	.+44     	; 0x688 <decodeHashIRRecv+0x6e>
     65c:	0f 2e       	mov	r0, r31
     65e:	f5 ec       	ldi	r31, 0xC5	; 197
     660:	cf 2e       	mov	r12, r31
     662:	fd e9       	ldi	r31, 0x9D	; 157
     664:	df 2e       	mov	r13, r31
     666:	fc e1       	ldi	r31, 0x1C	; 28
     668:	ef 2e       	mov	r14, r31
     66a:	f1 e8       	ldi	r31, 0x81	; 129
     66c:	ff 2e       	mov	r15, r31
     66e:	f0 2d       	mov	r31, r0
     670:	48 c0       	rjmp	.+144    	; 0x702 <decodeHashIRRecv+0xe8>
  results->rawlen = irparams.rawlen;
  if (irparams.rcvstate != STATE_STOP)
  {
	 return NO_DATA; 
  }
  if (results->rawlen < 5 && irparams.rcvstate == STATE_STOP) {
     672:	80 91 58 04 	lds	r24, 0x0458
     676:	85 30       	cpi	r24, 0x05	; 5
     678:	69 f7       	brne	.-38     	; 0x654 <decodeHashIRRecv+0x3a>
	  	irparams.rcvstate = STATE_IDLE;
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	80 93 58 04 	sts	0x0458, r24
	  	irparams.rawlen = 0;
     680:	10 92 23 05 	sts	0x0523, r1
		return NO_DATA;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	51 c0       	rjmp	.+162    	; 0x72a <decodeHashIRRecv+0x110>
  }
  long hash = FNV_BASIS_32;
  for (int i = 0; i+2 < results->rawlen; i++) {
     688:	0f 2e       	mov	r0, r31
     68a:	f3 e0       	ldi	r31, 0x03	; 3
     68c:	af 2e       	mov	r10, r31
     68e:	b1 2c       	mov	r11, r1
     690:	f0 2d       	mov	r31, r0
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	0f 2e       	mov	r0, r31
     698:	f5 ec       	ldi	r31, 0xC5	; 197
     69a:	cf 2e       	mov	r12, r31
     69c:	fd e9       	ldi	r31, 0x9D	; 157
     69e:	df 2e       	mov	r13, r31
     6a0:	fc e1       	ldi	r31, 0x1C	; 28
     6a2:	ef 2e       	mov	r14, r31
     6a4:	f1 e8       	ldi	r31, 0x81	; 129
     6a6:	ff 2e       	mov	r15, r31
     6a8:	f0 2d       	mov	r31, r0
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
     6aa:	ea 85       	ldd	r30, Y+10	; 0x0a
     6ac:	fb 85       	ldd	r31, Y+11	; 0x0b
     6ae:	c8 01       	movw	r24, r16
     6b0:	04 96       	adiw	r24, 0x04	; 4
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	60 81       	ld	r22, Z
     6b8:	71 81       	ldd	r23, Z+1	; 0x01
     6ba:	ea 85       	ldd	r30, Y+10	; 0x0a
     6bc:	fb 85       	ldd	r31, Y+11	; 0x0b
     6be:	e0 0f       	add	r30, r16
     6c0:	f1 1f       	adc	r31, r17
     6c2:	80 81       	ld	r24, Z
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <compare>
     6ca:	fc 01       	movw	r30, r24
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
     6cc:	a7 01       	movw	r20, r14
     6ce:	96 01       	movw	r18, r12
     6d0:	63 e9       	ldi	r22, 0x93	; 147
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsi3>
     6dc:	6f 01       	movw	r12, r30
     6de:	ff 0f       	add	r31, r31
     6e0:	ee 08       	sbc	r14, r14
     6e2:	ff 08       	sbc	r15, r15
     6e4:	c6 26       	eor	r12, r22
     6e6:	d7 26       	eor	r13, r23
     6e8:	e8 26       	eor	r14, r24
     6ea:	f9 26       	eor	r15, r25
	  	irparams.rcvstate = STATE_IDLE;
	  	irparams.rawlen = 0;
		return NO_DATA;
  }
  long hash = FNV_BASIS_32;
  for (int i = 0; i+2 < results->rawlen; i++) {
     6ec:	95 01       	movw	r18, r10
     6ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     6f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     6f2:	0e 5f       	subi	r16, 0xFE	; 254
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	4f ef       	ldi	r20, 0xFF	; 255
     6f8:	a4 1a       	sub	r10, r20
     6fa:	b4 0a       	sbc	r11, r20
     6fc:	28 17       	cp	r18, r24
     6fe:	39 07       	cpc	r19, r25
     700:	a4 f2       	brlt	.-88     	; 0x6aa <decodeHashIRRecv+0x90>
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
     702:	cc 82       	std	Y+4, r12	; 0x04
     704:	dd 82       	std	Y+5, r13	; 0x05
     706:	ee 82       	std	Y+6, r14	; 0x06
     708:	ff 82       	std	Y+7, r15	; 0x07
  results->bits = 32;
     70a:	80 e2       	ldi	r24, 0x20	; 32
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	99 87       	std	Y+9, r25	; 0x09
     710:	88 87       	std	Y+8, r24	; 0x08
  results->decode_type = HASH;
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	9f ef       	ldi	r25, 0xFF	; 255
     716:	99 83       	std	Y+1, r25	; 0x01
     718:	88 83       	st	Y, r24
	irparams.rcvstate = STATE_IDLE;
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	80 93 58 04 	sts	0x0458, r24
	irparams.rawlen = 0;
     720:	10 92 23 05 	sts	0x0523, r1
  return DECODED;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	01 c0       	rjmp	.+2      	; 0x72a <decodeHashIRRecv+0x110>
bool decodeHashIRRecv(volatile decode_results_t *results) {
  results->rawbuf = irparams.rawbuf;
  results->rawlen = irparams.rawlen;
  if (irparams.rcvstate != STATE_STOP)
  {
	 return NO_DATA; 
     728:	80 e0       	ldi	r24, 0x00	; 0
  results->bits = 32;
  results->decode_type = HASH;
	irparams.rcvstate = STATE_IDLE;
	irparams.rawlen = 0;
  return DECODED;
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	08 95       	ret

00000740 <enableIRRecv>:

// initialization
void enableIRRecv() {
	cli();
     740:	f8 94       	cli
	// setup pulse clock timer interrupt
	//Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	80 93 b0 00 	sts	0x00B0, r24
     748:	80 93 b1 00 	sts	0x00B1, r24
     74c:	92 e3       	ldi	r25, 0x32	; 50
     74e:	90 93 b3 00 	sts	0x00B3, r25
     752:	10 92 b2 00 	sts	0x00B2, r1

	//Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
     756:	17 ba       	out	0x17, r1	; 23
     758:	80 93 70 00 	sts	0x0070, r24

	sei();  // enable interrupts
     75c:	78 94       	sei

	// initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
     75e:	80 93 58 04 	sts	0x0458, r24
	irparams.rawlen = 0;
     762:	10 92 23 05 	sts	0x0523, r1

	// set pin modes
	_IRDDR &= ~_BV(IR_RECV_PIN);
     766:	52 98       	cbi	0x0a, 2	; 10
	
#ifdef BLINK_LED
	_LED_DDR |= _BV(BLINK_LED_PIN);
     768:	3d 9a       	sbi	0x07, 5	; 7
	_LED_PORT |= _BV(BLINK_LED_PIN);
     76a:	45 9a       	sbi	0x08, 5	; 8
     76c:	08 95       	ret

0000076e <_send_char_to_host>:
	y ^= (y >> 2);
	y ^= (y >> 4);
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
     76e:	28 2f       	mov	r18, r24
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <_send_char_to_host+0x8>
     774:	9b c0       	rjmp	.+310    	; 0x8ac <_send_char_to_host+0x13e>
     776:	80 91 01 01 	lds	r24, 0x0101
     77a:	88 23       	and	r24, r24
     77c:	09 f4       	brne	.+2      	; 0x780 <_send_char_to_host+0x12>
     77e:	97 c0       	rjmp	.+302    	; 0x8ae <_send_char_to_host+0x140>
		return false;
	}
	while(_trans_in_progress) {}
     780:	90 91 2a 05 	lds	r25, 0x052A
     784:	91 11       	cpse	r25, r1
     786:	fc cf       	rjmp	.-8      	; 0x780 <_send_char_to_host+0x12>
	_trans_in_progress = true;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 2a 05 	sts	0x052A, r24
	_char_to_send = c;
     78e:	20 93 2c 05 	sts	0x052C, r18
	}
	sei();
}

static uint8_t _parity(uint8_t x) {
	uint8_t y = x ^ (x >> 1);
     792:	82 2f       	mov	r24, r18
     794:	86 95       	lsr	r24
     796:	28 27       	eor	r18, r24
	y ^= (y >> 2);
     798:	82 2f       	mov	r24, r18
     79a:	86 95       	lsr	r24
     79c:	86 95       	lsr	r24
     79e:	28 27       	eor	r18, r24
	y ^= (y >> 4);
     7a0:	82 2f       	mov	r24, r18
     7a2:	82 95       	swap	r24
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	28 27       	eor	r18, r24
	return y & 1;
     7a8:	21 70       	andi	r18, 0x01	; 1
		return false;
	}
	while(_trans_in_progress) {}
	_trans_in_progress = true;
	_char_to_send = c;
	_char_to_send_parity = _parity(c);
     7aa:	20 93 2b 05 	sts	0x052B, r18
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	00 90 27 05 	lds	r0, 0x0527
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_send_char_to_host+0x4e>
     7b8:	22 0f       	add	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <_send_char_to_host+0x4a>
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
     7c0:	83 b1       	in	r24, 0x03	; 3
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	82 23       	and	r24, r18
     7c6:	93 23       	and	r25, r19
     7c8:	89 2b       	or	r24, r25
     7ca:	d1 f3       	breq	.-12     	; 0x7c0 <_send_char_to_host+0x52>
	ENABLE_PCINT_DATA;
	ENABLE_PCINT0S;
}

static inline void _conf_pins_output() {
	DISABLE_PCINT0S;
     7cc:	e8 e6       	ldi	r30, 0x68	; 104
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	8e 7f       	andi	r24, 0xFE	; 254
     7d4:	80 83       	st	Z, r24
	DISABLE_PCINT_DATA;
     7d6:	eb e6       	ldi	r30, 0x6B	; 107
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	30 81       	ld	r19, Z
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	ac 01       	movw	r20, r24
     7e2:	00 90 26 05 	lds	r0, 0x0526
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <_send_char_to_host+0x7e>
     7e8:	44 0f       	add	r20, r20
     7ea:	55 1f       	adc	r21, r21
     7ec:	0a 94       	dec	r0
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <_send_char_to_host+0x7a>
     7f0:	24 2f       	mov	r18, r20
     7f2:	20 95       	com	r18
     7f4:	23 23       	and	r18, r19
     7f6:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     7f8:	30 81       	ld	r19, Z
     7fa:	ac 01       	movw	r20, r24
     7fc:	00 90 27 05 	lds	r0, 0x0527
     800:	02 c0       	rjmp	.+4      	; 0x806 <_send_char_to_host+0x98>
     802:	44 0f       	add	r20, r20
     804:	55 1f       	adc	r21, r21
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <_send_char_to_host+0x94>
     80a:	24 2f       	mov	r18, r20
     80c:	20 95       	com	r18
     80e:	23 23       	and	r18, r19
     810:	20 83       	st	Z, r18
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
     812:	34 b1       	in	r19, 0x04	; 4
     814:	bc 01       	movw	r22, r24
     816:	00 90 27 05 	lds	r0, 0x0527
     81a:	02 c0       	rjmp	.+4      	; 0x820 <_send_char_to_host+0xb2>
     81c:	66 0f       	add	r22, r22
     81e:	77 1f       	adc	r23, r23
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <_send_char_to_host+0xae>
     824:	ac 01       	movw	r20, r24
     826:	00 90 26 05 	lds	r0, 0x0526
     82a:	02 c0       	rjmp	.+4      	; 0x830 <_send_char_to_host+0xc2>
     82c:	44 0f       	add	r20, r20
     82e:	55 1f       	adc	r21, r21
     830:	0a 94       	dec	r0
     832:	e2 f7       	brpl	.-8      	; 0x82c <_send_char_to_host+0xbe>
     834:	26 2f       	mov	r18, r22
     836:	24 2b       	or	r18, r20
     838:	23 2b       	or	r18, r19
     83a:	24 b9       	out	0x04, r18	; 4
	_char_to_send_parity = _parity(c);
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
		//wait for the clock pin to become high
	}
	_conf_pins_output();
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
     83c:	35 b1       	in	r19, 0x05	; 5
     83e:	ac 01       	movw	r20, r24
     840:	00 90 26 05 	lds	r0, 0x0526
     844:	02 c0       	rjmp	.+4      	; 0x84a <_send_char_to_host+0xdc>
     846:	44 0f       	add	r20, r20
     848:	55 1f       	adc	r21, r21
     84a:	0a 94       	dec	r0
     84c:	e2 f7       	brpl	.-8      	; 0x846 <_send_char_to_host+0xd8>
     84e:	24 2f       	mov	r18, r20
     850:	20 95       	com	r18
     852:	23 23       	and	r18, r19
     854:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~_BV(_clock_pin_port_b);
     856:	25 b1       	in	r18, 0x05	; 5
     858:	00 90 27 05 	lds	r0, 0x0527
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_send_char_to_host+0xf4>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <_send_char_to_host+0xf0>
     866:	80 95       	com	r24
     868:	82 23       	and	r24, r18
     86a:	85 b9       	out	0x05, r24	; 5
	_bit_index = BIT_0_INDEX;
     86c:	8a e0       	ldi	r24, 0x0A	; 10
     86e:	80 93 28 05 	sts	0x0528, r24
	_clock_state = 0;
     872:	10 92 00 01 	sts	0x0100, r1
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     876:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     878:	85 b5       	in	r24, 0x25	; 37
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     87e:	85 b5       	in	r24, 0x25	; 37
     880:	8a 7f       	andi	r24, 0xFA	; 250
     882:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     884:	84 b5       	in	r24, 0x24	; 36
     886:	82 60       	ori	r24, 0x02	; 2
     888:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     88a:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     88c:	ee e6       	ldi	r30, 0x6E	; 110
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	82 60       	ori	r24, 0x02	; 2
     894:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     896:	88 e2       	ldi	r24, 0x28	; 40
     898:	87 bd       	out	0x27, r24	; 39
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
	PORTB &= ~_BV(_clock_pin_port_b);
	_bit_index = BIT_0_INDEX;
	_clock_state = 0;
	_enable_timer0();
	while(_trans_in_progress) {
     89a:	80 91 2a 05 	lds	r24, 0x052A
     89e:	81 11       	cpse	r24, r1
     8a0:	fc cf       	rjmp	.-8      	; 0x89a <_send_char_to_host+0x12c>
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
     8a2:	80 91 29 05 	lds	r24, 0x0529
	_trans_interrupted = false;
     8a6:	10 92 29 05 	sts	0x0529, r1
	return x;
     8aa:	08 95       	ret
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
		return false;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}
     8ae:	08 95       	ret

000008b0 <_reset_state>:
	_send_buf_len=0;
	sei();
}

static void _reset_state() {
	cli();
     8b0:	f8 94       	cli
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     8b2:	a8 e6       	ldi	r26, 0x68	; 104
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	8c 91       	ld	r24, X
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     8bc:	eb e6       	ldi	r30, 0x6B	; 107
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	30 81       	ld	r19, Z
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	ac 01       	movw	r20, r24
     8c8:	00 90 26 05 	lds	r0, 0x0526
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <_reset_state+0x22>
     8ce:	44 0f       	add	r20, r20
     8d0:	55 1f       	adc	r21, r21
     8d2:	0a 94       	dec	r0
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <_reset_state+0x1e>
     8d6:	24 2f       	mov	r18, r20
     8d8:	20 95       	com	r18
     8da:	23 23       	and	r18, r19
     8dc:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     8de:	30 81       	ld	r19, Z
     8e0:	ac 01       	movw	r20, r24
     8e2:	00 90 27 05 	lds	r0, 0x0527
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <_reset_state+0x3c>
     8e8:	44 0f       	add	r20, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <_reset_state+0x38>
     8f0:	24 2f       	mov	r18, r20
     8f2:	20 95       	com	r18
     8f4:	23 23       	and	r18, r19
     8f6:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     8f8:	44 b1       	in	r20, 0x04	; 4
     8fa:	bc 01       	movw	r22, r24
     8fc:	00 90 26 05 	lds	r0, 0x0526
     900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
     902:	66 0f       	add	r22, r22
     904:	77 1f       	adc	r23, r23
     906:	0a 94       	dec	r0
     908:	e2 f7       	brpl	.-8      	; 0x902 <__stack+0x3>
     90a:	9c 01       	movw	r18, r24
     90c:	00 90 27 05 	lds	r0, 0x0527
     910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
     912:	22 0f       	add	r18, r18
     914:	33 1f       	adc	r19, r19
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0x13>
     91a:	26 2b       	or	r18, r22
     91c:	20 95       	com	r18
     91e:	24 23       	and	r18, r20
     920:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     922:	35 b1       	in	r19, 0x05	; 5
     924:	bc 01       	movw	r22, r24
     926:	00 90 27 05 	lds	r0, 0x0527
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	0a 94       	dec	r0
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0x2d>
     934:	ac 01       	movw	r20, r24
     936:	00 90 26 05 	lds	r0, 0x0526
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
     93c:	44 0f       	add	r20, r20
     93e:	55 1f       	adc	r21, r21
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0x3d>
     944:	26 2f       	mov	r18, r22
     946:	24 2b       	or	r18, r20
     948:	23 2b       	or	r18, r19
     94a:	25 b9       	out	0x05, r18	; 5
	_NOP();
     94c:	00 00       	nop
	ENABLE_PCINT_CLK;
     94e:	40 81       	ld	r20, Z
     950:	9c 01       	movw	r18, r24
     952:	00 90 27 05 	lds	r0, 0x0527
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	24 2b       	or	r18, r20
     962:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     964:	20 81       	ld	r18, Z
     966:	00 90 26 05 	lds	r0, 0x0526
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	0a 94       	dec	r0
     972:	e2 f7       	brpl	.-8      	; 0x96c <__stack+0x6d>
     974:	82 2b       	or	r24, r18
     976:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     978:	8c 91       	ld	r24, X
     97a:	81 60       	ori	r24, 0x01	; 1
     97c:	8c 93       	st	X, r24
}

static void _reset_state() {
	cli();
	_conf_pins_input();
	_ps2dev_enabled = true;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 01 01 	sts	0x0101, r24
	_recv_buf_overflow=false;
     984:	10 92 33 05 	sts	0x0533, r1
	_rcvd_char = 0;
     988:	10 92 2e 05 	sts	0x052E, r1
	_rcvd_char_parity = 0;
     98c:	10 92 2d 05 	sts	0x052D, r1
	_char_to_send = 0;
     990:	10 92 2c 05 	sts	0x052C, r1
	_char_to_send_parity = 0;
     994:	10 92 2b 05 	sts	0x052B, r1
	_trans_in_progress = false;
     998:	10 92 2a 05 	sts	0x052A, r1
	_recv_in_progress = false;
     99c:	10 92 24 05 	sts	0x0524, r1
	_host_req_dev_rcv = false;
     9a0:	10 92 25 05 	sts	0x0525, r1
	_clock_state = 1;
     9a4:	80 93 00 01 	sts	0x0100, r24
	_bit_index = BIT_ACK_INDEX;
     9a8:	10 92 28 05 	sts	0x0528, r1
	_next_byte_led = false;
     9ac:	10 92 2f 05 	sts	0x052F, r1
	_next_byte_typematic_rate = false;
     9b0:	10 92 30 05 	sts	0x0530, r1
		_bit_index--;
	}
}

static void _clear_rcv_buf() {
	cli();
     9b4:	f8 94       	cli
	_recv_buf_head=0;
     9b6:	10 92 35 05 	sts	0x0535, r1
	_recv_buf_len=0;
     9ba:	10 92 34 05 	sts	0x0534, r1
	sei();
     9be:	78 94       	sei
}

static void _clear_send_buf() {
	cli();
     9c0:	f8 94       	cli
	_send_buf_head=0;
     9c2:	10 92 32 05 	sts	0x0532, r1
	_send_buf_len=0;
     9c6:	10 92 31 05 	sts	0x0531, r1
	sei();
     9ca:	78 94       	sei
	_bit_index = BIT_ACK_INDEX;
	_next_byte_led = false;
	_next_byte_typematic_rate = false;
	_clear_rcv_buf();
	_clear_send_buf();
	sei();
     9cc:	78 94       	sei
	_send_char_to_host(PS2DEVICE_BAT_OK);
     9ce:	8a ea       	ldi	r24, 0xAA	; 170
     9d0:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
	debug_log("<BAT_OK\r\n");
     9d4:	80 e9       	ldi	r24, 0x90	; 144
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
     9dc:	08 95       	ret

000009de <__vector_3>:
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}

ISR(PCINT0_vect) {
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	1f 92       	push	r1
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
	uint8_t p = PINB; // save the value of the interrupt source pins
     a02:	83 b1       	in	r24, 0x03	; 3
     a04:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b)) {
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	20 91 27 05 	lds	r18, 0x0527
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 2e       	mov	r0, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <__vector_3+0x38>
     a12:	95 95       	asr	r25
     a14:	87 95       	ror	r24
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <__vector_3+0x34>
     a1a:	80 fd       	sbrc	r24, 0
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <__vector_3+0x5e>
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	00 90 26 05 	lds	r0, 0x0526
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <__vector_3+0x4e>
     a28:	95 95       	asr	r25
     a2a:	87 95       	ror	r24
     a2c:	0a 94       	dec	r0
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <__vector_3+0x4a>
     a30:	80 fd       	sbrc	r24, 0
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <__vector_3+0x5e>
		_host_req_dev_rcv = 1; // get ready for the action
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 25 05 	sts	0x0525, r24
     a3a:	5d c0       	rjmp	.+186    	; 0xaf6 <__vector_3+0x118>
	} else if (bit_is_set(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b) && _host_req_dev_rcv && !_recv_in_progress) {
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__vector_3+0x68>
     a42:	95 95       	asr	r25
     a44:	87 95       	ror	r24
     a46:	2a 95       	dec	r18
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <__vector_3+0x64>
     a4a:	80 ff       	sbrs	r24, 0
     a4c:	52 c0       	rjmp	.+164    	; 0xaf2 <__vector_3+0x114>
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	00 90 26 05 	lds	r0, 0x0526
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <__vector_3+0x7e>
     a58:	95 95       	asr	r25
     a5a:	87 95       	ror	r24
     a5c:	0a 94       	dec	r0
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <__vector_3+0x7a>
     a60:	80 fd       	sbrc	r24, 0
     a62:	47 c0       	rjmp	.+142    	; 0xaf2 <__vector_3+0x114>
     a64:	80 91 25 05 	lds	r24, 0x0525
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__vector_3+0x90>
     a6c:	42 c0       	rjmp	.+132    	; 0xaf2 <__vector_3+0x114>
     a6e:	80 91 24 05 	lds	r24, 0x0524
     a72:	81 11       	cpse	r24, r1
     a74:	3e c0       	rjmp	.+124    	; 0xaf2 <__vector_3+0x114>
		DISABLE_PCINT0S;
     a76:	e8 e6       	ldi	r30, 0x68	; 104
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	8e 7f       	andi	r24, 0xFE	; 254
     a7e:	80 83       	st	Z, r24
		DISABLE_PCINT_DATA;
     a80:	eb e6       	ldi	r30, 0x6B	; 107
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	30 81       	ld	r19, Z
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	ac 01       	movw	r20, r24
     a8c:	00 90 26 05 	lds	r0, 0x0526
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <__vector_3+0xb8>
     a92:	44 0f       	add	r20, r20
     a94:	55 1f       	adc	r21, r21
     a96:	0a 94       	dec	r0
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <__vector_3+0xb4>
     a9a:	24 2f       	mov	r18, r20
     a9c:	20 95       	com	r18
     a9e:	23 23       	and	r18, r19
     aa0:	20 83       	st	Z, r18
		DISABLE_PCINT_CLK;
     aa2:	20 81       	ld	r18, Z
     aa4:	00 90 27 05 	lds	r0, 0x0527
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <__vector_3+0xd0>
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	0a 94       	dec	r0
     ab0:	e2 f7       	brpl	.-8      	; 0xaaa <__vector_3+0xcc>
     ab2:	80 95       	com	r24
     ab4:	82 23       	and	r24, r18
     ab6:	80 83       	st	Z, r24
		_clock_state = 1;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 00 01 	sts	0x0100, r24
		_bit_index = BIT_0_INDEX;
     abe:	9a e0       	ldi	r25, 0x0A	; 10
     ac0:	90 93 28 05 	sts	0x0528, r25
		_host_req_dev_rcv = 0;
     ac4:	10 92 25 05 	sts	0x0525, r1
		_recv_in_progress = 1;
     ac8:	80 93 24 05 	sts	0x0524, r24
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     acc:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     ace:	85 b5       	in	r24, 0x25	; 37
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     ad4:	85 b5       	in	r24, 0x25	; 37
     ad6:	8a 7f       	andi	r24, 0xFA	; 250
     ad8:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     ada:	84 b5       	in	r24, 0x24	; 36
     adc:	82 60       	ori	r24, 0x02	; 2
     ade:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     ae0:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     ae2:	ee e6       	ldi	r30, 0x6E	; 110
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     aec:	88 e2       	ldi	r24, 0x28	; 40
     aee:	87 bd       	out	0x27, r24	; 39
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__vector_3+0x118>
		_host_req_dev_rcv = 0;
		_recv_in_progress = 1;
		_enable_timer0();
	} else {
		// reset the state
		_host_req_dev_rcv = 0;
     af2:	10 92 25 05 	sts	0x0525, r1
	}
}
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <__vector_14>:

ISR(TIMER0_COMPA_vect) {
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	2f 93       	push	r18
     b22:	3f 93       	push	r19
     b24:	4f 93       	push	r20
     b26:	5f 93       	push	r21
     b28:	6f 93       	push	r22
     b2a:	7f 93       	push	r23
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	af 93       	push	r26
     b32:	bf 93       	push	r27
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
	if (_clock_state) {
     b3c:	80 91 00 01 	lds	r24, 0x0100
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <__vector_14+0x30>
     b44:	e5 c1       	rjmp	.+970    	; 0xf10 <__vector_14+0x3fa>
		if (bit_is_set(PINB,_clock_pin_port_b)) {
     b46:	83 b1       	in	r24, 0x03	; 3
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	00 90 27 05 	lds	r0, 0x0527
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__vector_14+0x3e>
     b50:	95 95       	asr	r25
     b52:	87 95       	ror	r24
     b54:	0a 94       	dec	r0
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <__vector_14+0x3a>
     b58:	80 ff       	sbrs	r24, 0
     b5a:	65 c1       	rjmp	.+714    	; 0xe26 <__vector_14+0x310>
			if (_recv_in_progress) {
     b5c:	80 91 24 05 	lds	r24, 0x0524
     b60:	88 23       	and	r24, r24
     b62:	09 f4       	brne	.+2      	; 0xb66 <__vector_14+0x50>
     b64:	ca c0       	rjmp	.+404    	; 0xcfa <__vector_14+0x1e4>
				if (_bit_index == BIT_ACK_INDEX) {
     b66:	90 91 28 05 	lds	r25, 0x0528
     b6a:	91 11       	cpse	r25, r1
     b6c:	18 c0       	rjmp	.+48     	; 0xb9e <__vector_14+0x88>
					DDRB |= _BV(_data_pin_port_b); //switch data to output
     b6e:	94 b1       	in	r25, 0x04	; 4
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	a9 01       	movw	r20, r18
     b76:	00 90 26 05 	lds	r0, 0x0526
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <__vector_14+0x6a>
     b7c:	44 0f       	add	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <__vector_14+0x66>
     b84:	49 2b       	or	r20, r25
     b86:	44 b9       	out	0x04, r20	; 4
					PORTB &= ~_BV(_data_pin_port_b); //set to LOW - this is the ACK bit
     b88:	95 b1       	in	r25, 0x05	; 5
     b8a:	00 90 26 05 	lds	r0, 0x0526
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__vector_14+0x7e>
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <__vector_14+0x7a>
     b98:	20 95       	com	r18
     b9a:	29 23       	and	r18, r25
     b9c:	25 b9       	out	0x05, r18	; 5
				}
				if (_bit_index <0) {
     b9e:	90 91 28 05 	lds	r25, 0x0528
     ba2:	99 23       	and	r25, r25
     ba4:	0c f0       	brlt	.+2      	; 0xba8 <__vector_14+0x92>
     ba6:	8f c0       	rjmp	.+286    	; 0xcc6 <__vector_14+0x1b0>
					_host_req_dev_rcv = 0;
     ba8:	10 92 25 05 	sts	0x0525, r1
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     bac:	95 b5       	in	r25, 0x25	; 37
     bae:	98 7f       	andi	r25, 0xF8	; 248
     bb0:	95 bd       	out	0x25, r25	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     bb2:	ee e6       	ldi	r30, 0x6E	; 110
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	90 81       	ld	r25, Z
     bb8:	9d 7f       	andi	r25, 0xFD	; 253
     bba:	90 83       	st	Z, r25
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     bbc:	a8 e6       	ldi	r26, 0x68	; 104
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	9c 91       	ld	r25, X
     bc2:	9e 7f       	andi	r25, 0xFE	; 254
     bc4:	9c 93       	st	X, r25
	DISABLE_PCINT_DATA;
     bc6:	eb e6       	ldi	r30, 0x6B	; 107
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	40 81       	ld	r20, Z
     bcc:	21 e0       	ldi	r18, 0x01	; 1
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	b9 01       	movw	r22, r18
     bd2:	00 90 26 05 	lds	r0, 0x0526
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <__vector_14+0xc6>
     bd8:	66 0f       	add	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <__vector_14+0xc2>
     be0:	96 2f       	mov	r25, r22
     be2:	90 95       	com	r25
     be4:	94 23       	and	r25, r20
     be6:	90 83       	st	Z, r25
	DISABLE_PCINT_CLK;
     be8:	40 81       	ld	r20, Z
     bea:	b9 01       	movw	r22, r18
     bec:	00 90 27 05 	lds	r0, 0x0527
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <__vector_14+0xe0>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <__vector_14+0xdc>
     bfa:	96 2f       	mov	r25, r22
     bfc:	90 95       	com	r25
     bfe:	94 23       	and	r25, r20
     c00:	90 83       	st	Z, r25
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     c02:	94 b1       	in	r25, 0x04	; 4
     c04:	b9 01       	movw	r22, r18
     c06:	00 90 26 05 	lds	r0, 0x0526
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__vector_14+0xfa>
     c0c:	66 0f       	add	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <__vector_14+0xf6>
     c14:	a9 01       	movw	r20, r18
     c16:	00 90 27 05 	lds	r0, 0x0527
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__vector_14+0x10a>
     c1c:	44 0f       	add	r20, r20
     c1e:	55 1f       	adc	r21, r21
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <__vector_14+0x106>
     c24:	46 2b       	or	r20, r22
     c26:	40 95       	com	r20
     c28:	49 23       	and	r20, r25
     c2a:	44 b9       	out	0x04, r20	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     c2c:	45 b1       	in	r20, 0x05	; 5
     c2e:	e9 01       	movw	r28, r18
     c30:	00 90 27 05 	lds	r0, 0x0527
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__vector_14+0x124>
     c36:	cc 0f       	add	r28, r28
     c38:	dd 1f       	adc	r29, r29
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <__vector_14+0x120>
     c3e:	b9 01       	movw	r22, r18
     c40:	00 90 26 05 	lds	r0, 0x0526
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__vector_14+0x134>
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <__vector_14+0x130>
     c4e:	9c 2f       	mov	r25, r28
     c50:	96 2b       	or	r25, r22
     c52:	94 2b       	or	r25, r20
     c54:	95 b9       	out	0x05, r25	; 5
	_NOP();
     c56:	00 00       	nop
	ENABLE_PCINT_CLK;
     c58:	90 81       	ld	r25, Z
     c5a:	a9 01       	movw	r20, r18
     c5c:	00 90 27 05 	lds	r0, 0x0527
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <__vector_14+0x150>
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <__vector_14+0x14c>
     c6a:	49 2b       	or	r20, r25
     c6c:	40 83       	st	Z, r20
	ENABLE_PCINT_DATA;
     c6e:	90 81       	ld	r25, Z
     c70:	00 90 26 05 	lds	r0, 0x0526
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <__vector_14+0x164>
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <__vector_14+0x160>
     c7e:	29 2b       	or	r18, r25
     c80:	20 83       	st	Z, r18
	ENABLE_PCINT0S;
     c82:	9c 91       	ld	r25, X
     c84:	91 60       	ori	r25, 0x01	; 1
     c86:	9c 93       	st	X, r25
				}
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
     c88:	10 92 24 05 	sts	0x0524, r1
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     c8c:	20 91 2e 05 	lds	r18, 0x052E
}

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
     c90:	90 91 34 05 	lds	r25, 0x0534
     c94:	91 11       	cpse	r25, r1
     c96:	11 c0       	rjmp	.+34     	; 0xcba <__vector_14+0x1a4>
		return false;
	uint8_t i = _recv_buf_head + _recv_buf_len;
     c98:	90 91 35 05 	lds	r25, 0x0535
     c9c:	e0 91 34 05 	lds	r30, 0x0534
     ca0:	e9 0f       	add	r30, r25
	if (i >= RCV_BUF_SIZE)
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__vector_14+0x190>
		i -= RCV_BUF_SIZE;
     ca4:	e1 50       	subi	r30, 0x01	; 1
	_recv_buf[i] = c;
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ea 5b       	subi	r30, 0xBA	; 186
     caa:	fa 4f       	sbci	r31, 0xFA	; 250
     cac:	20 83       	st	Z, r18
	_recv_buf_len++;
     cae:	90 91 34 05 	lds	r25, 0x0534
     cb2:	9f 5f       	subi	r25, 0xFF	; 255
     cb4:	90 93 34 05 	sts	0x0534, r25
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <__vector_14+0x1a6>

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
		return false;
     cba:	80 e0       	ldi	r24, 0x00	; 0
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	89 27       	eor	r24, r25
     cc0:	80 93 33 05 	sts	0x0533, r24
     cc4:	1a c0       	rjmp	.+52     	; 0xcfa <__vector_14+0x1e4>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     cc6:	10 92 00 01 	sts	0x0100, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     cca:	44 b1       	in	r20, 0x04	; 4
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9c 01       	movw	r18, r24
     cd2:	00 90 27 05 	lds	r0, 0x0527
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <__vector_14+0x1c6>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <__vector_14+0x1c2>
     ce0:	24 2b       	or	r18, r20
     ce2:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     ce4:	25 b1       	in	r18, 0x05	; 5
     ce6:	00 90 27 05 	lds	r0, 0x0527
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__vector_14+0x1da>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <__vector_14+0x1d6>
     cf4:	80 95       	com	r24
     cf6:	82 23       	and	r24, r18
     cf8:	85 b9       	out	0x05, r24	; 5
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
				} else {
					_conf_clock_out_low(); // don't bring the clock line low after everything has been received!
				}
			}
			if (_trans_in_progress) {
     cfa:	80 91 2a 05 	lds	r24, 0x052A
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <__vector_14+0x1ee>
     d02:	06 c2       	rjmp	.+1036   	; 0x1110 <__vector_14+0x5fa>
				if (_bit_index < 0) {
     d04:	80 91 28 05 	lds	r24, 0x0528
     d08:	88 23       	and	r24, r24
     d0a:	0c f0       	brlt	.+2      	; 0xd0e <__vector_14+0x1f8>
     d0c:	71 c0       	rjmp	.+226    	; 0xdf0 <__vector_14+0x2da>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     d0e:	85 b5       	in	r24, 0x25	; 37
     d10:	88 7f       	andi	r24, 0xF8	; 248
     d12:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     d14:	ee e6       	ldi	r30, 0x6E	; 110
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
     d1c:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     d1e:	a8 e6       	ldi	r26, 0x68	; 104
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	8c 91       	ld	r24, X
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     d28:	eb e6       	ldi	r30, 0x6B	; 107
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	30 81       	ld	r19, Z
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	ac 01       	movw	r20, r24
     d34:	00 90 26 05 	lds	r0, 0x0526
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <__vector_14+0x228>
     d3a:	44 0f       	add	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <__vector_14+0x224>
     d42:	24 2f       	mov	r18, r20
     d44:	20 95       	com	r18
     d46:	23 23       	and	r18, r19
     d48:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     d4a:	30 81       	ld	r19, Z
     d4c:	ac 01       	movw	r20, r24
     d4e:	00 90 27 05 	lds	r0, 0x0527
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <__vector_14+0x242>
     d54:	44 0f       	add	r20, r20
     d56:	55 1f       	adc	r21, r21
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <__vector_14+0x23e>
     d5c:	24 2f       	mov	r18, r20
     d5e:	20 95       	com	r18
     d60:	23 23       	and	r18, r19
     d62:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     d64:	44 b1       	in	r20, 0x04	; 4
     d66:	bc 01       	movw	r22, r24
     d68:	00 90 26 05 	lds	r0, 0x0526
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <__vector_14+0x25c>
     d6e:	66 0f       	add	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <__vector_14+0x258>
     d76:	9c 01       	movw	r18, r24
     d78:	00 90 27 05 	lds	r0, 0x0527
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <__vector_14+0x26c>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <__vector_14+0x268>
     d86:	26 2b       	or	r18, r22
     d88:	20 95       	com	r18
     d8a:	24 23       	and	r18, r20
     d8c:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     d8e:	35 b1       	in	r19, 0x05	; 5
     d90:	bc 01       	movw	r22, r24
     d92:	00 90 27 05 	lds	r0, 0x0527
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <__vector_14+0x286>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <__vector_14+0x282>
     da0:	ac 01       	movw	r20, r24
     da2:	00 90 26 05 	lds	r0, 0x0526
     da6:	02 c0       	rjmp	.+4      	; 0xdac <__vector_14+0x296>
     da8:	44 0f       	add	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <__vector_14+0x292>
     db0:	26 2f       	mov	r18, r22
     db2:	24 2b       	or	r18, r20
     db4:	23 2b       	or	r18, r19
     db6:	25 b9       	out	0x05, r18	; 5
	_NOP();
     db8:	00 00       	nop
	ENABLE_PCINT_CLK;
     dba:	40 81       	ld	r20, Z
     dbc:	9c 01       	movw	r18, r24
     dbe:	00 90 27 05 	lds	r0, 0x0527
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__vector_14+0x2b2>
     dc4:	22 0f       	add	r18, r18
     dc6:	33 1f       	adc	r19, r19
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <__vector_14+0x2ae>
     dcc:	24 2b       	or	r18, r20
     dce:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     dd0:	20 81       	ld	r18, Z
     dd2:	00 90 26 05 	lds	r0, 0x0526
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <__vector_14+0x2c6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <__vector_14+0x2c2>
     de0:	82 2b       	or	r24, r18
     de2:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     de4:	8c 91       	ld	r24, X
     de6:	81 60       	ori	r24, 0x01	; 1
     de8:	8c 93       	st	X, r24
			}
			if (_trans_in_progress) {
				if (_bit_index < 0) {
					_disable_timer0();
					_conf_pins_input();
					_trans_in_progress = 0;
     dea:	10 92 2a 05 	sts	0x052A, r1
     dee:	90 c1       	rjmp	.+800    	; 0x1110 <__vector_14+0x5fa>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     df0:	10 92 00 01 	sts	0x0100, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     df4:	44 b1       	in	r20, 0x04	; 4
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 01       	movw	r18, r24
     dfc:	00 90 27 05 	lds	r0, 0x0527
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <__vector_14+0x2f0>
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <__vector_14+0x2ec>
     e0a:	24 2b       	or	r18, r20
     e0c:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     e0e:	25 b1       	in	r18, 0x05	; 5
     e10:	00 90 27 05 	lds	r0, 0x0527
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <__vector_14+0x304>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <__vector_14+0x300>
     e1e:	80 95       	com	r24
     e20:	82 23       	and	r24, r18
     e22:	85 b9       	out	0x05, r24	; 5
     e24:	75 c1       	rjmp	.+746    	; 0x1110 <__vector_14+0x5fa>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	88 7f       	andi	r24, 0xF8	; 248
     e2a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     e2c:	ee e6       	ldi	r30, 0x6E	; 110
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8d 7f       	andi	r24, 0xFD	; 253
     e34:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     e36:	a8 e6       	ldi	r26, 0x68	; 104
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	8c 91       	ld	r24, X
     e3c:	8e 7f       	andi	r24, 0xFE	; 254
     e3e:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     e40:	eb e6       	ldi	r30, 0x6B	; 107
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	30 81       	ld	r19, Z
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	ac 01       	movw	r20, r24
     e4c:	00 90 26 05 	lds	r0, 0x0526
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <__vector_14+0x340>
     e52:	44 0f       	add	r20, r20
     e54:	55 1f       	adc	r21, r21
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <__vector_14+0x33c>
     e5a:	24 2f       	mov	r18, r20
     e5c:	20 95       	com	r18
     e5e:	23 23       	and	r18, r19
     e60:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     e62:	30 81       	ld	r19, Z
     e64:	ac 01       	movw	r20, r24
     e66:	00 90 27 05 	lds	r0, 0x0527
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <__vector_14+0x35a>
     e6c:	44 0f       	add	r20, r20
     e6e:	55 1f       	adc	r21, r21
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <__vector_14+0x356>
     e74:	24 2f       	mov	r18, r20
     e76:	20 95       	com	r18
     e78:	23 23       	and	r18, r19
     e7a:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     e7c:	44 b1       	in	r20, 0x04	; 4
     e7e:	bc 01       	movw	r22, r24
     e80:	00 90 26 05 	lds	r0, 0x0526
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <__vector_14+0x374>
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <__vector_14+0x370>
     e8e:	9c 01       	movw	r18, r24
     e90:	00 90 27 05 	lds	r0, 0x0527
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <__vector_14+0x384>
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <__vector_14+0x380>
     e9e:	26 2b       	or	r18, r22
     ea0:	20 95       	com	r18
     ea2:	24 23       	and	r18, r20
     ea4:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     ea6:	35 b1       	in	r19, 0x05	; 5
     ea8:	bc 01       	movw	r22, r24
     eaa:	00 90 27 05 	lds	r0, 0x0527
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <__vector_14+0x39e>
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <__vector_14+0x39a>
     eb8:	ac 01       	movw	r20, r24
     eba:	00 90 26 05 	lds	r0, 0x0526
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <__vector_14+0x3ae>
     ec0:	44 0f       	add	r20, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <__vector_14+0x3aa>
     ec8:	26 2f       	mov	r18, r22
     eca:	24 2b       	or	r18, r20
     ecc:	23 2b       	or	r18, r19
     ece:	25 b9       	out	0x05, r18	; 5
	_NOP();
     ed0:	00 00       	nop
	ENABLE_PCINT_CLK;
     ed2:	40 81       	ld	r20, Z
     ed4:	9c 01       	movw	r18, r24
     ed6:	00 90 27 05 	lds	r0, 0x0527
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <__vector_14+0x3ca>
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <__vector_14+0x3c6>
     ee4:	24 2b       	or	r18, r20
     ee6:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     ee8:	20 81       	ld	r18, Z
     eea:	00 90 26 05 	lds	r0, 0x0526
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <__vector_14+0x3de>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <__vector_14+0x3da>
     ef8:	82 2b       	or	r24, r18
     efa:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     efc:	8c 91       	ld	r24, X
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	8c 93       	st	X, r24
			}
		} else {
			// host has pulled clock low -> bail out and get ready to receive something
			_disable_timer0();
			_conf_pins_input();
			_trans_in_progress = 0;
     f02:	10 92 2a 05 	sts	0x052A, r1
			_recv_in_progress = 0;
     f06:	10 92 24 05 	sts	0x0524, r1
			_host_req_dev_rcv = 0;
     f0a:	10 92 25 05 	sts	0x0525, r1
     f0e:	00 c1       	rjmp	.+512    	; 0x1110 <__vector_14+0x5fa>
		}
	} else {
		// we're just after the rising edge of the clock -> do something
		if (_recv_in_progress) {
     f10:	80 91 24 05 	lds	r24, 0x0524
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <__vector_14+0x404>
     f18:	79 c0       	rjmp	.+242    	; 0x100c <__vector_14+0x4f6>
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
     f1a:	83 b1       	in	r24, 0x03	; 3
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	00 90 26 05 	lds	r0, 0x0526
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <__vector_14+0x412>
     f24:	95 95       	asr	r25
     f26:	87 95       	ror	r24
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <__vector_14+0x40e>
     f2c:	81 70       	andi	r24, 0x01	; 1
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	90 93 00 01 	sts	0x0100, r25
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
     f34:	44 b1       	in	r20, 0x04	; 4
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	00 90 27 05 	lds	r0, 0x0527
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <__vector_14+0x430>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <__vector_14+0x42c>
     f4a:	96 2f       	mov	r25, r22
     f4c:	90 95       	com	r25
     f4e:	94 23       	and	r25, r20
     f50:	94 b9       	out	0x04, r25	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
     f52:	95 b1       	in	r25, 0x05	; 5
     f54:	00 90 27 05 	lds	r0, 0x0527
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <__vector_14+0x448>
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <__vector_14+0x444>
     f62:	29 2b       	or	r18, r25
     f64:	25 b9       	out	0x05, r18	; 5
	_NOP();
     f66:	00 00       	nop
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
			// set clock HIGH
			_conf_clock_input_high();
			// we receive something from the host
			switch (_bit_index) {
     f68:	e0 91 28 05 	lds	r30, 0x0528
     f6c:	4e 2f       	mov	r20, r30
     f6e:	ee 0f       	add	r30, r30
     f70:	55 0b       	sbc	r21, r21
     f72:	66 0b       	sbc	r22, r22
     f74:	77 0b       	sbc	r23, r23
     f76:	fa 01       	movw	r30, r20
     f78:	32 97       	sbiw	r30, 0x02	; 2
     f7a:	e9 30       	cpi	r30, 0x09	; 9
     f7c:	f1 05       	cpc	r31, r1
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <__vector_14+0x46c>
     f80:	45 c0       	rjmp	.+138    	; 0x100c <__vector_14+0x4f6>
     f82:	ec 5c       	subi	r30, 0xCC	; 204
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__tablejump2__>
				case BIT_0_INDEX:
					_rcvd_char = data_pin_val;
     f8a:	80 93 2e 05 	sts	0x052E, r24
					break;
     f8e:	3e c0       	rjmp	.+124    	; 0x100c <__vector_14+0x4f6>
				case BIT_1_INDEX:
					_rcvd_char |= (data_pin_val << 1);
     f90:	90 91 2e 05 	lds	r25, 0x052E
     f94:	88 0f       	add	r24, r24
     f96:	89 2b       	or	r24, r25
     f98:	80 93 2e 05 	sts	0x052E, r24
					break;
     f9c:	37 c0       	rjmp	.+110    	; 0x100c <__vector_14+0x4f6>
				case BIT_2_INDEX:
					_rcvd_char |= (data_pin_val << 2);
     f9e:	90 91 2e 05 	lds	r25, 0x052E
     fa2:	88 0f       	add	r24, r24
     fa4:	88 0f       	add	r24, r24
     fa6:	89 2b       	or	r24, r25
     fa8:	80 93 2e 05 	sts	0x052E, r24
					break;
     fac:	2f c0       	rjmp	.+94     	; 0x100c <__vector_14+0x4f6>
				case BIT_3_INDEX:
					_rcvd_char |= (data_pin_val << 3);
     fae:	90 91 2e 05 	lds	r25, 0x052E
     fb2:	88 0f       	add	r24, r24
     fb4:	88 0f       	add	r24, r24
     fb6:	88 0f       	add	r24, r24
     fb8:	89 2b       	or	r24, r25
     fba:	80 93 2e 05 	sts	0x052E, r24
					break;
     fbe:	26 c0       	rjmp	.+76     	; 0x100c <__vector_14+0x4f6>
				case BIT_4_INDEX:
					_rcvd_char |= (data_pin_val << 4);
     fc0:	90 91 2e 05 	lds	r25, 0x052E
     fc4:	82 95       	swap	r24
     fc6:	80 7f       	andi	r24, 0xF0	; 240
     fc8:	89 2b       	or	r24, r25
     fca:	80 93 2e 05 	sts	0x052E, r24
					break;
     fce:	1e c0       	rjmp	.+60     	; 0x100c <__vector_14+0x4f6>
				case BIT_5_INDEX:
					_rcvd_char |= (data_pin_val << 5);
     fd0:	90 91 2e 05 	lds	r25, 0x052E
     fd4:	82 95       	swap	r24
     fd6:	88 0f       	add	r24, r24
     fd8:	80 7e       	andi	r24, 0xE0	; 224
     fda:	89 2b       	or	r24, r25
     fdc:	80 93 2e 05 	sts	0x052E, r24
					break;
     fe0:	15 c0       	rjmp	.+42     	; 0x100c <__vector_14+0x4f6>
				case BIT_6_INDEX:
					_rcvd_char |= (data_pin_val << 6);
     fe2:	90 91 2e 05 	lds	r25, 0x052E
     fe6:	82 95       	swap	r24
     fe8:	88 0f       	add	r24, r24
     fea:	88 0f       	add	r24, r24
     fec:	80 7c       	andi	r24, 0xC0	; 192
     fee:	89 2b       	or	r24, r25
     ff0:	80 93 2e 05 	sts	0x052E, r24
					break;
     ff4:	0b c0       	rjmp	.+22     	; 0x100c <__vector_14+0x4f6>
				case BIT_7_INDEX:
					_rcvd_char |= (data_pin_val << 7);
     ff6:	90 91 2e 05 	lds	r25, 0x052E
     ffa:	87 95       	ror	r24
     ffc:	88 27       	eor	r24, r24
     ffe:	87 95       	ror	r24
    1000:	89 2b       	or	r24, r25
    1002:	80 93 2e 05 	sts	0x052E, r24
					break;
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__vector_14+0x4f6>
				case BIT_PARITY_INDEX:
					_rcvd_char_parity = data_pin_val;
    1008:	80 93 2d 05 	sts	0x052D, r24
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		if (_trans_in_progress) {
    100c:	80 91 2a 05 	lds	r24, 0x052A
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <__vector_14+0x500>
    1014:	78 c0       	rjmp	.+240    	; 0x1106 <__vector_14+0x5f0>
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 00 01 	sts	0x0100, r24
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
    101c:	34 b1       	in	r19, 0x04	; 4
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	ac 01       	movw	r20, r24
    1024:	00 90 27 05 	lds	r0, 0x0527
    1028:	02 c0       	rjmp	.+4      	; 0x102e <__vector_14+0x518>
    102a:	44 0f       	add	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <__vector_14+0x514>
    1032:	24 2f       	mov	r18, r20
    1034:	20 95       	com	r18
    1036:	23 23       	and	r18, r19
    1038:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
    103a:	25 b1       	in	r18, 0x05	; 5
    103c:	00 90 27 05 	lds	r0, 0x0527
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <__vector_14+0x530>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <__vector_14+0x52c>
    104a:	82 2b       	or	r24, r18
    104c:	85 b9       	out	0x05, r24	; 5
	_NOP();
    104e:	00 00       	nop
			}
		}
		if (_trans_in_progress) {
			_conf_clock_input_high();
			// we send something to the host
			switch (_bit_index) {
    1050:	80 91 28 05 	lds	r24, 0x0528
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	61 f1       	breq	.+88     	; 0x10b0 <__vector_14+0x59a>
    1058:	24 f4       	brge	.+8      	; 0x1062 <__vector_14+0x54c>
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f4       	brne	.+2      	; 0x1060 <__vector_14+0x54a>
    105e:	47 c0       	rjmp	.+142    	; 0x10ee <__vector_14+0x5d8>
    1060:	52 c0       	rjmp	.+164    	; 0x1106 <__vector_14+0x5f0>
    1062:	8b 30       	cpi	r24, 0x0B	; 11
    1064:	0c f0       	brlt	.+2      	; 0x1068 <__vector_14+0x552>
    1066:	4f c0       	rjmp	.+158    	; 0x1106 <__vector_14+0x5f0>
				case BIT_3_INDEX:
				case BIT_4_INDEX:
				case BIT_5_INDEX:
				case BIT_6_INDEX:
				case BIT_7_INDEX:
					if (_char_to_send & 1) {
    1068:	80 91 2c 05 	lds	r24, 0x052C
    106c:	80 ff       	sbrs	r24, 0
    106e:	0d c0       	rjmp	.+26     	; 0x108a <__vector_14+0x574>
						PORTB |= _BV(_data_pin_port_b);
    1070:	25 b1       	in	r18, 0x05	; 5
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	00 90 26 05 	lds	r0, 0x0526
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <__vector_14+0x56a>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <__vector_14+0x566>
    1084:	82 2b       	or	r24, r18
    1086:	85 b9       	out	0x05, r24	; 5
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <__vector_14+0x58e>
						} else {
						PORTB &= ~_BV(_data_pin_port_b);
    108a:	25 b1       	in	r18, 0x05	; 5
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	00 90 26 05 	lds	r0, 0x0526
    1094:	02 c0       	rjmp	.+4      	; 0x109a <__vector_14+0x584>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <__vector_14+0x580>
    109e:	80 95       	com	r24
    10a0:	82 23       	and	r24, r18
    10a2:	85 b9       	out	0x05, r24	; 5
					}
					_char_to_send >>= 1;
    10a4:	80 91 2c 05 	lds	r24, 0x052C
    10a8:	86 95       	lsr	r24
    10aa:	80 93 2c 05 	sts	0x052C, r24
					break;
    10ae:	2b c0       	rjmp	.+86     	; 0x1106 <__vector_14+0x5f0>
				case BIT_PARITY_INDEX:
					if (_char_to_send_parity & 1) {
    10b0:	80 91 2b 05 	lds	r24, 0x052B
    10b4:	80 ff       	sbrs	r24, 0
    10b6:	0e c0       	rjmp	.+28     	; 0x10d4 <__vector_14+0x5be>
						PORTB &= ~_BV(_data_pin_port_b);
    10b8:	25 b1       	in	r18, 0x05	; 5
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	00 90 26 05 	lds	r0, 0x0526
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <__vector_14+0x5b2>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <__vector_14+0x5ae>
    10cc:	80 95       	com	r24
    10ce:	82 23       	and	r24, r18
    10d0:	85 b9       	out	0x05, r24	; 5
    10d2:	19 c0       	rjmp	.+50     	; 0x1106 <__vector_14+0x5f0>
						} else {
						PORTB |= _BV(_data_pin_port_b);
    10d4:	25 b1       	in	r18, 0x05	; 5
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	00 90 26 05 	lds	r0, 0x0526
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <__vector_14+0x5ce>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <__vector_14+0x5ca>
    10e8:	82 2b       	or	r24, r18
    10ea:	85 b9       	out	0x05, r24	; 5
    10ec:	0c c0       	rjmp	.+24     	; 0x1106 <__vector_14+0x5f0>
					}
					break;
				case BIT_STOP_INDEX:
					PORTB |= _BV(_data_pin_port_b);
    10ee:	25 b1       	in	r18, 0x05	; 5
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	00 90 26 05 	lds	r0, 0x0526
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <__vector_14+0x5e8>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <__vector_14+0x5e4>
    1102:	82 2b       	or	r24, r18
    1104:	85 b9       	out	0x05, r24	; 5
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		_bit_index--;
    1106:	80 91 28 05 	lds	r24, 0x0528
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	80 93 28 05 	sts	0x0528, r24
	}
}
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <setup_ps2device>:
	_send_char_to_host(PS2DEVICE_BAT_OK);
	debug_log("<BAT_OK\r\n");
}

void setup_ps2device(uint8_t clock_pin_port_b, uint8_t data_pin_port_b) {
	_clock_pin_port_b = clock_pin_port_b;
    1136:	80 93 27 05 	sts	0x0527, r24
	_data_pin_port_b = data_pin_port_b;
    113a:	60 93 26 05 	sts	0x0526, r22
	_reset_state();
    113e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_reset_state>
    1142:	08 95       	ret

00001144 <do_ps2device_work>:
}

void do_ps2device_work() {
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
				debug_log(">TypemR n\r\n");
				_send_char_to_host(PS2DEVICE_CMD_ACK);
				debug_log("<ACK\r\n");
				continue;
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    1148:	c1 e0       	ldi	r28, 0x01	; 1
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    114a:	ee c0       	rjmp	.+476    	; 0x1328 <do_ps2device_work+0x1e4>
	_recv_buf_len=0;
	sei();
}

static void _clear_send_buf() {
	cli();
    114c:	f8 94       	cli
	_send_buf_head=0;
    114e:	10 92 32 05 	sts	0x0532, r1
	_send_buf_len=0;
    1152:	10 92 31 05 	sts	0x0531, r1
	sei();
    1156:	78 94       	sei
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
		_clear_send_buf();
		if (_recv_buf_overflow) {
    1158:	80 91 33 05 	lds	r24, 0x0533
    115c:	88 23       	and	r24, r24
    115e:	31 f0       	breq	.+12     	; 0x116c <do_ps2device_work+0x28>
			debug_log("_recv_buf oflw\r\n");
    1160:	8a e9       	ldi	r24, 0x9A	; 154
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			_recv_buf_overflow = false;
    1168:	10 92 33 05 	sts	0x0533, r1
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static char _get_char_from_rcv_buf()
{
	cli();
    116c:	f8 94       	cli
	if (_recv_buf_len == 0) {
    116e:	80 91 34 05 	lds	r24, 0x0534
    1172:	81 11       	cpse	r24, r1
    1174:	03 c0       	rjmp	.+6      	; 0x117c <do_ps2device_work+0x38>
		sei();
    1176:	78 94       	sei
		return 0x0;
    1178:	e0 e0       	ldi	r30, 0x00	; 0
    117a:	19 c0       	rjmp	.+50     	; 0x11ae <do_ps2device_work+0x6a>
	}
	char c = _recv_buf[_recv_buf_head];
    117c:	e0 91 35 05 	lds	r30, 0x0535
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ea 5b       	subi	r30, 0xBA	; 186
    1184:	fa 4f       	sbci	r31, 0xFA	; 250
    1186:	80 81       	ld	r24, Z
	_recv_buf_head++;
    1188:	90 91 35 05 	lds	r25, 0x0535
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	90 93 35 05 	sts	0x0535, r25
	_recv_buf_len--;
    1192:	90 91 34 05 	lds	r25, 0x0534
    1196:	91 50       	subi	r25, 0x01	; 1
    1198:	90 93 34 05 	sts	0x0534, r25
	if (_recv_buf_head >= RCV_BUF_SIZE)
    119c:	90 91 35 05 	lds	r25, 0x0535
    11a0:	91 11       	cpse	r25, r1
		_recv_buf_head = 0;
    11a2:	10 92 35 05 	sts	0x0535, r1
	sei();
    11a6:	78 94       	sei
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    11a8:	80 3c       	cpi	r24, 0xC0	; 192
    11aa:	f0 f4       	brcc	.+60     	; 0x11e8 <do_ps2device_work+0xa4>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    11ac:	e8 2f       	mov	r30, r24
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    11ae:	80 91 2f 05 	lds	r24, 0x052F
    11b2:	81 11       	cpse	r24, r1
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <do_ps2device_work+0x7a>
    11b6:	80 91 30 05 	lds	r24, 0x0530
    11ba:	88 23       	and	r24, r24
    11bc:	b1 f0       	breq	.+44     	; 0x11ea <do_ps2device_work+0xa6>
			if (_next_byte_typematic_rate) {
    11be:	80 91 30 05 	lds	r24, 0x0530
    11c2:	88 23       	and	r24, r24
    11c4:	21 f0       	breq	.+8      	; 0x11ce <do_ps2device_work+0x8a>
				debug_log(">TypemR v\r\n");
    11c6:	8b ea       	ldi	r24, 0xAB	; 171
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			}
			if (_next_byte_led) {
    11ce:	80 91 2f 05 	lds	r24, 0x052F
    11d2:	88 23       	and	r24, r24
    11d4:	21 f0       	breq	.+8      	; 0x11de <do_ps2device_work+0x9a>
				debug_log(">LED v\r\n");
    11d6:	87 eb       	ldi	r24, 0xB7	; 183
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
			}
			_next_byte_led = _next_byte_typematic_rate = false;
    11de:	10 92 30 05 	sts	0x0530, r1
    11e2:	10 92 2f 05 	sts	0x052F, r1
			return;
    11e6:	d3 c0       	rjmp	.+422    	; 0x138e <do_ps2device_work+0x24a>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    11e8:	e8 2f       	mov	r30, r24
				debug_log(">LED v\r\n");
			}
			_next_byte_led = _next_byte_typematic_rate = false;
			return;
		}
		switch (c) {
    11ea:	8e 2f       	mov	r24, r30
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	ed 5e       	subi	r30, 0xED	; 237
    11f2:	f1 09       	sbc	r31, r1
    11f4:	e3 31       	cpi	r30, 0x13	; 19
    11f6:	f1 05       	cpc	r31, r1
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <do_ps2device_work+0xb8>
    11fa:	92 c0       	rjmp	.+292    	; 0x1320 <do_ps2device_work+0x1dc>
    11fc:	e3 5c       	subi	r30, 0xC3	; 195
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__tablejump2__>
			case PS2HOST_CMD_ECHO:
				debug_log(">Echo\r\n");
    1204:	80 ec       	ldi	r24, 0xC0	; 192
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ECHO);
    120c:	8e ee       	ldi	r24, 0xEE	; 238
    120e:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<Echo\r\n");
    1212:	88 ec       	ldi	r24, 0xC8	; 200
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    121a:	b9 c0       	rjmp	.+370    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_RESEND:
				//we don't care - so we send just an ack
				debug_log(">Resend\r\n");
    121c:	80 ed       	ldi	r24, 0xD0	; 208
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1224:	8a ef       	ldi	r24, 0xFA	; 250
    1226:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    122a:	8a ed       	ldi	r24, 0xDA	; 218
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				continue;
    1232:	7a c0       	rjmp	.+244    	; 0x1328 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_RESET:
				debug_log(">Reset\r\n");
    1234:	81 ee       	ldi	r24, 0xE1	; 225
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    123c:	8a ef       	ldi	r24, 0xFA	; 250
    123e:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    1242:	8a ed       	ldi	r24, 0xDA	; 218
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_reset_state();
    124a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_reset_state>
				return;
    124e:	9f c0       	rjmp	.+318    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC:
				// this is generally not the correct handling but we dont care.
				debug_log(">Set m/b/t\r\n");
    1250:	8a ee       	ldi	r24, 0xEA	; 234
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1258:	8a ef       	ldi	r24, 0xFA	; 250
    125a:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    125e:	8a ed       	ldi	r24, 0xDA	; 218
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    1266:	93 c0       	rjmp	.+294    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_TYPEMATIC_RATE_DELAY:
				_next_byte_typematic_rate = true;
    1268:	c0 93 30 05 	sts	0x0530, r28
				debug_log(">TypemR n\r\n");
    126c:	87 ef       	ldi	r24, 0xF7	; 247
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1274:	8a ef       	ldi	r24, 0xFA	; 250
    1276:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    127a:	8a ed       	ldi	r24, 0xDA	; 218
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				continue;
    1282:	52 c0       	rjmp	.+164    	; 0x1328 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    1284:	c0 93 2f 05 	sts	0x052F, r28
				debug_log(">LED n\r\n");
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	92 e0       	ldi	r25, 0x02	; 2
    128c:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1290:	8a ef       	ldi	r24, 0xFA	; 250
    1292:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    1296:	8a ed       	ldi	r24, 0xDA	; 218
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				continue;
    129e:	44 c0       	rjmp	.+136    	; 0x1328 <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_READ_ID:
				debug_log(">SendId\r\n");
    12a0:	8c e0       	ldi	r24, 0x0C	; 12
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_ID_1);
    12a8:	8b ea       	ldi	r24, 0xAB	; 171
    12aa:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ID1\r\n");
    12ae:	86 e1       	ldi	r24, 0x16	; 22
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_ID_2);
    12b6:	83 e8       	ldi	r24, 0x83	; 131
    12b8:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ID2\r\n");
    12bc:	8d e1       	ldi	r24, 0x1D	; 29
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    12c4:	64 c0       	rjmp	.+200    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_DEFAULT:
				debug_log(">Default\r\n");
    12c6:	84 e2       	ldi	r24, 0x24	; 36
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    12ce:	8a ef       	ldi	r24, 0xFA	; 250
    12d0:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    12d4:	8a ed       	ldi	r24, 0xDA	; 218
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    12dc:	58 c0       	rjmp	.+176    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_DISABLE:
				_ps2dev_enabled = false;
    12de:	10 92 01 01 	sts	0x0101, r1
				_next_byte_led = _next_byte_typematic_rate = false;
    12e2:	10 92 30 05 	sts	0x0530, r1
    12e6:	10 92 2f 05 	sts	0x052F, r1
				debug_log(">Disable\r\n");
    12ea:	8f e2       	ldi	r24, 0x2F	; 47
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    12f2:	8a ef       	ldi	r24, 0xFA	; 250
    12f4:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    12f8:	8a ed       	ldi	r24, 0xDA	; 218
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    1300:	46 c0       	rjmp	.+140    	; 0x138e <do_ps2device_work+0x24a>
			case PS2HOST_CMD_ENABLE:
				_ps2dev_enabled = true;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 01 01 	sts	0x0101, r24
				debug_log(">Enable\r\n");
    1308:	8a e3       	ldi	r24, 0x3A	; 58
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1310:	8a ef       	ldi	r24, 0xFA	; 250
    1312:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
				debug_log("<ACK\r\n");
    1316:	8a ed       	ldi	r24, 0xDA	; 218
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
				return;
    131e:	37 c0       	rjmp	.+110    	; 0x138e <do_ps2device_work+0x24a>
			default:
				debug_log(">???\r\n");
    1320:	84 e4       	ldi	r24, 0x44	; 68
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 1e 02 	call	0x43c	; 0x43c <debug_log>
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    1328:	80 91 34 05 	lds	r24, 0x0534
    132c:	81 11       	cpse	r24, r1
    132e:	0e cf       	rjmp	.-484    	; 0x114c <do_ps2device_work+0x8>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    1330:	d0 e0       	ldi	r29, 0x00	; 0
    1332:	cd 2f       	mov	r28, r29
    1334:	28 c0       	rjmp	.+80     	; 0x1386 <do_ps2device_work+0x242>
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
    1336:	80 91 31 05 	lds	r24, 0x0531
    133a:	88 23       	and	r24, r24
    133c:	39 f0       	breq	.+14     	; 0x134c <do_ps2device_work+0x208>
		return 0x0;
	}
	return _send_buf[_send_buf_head];
    133e:	e0 91 32 05 	lds	r30, 0x0532
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	ea 5c       	subi	r30, 0xCA	; 202
    1346:	fa 4f       	sbci	r31, 0xFA	; 250
    1348:	80 81       	ld	r24, Z
    134a:	01 c0       	rjmp	.+2      	; 0x134e <do_ps2device_work+0x20a>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    134c:	8c 2f       	mov	r24, r28
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
    134e:	0e 94 b7 03 	call	0x76e	; 0x76e <_send_char_to_host>
    1352:	81 11       	cpse	r24, r1
    1354:	18 c0       	rjmp	.+48     	; 0x1386 <do_ps2device_work+0x242>
	}
	return _send_buf[_send_buf_head];
}

static void _remove_char_from_snd_buf() {
	cli();
    1356:	f8 94       	cli
	if (_send_buf_len == 0) { // just to make sure...
    1358:	80 91 31 05 	lds	r24, 0x0531
    135c:	81 11       	cpse	r24, r1
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <do_ps2device_work+0x220>
		sei();
    1360:	78 94       	sei
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <do_ps2device_work+0x242>
		return;
	}
	_send_buf_head++;
    1364:	80 91 32 05 	lds	r24, 0x0532
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 32 05 	sts	0x0532, r24
	_send_buf_len--;
    136e:	80 91 31 05 	lds	r24, 0x0531
    1372:	81 50       	subi	r24, 0x01	; 1
    1374:	80 93 31 05 	sts	0x0531, r24
	if (_send_buf_head >= SND_BUF_SIZE) {
    1378:	80 91 32 05 	lds	r24, 0x0532
    137c:	80 31       	cpi	r24, 0x10	; 16
    137e:	10 f0       	brcs	.+4      	; 0x1384 <do_ps2device_work+0x240>
		_send_buf_head = 0;
    1380:	d0 93 32 05 	sts	0x0532, r29
	}
	sei();
    1384:	78 94       	sei
			default:
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
    1386:	80 91 31 05 	lds	r24, 0x0531
    138a:	81 11       	cpse	r24, r1
    138c:	d4 cf       	rjmp	.-88     	; 0x1336 <do_ps2device_work+0x1f2>
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
			_remove_char_from_snd_buf();
		}
	}
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <add_char_to_send_buf>:
	return c;
}

// returning a 0 means buffer is full
static bool _put_char_into_snd_buf(char c) {
	cli();
    1394:	f8 94       	cli
	if (_send_buf_len >= SND_BUF_SIZE) {
    1396:	90 91 31 05 	lds	r25, 0x0531
    139a:	90 31       	cpi	r25, 0x10	; 16
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <add_char_to_send_buf+0x10>
		sei();
    139e:	78 94       	sei
		return false;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret
	}
	uint8_t i = _send_buf_head + _send_buf_len;
    13a4:	90 91 32 05 	lds	r25, 0x0532
    13a8:	e0 91 31 05 	lds	r30, 0x0531
    13ac:	e9 0f       	add	r30, r25
	if (i >= SND_BUF_SIZE)
    13ae:	e0 31       	cpi	r30, 0x10	; 16
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <add_char_to_send_buf+0x20>
		i -= SND_BUF_SIZE;
    13b2:	e0 51       	subi	r30, 0x10	; 16
	_send_buf[i] = c;
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	ea 5c       	subi	r30, 0xCA	; 202
    13b8:	fa 4f       	sbci	r31, 0xFA	; 250
    13ba:	80 83       	st	Z, r24
	_send_buf_len++;
    13bc:	80 91 31 05 	lds	r24, 0x0531
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 31 05 	sts	0x0531, r24
	sei();
    13c6:	78 94       	sei
	return true;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
	}
}

bool add_char_to_send_buf(char c) {
	return _put_char_into_snd_buf(c);
    13ca:	08 95       	ret

000013cc <__mulsi3>:
    13cc:	db 01       	movw	r26, r22
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__muluhisi3>
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	a2 9f       	mul	r26, r18
    13dc:	80 0d       	add	r24, r0
    13de:	91 1d       	adc	r25, r1
    13e0:	a3 9f       	mul	r26, r19
    13e2:	90 0d       	add	r25, r0
    13e4:	b2 9f       	mul	r27, r18
    13e6:	90 0d       	add	r25, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	08 95       	ret

000013ec <__tablejump2__>:
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	05 90       	lpm	r0, Z+
    13f2:	f4 91       	lpm	r31, Z
    13f4:	e0 2d       	mov	r30, r0
    13f6:	09 94       	ijmp

000013f8 <__muluhisi3>:
    13f8:	0e 94 07 0a 	call	0x140e	; 0x140e <__umulhisi3>
    13fc:	a5 9f       	mul	r26, r21
    13fe:	90 0d       	add	r25, r0
    1400:	b4 9f       	mul	r27, r20
    1402:	90 0d       	add	r25, r0
    1404:	a4 9f       	mul	r26, r20
    1406:	80 0d       	add	r24, r0
    1408:	91 1d       	adc	r25, r1
    140a:	11 24       	eor	r1, r1
    140c:	08 95       	ret

0000140e <__umulhisi3>:
    140e:	a2 9f       	mul	r26, r18
    1410:	b0 01       	movw	r22, r0
    1412:	b3 9f       	mul	r27, r19
    1414:	c0 01       	movw	r24, r0
    1416:	a3 9f       	mul	r26, r19
    1418:	70 0d       	add	r23, r0
    141a:	81 1d       	adc	r24, r1
    141c:	11 24       	eor	r1, r1
    141e:	91 1d       	adc	r25, r1
    1420:	b2 9f       	mul	r27, r18
    1422:	70 0d       	add	r23, r0
    1424:	81 1d       	adc	r24, r1
    1426:	11 24       	eor	r1, r1
    1428:	91 1d       	adc	r25, r1
    142a:	08 95       	ret

0000142c <sprintf>:
    142c:	ae e0       	ldi	r26, 0x0E	; 14
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ec e1       	ldi	r30, 0x1C	; 28
    1432:	fa e0       	ldi	r31, 0x0A	; 10
    1434:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__prologue_saves__+0x1c>
    1438:	0d 89       	ldd	r16, Y+21	; 0x15
    143a:	1e 89       	ldd	r17, Y+22	; 0x16
    143c:	86 e0       	ldi	r24, 0x06	; 6
    143e:	8c 83       	std	Y+4, r24	; 0x04
    1440:	1a 83       	std	Y+2, r17	; 0x02
    1442:	09 83       	std	Y+1, r16	; 0x01
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	9f e7       	ldi	r25, 0x7F	; 127
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	ae 01       	movw	r20, r28
    144e:	47 5e       	subi	r20, 0xE7	; 231
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	6f 89       	ldd	r22, Y+23	; 0x17
    1454:	78 8d       	ldd	r23, Y+24	; 0x18
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 39 0a 	call	0x1472	; 0x1472 <vfprintf>
    145e:	2f 81       	ldd	r18, Y+7	; 0x07
    1460:	38 85       	ldd	r19, Y+8	; 0x08
    1462:	f8 01       	movw	r30, r16
    1464:	e2 0f       	add	r30, r18
    1466:	f3 1f       	adc	r31, r19
    1468:	10 82       	st	Z, r1
    146a:	2e 96       	adiw	r28, 0x0e	; 14
    146c:	e4 e0       	ldi	r30, 0x04	; 4
    146e:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__epilogue_restores__+0x1c>

00001472 <vfprintf>:
    1472:	ac e0       	ldi	r26, 0x0C	; 12
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ef e3       	ldi	r30, 0x3F	; 63
    1478:	fa e0       	ldi	r31, 0x0A	; 10
    147a:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__prologue_saves__>
    147e:	7c 01       	movw	r14, r24
    1480:	6b 01       	movw	r12, r22
    1482:	8a 01       	movw	r16, r20
    1484:	fc 01       	movw	r30, r24
    1486:	17 82       	std	Z+7, r1	; 0x07
    1488:	16 82       	std	Z+6, r1	; 0x06
    148a:	83 81       	ldd	r24, Z+3	; 0x03
    148c:	81 ff       	sbrs	r24, 1
    148e:	bd c1       	rjmp	.+890    	; 0x180a <vfprintf+0x398>
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	4c 01       	movw	r8, r24
    1496:	f7 01       	movw	r30, r14
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	f6 01       	movw	r30, r12
    149c:	93 fd       	sbrc	r25, 3
    149e:	85 91       	lpm	r24, Z+
    14a0:	93 ff       	sbrs	r25, 3
    14a2:	81 91       	ld	r24, Z+
    14a4:	6f 01       	movw	r12, r30
    14a6:	88 23       	and	r24, r24
    14a8:	09 f4       	brne	.+2      	; 0x14ac <vfprintf+0x3a>
    14aa:	ab c1       	rjmp	.+854    	; 0x1802 <vfprintf+0x390>
    14ac:	85 32       	cpi	r24, 0x25	; 37
    14ae:	39 f4       	brne	.+14     	; 0x14be <vfprintf+0x4c>
    14b0:	93 fd       	sbrc	r25, 3
    14b2:	85 91       	lpm	r24, Z+
    14b4:	93 ff       	sbrs	r25, 3
    14b6:	81 91       	ld	r24, Z+
    14b8:	6f 01       	movw	r12, r30
    14ba:	85 32       	cpi	r24, 0x25	; 37
    14bc:	29 f4       	brne	.+10     	; 0x14c8 <vfprintf+0x56>
    14be:	b7 01       	movw	r22, r14
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    14c6:	e7 cf       	rjmp	.-50     	; 0x1496 <vfprintf+0x24>
    14c8:	51 2c       	mov	r5, r1
    14ca:	31 2c       	mov	r3, r1
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	20 32       	cpi	r18, 0x20	; 32
    14d0:	a0 f4       	brcc	.+40     	; 0x14fa <vfprintf+0x88>
    14d2:	8b 32       	cpi	r24, 0x2B	; 43
    14d4:	69 f0       	breq	.+26     	; 0x14f0 <vfprintf+0x7e>
    14d6:	30 f4       	brcc	.+12     	; 0x14e4 <vfprintf+0x72>
    14d8:	80 32       	cpi	r24, 0x20	; 32
    14da:	59 f0       	breq	.+22     	; 0x14f2 <vfprintf+0x80>
    14dc:	83 32       	cpi	r24, 0x23	; 35
    14de:	69 f4       	brne	.+26     	; 0x14fa <vfprintf+0x88>
    14e0:	20 61       	ori	r18, 0x10	; 16
    14e2:	2c c0       	rjmp	.+88     	; 0x153c <vfprintf+0xca>
    14e4:	8d 32       	cpi	r24, 0x2D	; 45
    14e6:	39 f0       	breq	.+14     	; 0x14f6 <vfprintf+0x84>
    14e8:	80 33       	cpi	r24, 0x30	; 48
    14ea:	39 f4       	brne	.+14     	; 0x14fa <vfprintf+0x88>
    14ec:	21 60       	ori	r18, 0x01	; 1
    14ee:	26 c0       	rjmp	.+76     	; 0x153c <vfprintf+0xca>
    14f0:	22 60       	ori	r18, 0x02	; 2
    14f2:	24 60       	ori	r18, 0x04	; 4
    14f4:	23 c0       	rjmp	.+70     	; 0x153c <vfprintf+0xca>
    14f6:	28 60       	ori	r18, 0x08	; 8
    14f8:	21 c0       	rjmp	.+66     	; 0x153c <vfprintf+0xca>
    14fa:	27 fd       	sbrc	r18, 7
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <vfprintf+0xda>
    14fe:	30 ed       	ldi	r19, 0xD0	; 208
    1500:	38 0f       	add	r19, r24
    1502:	3a 30       	cpi	r19, 0x0A	; 10
    1504:	78 f4       	brcc	.+30     	; 0x1524 <vfprintf+0xb2>
    1506:	26 ff       	sbrs	r18, 6
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0xa4>
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	5f 9e       	mul	r5, r31
    150e:	30 0d       	add	r19, r0
    1510:	11 24       	eor	r1, r1
    1512:	53 2e       	mov	r5, r19
    1514:	13 c0       	rjmp	.+38     	; 0x153c <vfprintf+0xca>
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	38 9e       	mul	r3, r24
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	33 2e       	mov	r3, r19
    1520:	20 62       	ori	r18, 0x20	; 32
    1522:	0c c0       	rjmp	.+24     	; 0x153c <vfprintf+0xca>
    1524:	8e 32       	cpi	r24, 0x2E	; 46
    1526:	21 f4       	brne	.+8      	; 0x1530 <vfprintf+0xbe>
    1528:	26 fd       	sbrc	r18, 6
    152a:	6b c1       	rjmp	.+726    	; 0x1802 <vfprintf+0x390>
    152c:	20 64       	ori	r18, 0x40	; 64
    152e:	06 c0       	rjmp	.+12     	; 0x153c <vfprintf+0xca>
    1530:	8c 36       	cpi	r24, 0x6C	; 108
    1532:	11 f4       	brne	.+4      	; 0x1538 <vfprintf+0xc6>
    1534:	20 68       	ori	r18, 0x80	; 128
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0xca>
    1538:	88 36       	cpi	r24, 0x68	; 104
    153a:	41 f4       	brne	.+16     	; 0x154c <vfprintf+0xda>
    153c:	f6 01       	movw	r30, r12
    153e:	93 fd       	sbrc	r25, 3
    1540:	85 91       	lpm	r24, Z+
    1542:	93 ff       	sbrs	r25, 3
    1544:	81 91       	ld	r24, Z+
    1546:	6f 01       	movw	r12, r30
    1548:	81 11       	cpse	r24, r1
    154a:	c1 cf       	rjmp	.-126    	; 0x14ce <vfprintf+0x5c>
    154c:	98 2f       	mov	r25, r24
    154e:	9f 7d       	andi	r25, 0xDF	; 223
    1550:	95 54       	subi	r25, 0x45	; 69
    1552:	93 30       	cpi	r25, 0x03	; 3
    1554:	28 f4       	brcc	.+10     	; 0x1560 <vfprintf+0xee>
    1556:	0c 5f       	subi	r16, 0xFC	; 252
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	ff e3       	ldi	r31, 0x3F	; 63
    155c:	f9 83       	std	Y+1, r31	; 0x01
    155e:	0d c0       	rjmp	.+26     	; 0x157a <vfprintf+0x108>
    1560:	83 36       	cpi	r24, 0x63	; 99
    1562:	31 f0       	breq	.+12     	; 0x1570 <vfprintf+0xfe>
    1564:	83 37       	cpi	r24, 0x73	; 115
    1566:	71 f0       	breq	.+28     	; 0x1584 <vfprintf+0x112>
    1568:	83 35       	cpi	r24, 0x53	; 83
    156a:	09 f0       	breq	.+2      	; 0x156e <vfprintf+0xfc>
    156c:	5b c0       	rjmp	.+182    	; 0x1624 <vfprintf+0x1b2>
    156e:	22 c0       	rjmp	.+68     	; 0x15b4 <vfprintf+0x142>
    1570:	f8 01       	movw	r30, r16
    1572:	80 81       	ld	r24, Z
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	0e 5f       	subi	r16, 0xFE	; 254
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	44 24       	eor	r4, r4
    157c:	43 94       	inc	r4
    157e:	51 2c       	mov	r5, r1
    1580:	54 01       	movw	r10, r8
    1582:	15 c0       	rjmp	.+42     	; 0x15ae <vfprintf+0x13c>
    1584:	38 01       	movw	r6, r16
    1586:	f2 e0       	ldi	r31, 0x02	; 2
    1588:	6f 0e       	add	r6, r31
    158a:	71 1c       	adc	r7, r1
    158c:	f8 01       	movw	r30, r16
    158e:	a0 80       	ld	r10, Z
    1590:	b1 80       	ldd	r11, Z+1	; 0x01
    1592:	26 ff       	sbrs	r18, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x12a>
    1596:	65 2d       	mov	r22, r5
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x12e>
    159c:	6f ef       	ldi	r22, 0xFF	; 255
    159e:	7f ef       	ldi	r23, 0xFF	; 255
    15a0:	c5 01       	movw	r24, r10
    15a2:	2c 87       	std	Y+12, r18	; 0x0c
    15a4:	0e 94 16 0c 	call	0x182c	; 0x182c <strnlen>
    15a8:	2c 01       	movw	r4, r24
    15aa:	83 01       	movw	r16, r6
    15ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ae:	2f 77       	andi	r18, 0x7F	; 127
    15b0:	22 2e       	mov	r2, r18
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <vfprintf+0x170>
    15b4:	38 01       	movw	r6, r16
    15b6:	f2 e0       	ldi	r31, 0x02	; 2
    15b8:	6f 0e       	add	r6, r31
    15ba:	71 1c       	adc	r7, r1
    15bc:	f8 01       	movw	r30, r16
    15be:	a0 80       	ld	r10, Z
    15c0:	b1 80       	ldd	r11, Z+1	; 0x01
    15c2:	26 ff       	sbrs	r18, 6
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <vfprintf+0x15a>
    15c6:	65 2d       	mov	r22, r5
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <vfprintf+0x15e>
    15cc:	6f ef       	ldi	r22, 0xFF	; 255
    15ce:	7f ef       	ldi	r23, 0xFF	; 255
    15d0:	c5 01       	movw	r24, r10
    15d2:	2c 87       	std	Y+12, r18	; 0x0c
    15d4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <strnlen_P>
    15d8:	2c 01       	movw	r4, r24
    15da:	2c 85       	ldd	r18, Y+12	; 0x0c
    15dc:	20 68       	ori	r18, 0x80	; 128
    15de:	22 2e       	mov	r2, r18
    15e0:	83 01       	movw	r16, r6
    15e2:	23 fc       	sbrc	r2, 3
    15e4:	1b c0       	rjmp	.+54     	; 0x161c <vfprintf+0x1aa>
    15e6:	83 2d       	mov	r24, r3
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	48 16       	cp	r4, r24
    15ec:	59 06       	cpc	r5, r25
    15ee:	b0 f4       	brcc	.+44     	; 0x161c <vfprintf+0x1aa>
    15f0:	b7 01       	movw	r22, r14
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    15fa:	3a 94       	dec	r3
    15fc:	f4 cf       	rjmp	.-24     	; 0x15e6 <vfprintf+0x174>
    15fe:	f5 01       	movw	r30, r10
    1600:	27 fc       	sbrc	r2, 7
    1602:	85 91       	lpm	r24, Z+
    1604:	27 fe       	sbrs	r2, 7
    1606:	81 91       	ld	r24, Z+
    1608:	5f 01       	movw	r10, r30
    160a:	b7 01       	movw	r22, r14
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    1612:	31 10       	cpse	r3, r1
    1614:	3a 94       	dec	r3
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	4f 1a       	sub	r4, r31
    161a:	51 08       	sbc	r5, r1
    161c:	41 14       	cp	r4, r1
    161e:	51 04       	cpc	r5, r1
    1620:	71 f7       	brne	.-36     	; 0x15fe <vfprintf+0x18c>
    1622:	e5 c0       	rjmp	.+458    	; 0x17ee <vfprintf+0x37c>
    1624:	84 36       	cpi	r24, 0x64	; 100
    1626:	11 f0       	breq	.+4      	; 0x162c <vfprintf+0x1ba>
    1628:	89 36       	cpi	r24, 0x69	; 105
    162a:	39 f5       	brne	.+78     	; 0x167a <vfprintf+0x208>
    162c:	f8 01       	movw	r30, r16
    162e:	27 ff       	sbrs	r18, 7
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <vfprintf+0x1ce>
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	0c 5f       	subi	r16, 0xFC	; 252
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <vfprintf+0x1de>
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	07 2e       	mov	r0, r23
    1646:	00 0c       	add	r0, r0
    1648:	88 0b       	sbc	r24, r24
    164a:	99 0b       	sbc	r25, r25
    164c:	0e 5f       	subi	r16, 0xFE	; 254
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	2f 76       	andi	r18, 0x6F	; 111
    1652:	72 2e       	mov	r7, r18
    1654:	97 ff       	sbrs	r25, 7
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x1f8>
    1658:	90 95       	com	r25
    165a:	80 95       	com	r24
    165c:	70 95       	com	r23
    165e:	61 95       	neg	r22
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	8f 4f       	sbci	r24, 0xFF	; 255
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	20 68       	ori	r18, 0x80	; 128
    1668:	72 2e       	mov	r7, r18
    166a:	2a e0       	ldi	r18, 0x0A	; 10
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	a4 01       	movw	r20, r8
    1670:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__ultoa_invert>
    1674:	a8 2e       	mov	r10, r24
    1676:	a8 18       	sub	r10, r8
    1678:	44 c0       	rjmp	.+136    	; 0x1702 <vfprintf+0x290>
    167a:	85 37       	cpi	r24, 0x75	; 117
    167c:	29 f4       	brne	.+10     	; 0x1688 <vfprintf+0x216>
    167e:	2f 7e       	andi	r18, 0xEF	; 239
    1680:	b2 2e       	mov	r11, r18
    1682:	2a e0       	ldi	r18, 0x0A	; 10
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	25 c0       	rjmp	.+74     	; 0x16d2 <vfprintf+0x260>
    1688:	f2 2f       	mov	r31, r18
    168a:	f9 7f       	andi	r31, 0xF9	; 249
    168c:	bf 2e       	mov	r11, r31
    168e:	8f 36       	cpi	r24, 0x6F	; 111
    1690:	c1 f0       	breq	.+48     	; 0x16c2 <vfprintf+0x250>
    1692:	18 f4       	brcc	.+6      	; 0x169a <vfprintf+0x228>
    1694:	88 35       	cpi	r24, 0x58	; 88
    1696:	79 f0       	breq	.+30     	; 0x16b6 <vfprintf+0x244>
    1698:	b4 c0       	rjmp	.+360    	; 0x1802 <vfprintf+0x390>
    169a:	80 37       	cpi	r24, 0x70	; 112
    169c:	19 f0       	breq	.+6      	; 0x16a4 <vfprintf+0x232>
    169e:	88 37       	cpi	r24, 0x78	; 120
    16a0:	21 f0       	breq	.+8      	; 0x16aa <vfprintf+0x238>
    16a2:	af c0       	rjmp	.+350    	; 0x1802 <vfprintf+0x390>
    16a4:	2f 2f       	mov	r18, r31
    16a6:	20 61       	ori	r18, 0x10	; 16
    16a8:	b2 2e       	mov	r11, r18
    16aa:	b4 fe       	sbrs	r11, 4
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <vfprintf+0x256>
    16ae:	8b 2d       	mov	r24, r11
    16b0:	84 60       	ori	r24, 0x04	; 4
    16b2:	b8 2e       	mov	r11, r24
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x256>
    16b6:	24 ff       	sbrs	r18, 4
    16b8:	0a c0       	rjmp	.+20     	; 0x16ce <vfprintf+0x25c>
    16ba:	9f 2f       	mov	r25, r31
    16bc:	96 60       	ori	r25, 0x06	; 6
    16be:	b9 2e       	mov	r11, r25
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x25c>
    16c2:	28 e0       	ldi	r18, 0x08	; 8
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <vfprintf+0x260>
    16c8:	20 e1       	ldi	r18, 0x10	; 16
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0x260>
    16ce:	20 e1       	ldi	r18, 0x10	; 16
    16d0:	32 e0       	ldi	r19, 0x02	; 2
    16d2:	f8 01       	movw	r30, r16
    16d4:	b7 fe       	sbrs	r11, 7
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <vfprintf+0x274>
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	0c 5f       	subi	r16, 0xFC	; 252
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x280>
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 5f       	subi	r16, 0xFE	; 254
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	a4 01       	movw	r20, r8
    16f4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__ultoa_invert>
    16f8:	a8 2e       	mov	r10, r24
    16fa:	a8 18       	sub	r10, r8
    16fc:	fb 2d       	mov	r31, r11
    16fe:	ff 77       	andi	r31, 0x7F	; 127
    1700:	7f 2e       	mov	r7, r31
    1702:	76 fe       	sbrs	r7, 6
    1704:	0b c0       	rjmp	.+22     	; 0x171c <vfprintf+0x2aa>
    1706:	37 2d       	mov	r19, r7
    1708:	3e 7f       	andi	r19, 0xFE	; 254
    170a:	a5 14       	cp	r10, r5
    170c:	50 f4       	brcc	.+20     	; 0x1722 <vfprintf+0x2b0>
    170e:	74 fe       	sbrs	r7, 4
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <vfprintf+0x2b4>
    1712:	72 fc       	sbrc	r7, 2
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <vfprintf+0x2b4>
    1716:	37 2d       	mov	r19, r7
    1718:	3e 7e       	andi	r19, 0xEE	; 238
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <vfprintf+0x2b4>
    171c:	ba 2c       	mov	r11, r10
    171e:	37 2d       	mov	r19, r7
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <vfprintf+0x2b6>
    1722:	ba 2c       	mov	r11, r10
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <vfprintf+0x2b6>
    1726:	b5 2c       	mov	r11, r5
    1728:	34 ff       	sbrs	r19, 4
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <vfprintf+0x2d4>
    172c:	fe 01       	movw	r30, r28
    172e:	ea 0d       	add	r30, r10
    1730:	f1 1d       	adc	r31, r1
    1732:	80 81       	ld	r24, Z
    1734:	80 33       	cpi	r24, 0x30	; 48
    1736:	11 f4       	brne	.+4      	; 0x173c <vfprintf+0x2ca>
    1738:	39 7e       	andi	r19, 0xE9	; 233
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x2dc>
    173c:	32 ff       	sbrs	r19, 2
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x2da>
    1740:	b3 94       	inc	r11
    1742:	b3 94       	inc	r11
    1744:	04 c0       	rjmp	.+8      	; 0x174e <vfprintf+0x2dc>
    1746:	83 2f       	mov	r24, r19
    1748:	86 78       	andi	r24, 0x86	; 134
    174a:	09 f0       	breq	.+2      	; 0x174e <vfprintf+0x2dc>
    174c:	b3 94       	inc	r11
    174e:	33 fd       	sbrc	r19, 3
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <vfprintf+0x306>
    1752:	30 ff       	sbrs	r19, 0
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x2f0>
    1756:	5a 2c       	mov	r5, r10
    1758:	b3 14       	cp	r11, r3
    175a:	18 f4       	brcc	.+6      	; 0x1762 <vfprintf+0x2f0>
    175c:	53 0c       	add	r5, r3
    175e:	5b 18       	sub	r5, r11
    1760:	b3 2c       	mov	r11, r3
    1762:	b3 14       	cp	r11, r3
    1764:	68 f4       	brcc	.+26     	; 0x1780 <vfprintf+0x30e>
    1766:	b7 01       	movw	r22, r14
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	3c 87       	std	Y+12, r19	; 0x0c
    176e:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    1772:	b3 94       	inc	r11
    1774:	3c 85       	ldd	r19, Y+12	; 0x0c
    1776:	f5 cf       	rjmp	.-22     	; 0x1762 <vfprintf+0x2f0>
    1778:	b3 14       	cp	r11, r3
    177a:	10 f4       	brcc	.+4      	; 0x1780 <vfprintf+0x30e>
    177c:	3b 18       	sub	r3, r11
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <vfprintf+0x310>
    1780:	31 2c       	mov	r3, r1
    1782:	34 ff       	sbrs	r19, 4
    1784:	12 c0       	rjmp	.+36     	; 0x17aa <vfprintf+0x338>
    1786:	b7 01       	movw	r22, r14
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	3c 87       	std	Y+12, r19	; 0x0c
    178e:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    1792:	3c 85       	ldd	r19, Y+12	; 0x0c
    1794:	32 ff       	sbrs	r19, 2
    1796:	17 c0       	rjmp	.+46     	; 0x17c6 <vfprintf+0x354>
    1798:	31 fd       	sbrc	r19, 1
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <vfprintf+0x330>
    179c:	88 e7       	ldi	r24, 0x78	; 120
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x334>
    17a2:	88 e5       	ldi	r24, 0x58	; 88
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	b7 01       	movw	r22, r14
    17a8:	0c c0       	rjmp	.+24     	; 0x17c2 <vfprintf+0x350>
    17aa:	83 2f       	mov	r24, r19
    17ac:	86 78       	andi	r24, 0x86	; 134
    17ae:	59 f0       	breq	.+22     	; 0x17c6 <vfprintf+0x354>
    17b0:	31 ff       	sbrs	r19, 1
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x346>
    17b4:	8b e2       	ldi	r24, 0x2B	; 43
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x348>
    17b8:	80 e2       	ldi	r24, 0x20	; 32
    17ba:	37 fd       	sbrc	r19, 7
    17bc:	8d e2       	ldi	r24, 0x2D	; 45
    17be:	b7 01       	movw	r22, r14
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    17c6:	a5 14       	cp	r10, r5
    17c8:	38 f4       	brcc	.+14     	; 0x17d8 <vfprintf+0x366>
    17ca:	b7 01       	movw	r22, r14
    17cc:	80 e3       	ldi	r24, 0x30	; 48
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    17d4:	5a 94       	dec	r5
    17d6:	f7 cf       	rjmp	.-18     	; 0x17c6 <vfprintf+0x354>
    17d8:	aa 94       	dec	r10
    17da:	f4 01       	movw	r30, r8
    17dc:	ea 0d       	add	r30, r10
    17de:	f1 1d       	adc	r31, r1
    17e0:	80 81       	ld	r24, Z
    17e2:	b7 01       	movw	r22, r14
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    17ea:	a1 10       	cpse	r10, r1
    17ec:	f5 cf       	rjmp	.-22     	; 0x17d8 <vfprintf+0x366>
    17ee:	33 20       	and	r3, r3
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <vfprintf+0x382>
    17f2:	51 ce       	rjmp	.-862    	; 0x1496 <vfprintf+0x24>
    17f4:	b7 01       	movw	r22, r14
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 21 0c 	call	0x1842	; 0x1842 <fputc>
    17fe:	3a 94       	dec	r3
    1800:	f6 cf       	rjmp	.-20     	; 0x17ee <vfprintf+0x37c>
    1802:	f7 01       	movw	r30, r14
    1804:	86 81       	ldd	r24, Z+6	; 0x06
    1806:	97 81       	ldd	r25, Z+7	; 0x07
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x39c>
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	2c 96       	adiw	r28, 0x0c	; 12
    1810:	e2 e1       	ldi	r30, 0x12	; 18
    1812:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__epilogue_restores__>

00001816 <strnlen_P>:
    1816:	fc 01       	movw	r30, r24
    1818:	05 90       	lpm	r0, Z+
    181a:	61 50       	subi	r22, 0x01	; 1
    181c:	70 40       	sbci	r23, 0x00	; 0
    181e:	01 10       	cpse	r0, r1
    1820:	d8 f7       	brcc	.-10     	; 0x1818 <strnlen_P+0x2>
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	8e 0f       	add	r24, r30
    1828:	9f 1f       	adc	r25, r31
    182a:	08 95       	ret

0000182c <strnlen>:
    182c:	fc 01       	movw	r30, r24
    182e:	61 50       	subi	r22, 0x01	; 1
    1830:	70 40       	sbci	r23, 0x00	; 0
    1832:	01 90       	ld	r0, Z+
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <fputc>:
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	fb 01       	movw	r30, r22
    184c:	23 81       	ldd	r18, Z+3	; 0x03
    184e:	21 fd       	sbrc	r18, 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <fputc+0x16>
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	28 c0       	rjmp	.+80     	; 0x18a8 <fputc+0x66>
    1858:	22 ff       	sbrs	r18, 2
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <fputc+0x46>
    185c:	46 81       	ldd	r20, Z+6	; 0x06
    185e:	57 81       	ldd	r21, Z+7	; 0x07
    1860:	24 81       	ldd	r18, Z+4	; 0x04
    1862:	35 81       	ldd	r19, Z+5	; 0x05
    1864:	42 17       	cp	r20, r18
    1866:	53 07       	cpc	r21, r19
    1868:	44 f4       	brge	.+16     	; 0x187a <fputc+0x38>
    186a:	a0 81       	ld	r26, Z
    186c:	b1 81       	ldd	r27, Z+1	; 0x01
    186e:	9d 01       	movw	r18, r26
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	31 83       	std	Z+1, r19	; 0x01
    1876:	20 83       	st	Z, r18
    1878:	8c 93       	st	X, r24
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	37 83       	std	Z+7, r19	; 0x07
    1884:	26 83       	std	Z+6, r18	; 0x06
    1886:	10 c0       	rjmp	.+32     	; 0x18a8 <fputc+0x66>
    1888:	eb 01       	movw	r28, r22
    188a:	09 2f       	mov	r16, r25
    188c:	18 2f       	mov	r17, r24
    188e:	00 84       	ldd	r0, Z+8	; 0x08
    1890:	f1 85       	ldd	r31, Z+9	; 0x09
    1892:	e0 2d       	mov	r30, r0
    1894:	09 95       	icall
    1896:	89 2b       	or	r24, r25
    1898:	e1 f6       	brne	.-72     	; 0x1852 <fputc+0x10>
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	9f 83       	std	Y+7, r25	; 0x07
    18a2:	8e 83       	std	Y+6, r24	; 0x06
    18a4:	81 2f       	mov	r24, r17
    18a6:	90 2f       	mov	r25, r16
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <__ultoa_invert>:
    18b2:	fa 01       	movw	r30, r20
    18b4:	aa 27       	eor	r26, r26
    18b6:	28 30       	cpi	r18, 0x08	; 8
    18b8:	51 f1       	breq	.+84     	; 0x190e <__ultoa_invert+0x5c>
    18ba:	20 31       	cpi	r18, 0x10	; 16
    18bc:	81 f1       	breq	.+96     	; 0x191e <__ultoa_invert+0x6c>
    18be:	e8 94       	clt
    18c0:	6f 93       	push	r22
    18c2:	6e 7f       	andi	r22, 0xFE	; 254
    18c4:	6e 5f       	subi	r22, 0xFE	; 254
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	af 4f       	sbci	r26, 0xFF	; 255
    18ce:	b1 e0       	ldi	r27, 0x01	; 1
    18d0:	3e d0       	rcall	.+124    	; 0x194e <__ultoa_invert+0x9c>
    18d2:	b4 e0       	ldi	r27, 0x04	; 4
    18d4:	3c d0       	rcall	.+120    	; 0x194e <__ultoa_invert+0x9c>
    18d6:	67 0f       	add	r22, r23
    18d8:	78 1f       	adc	r23, r24
    18da:	89 1f       	adc	r24, r25
    18dc:	9a 1f       	adc	r25, r26
    18de:	a1 1d       	adc	r26, r1
    18e0:	68 0f       	add	r22, r24
    18e2:	79 1f       	adc	r23, r25
    18e4:	8a 1f       	adc	r24, r26
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	6a 0f       	add	r22, r26
    18ec:	71 1d       	adc	r23, r1
    18ee:	81 1d       	adc	r24, r1
    18f0:	91 1d       	adc	r25, r1
    18f2:	a1 1d       	adc	r26, r1
    18f4:	20 d0       	rcall	.+64     	; 0x1936 <__ultoa_invert+0x84>
    18f6:	09 f4       	brne	.+2      	; 0x18fa <__ultoa_invert+0x48>
    18f8:	68 94       	set
    18fa:	3f 91       	pop	r19
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	26 9f       	mul	r18, r22
    1900:	11 24       	eor	r1, r1
    1902:	30 19       	sub	r19, r0
    1904:	30 5d       	subi	r19, 0xD0	; 208
    1906:	31 93       	st	Z+, r19
    1908:	de f6       	brtc	.-74     	; 0x18c0 <__ultoa_invert+0xe>
    190a:	cf 01       	movw	r24, r30
    190c:	08 95       	ret
    190e:	46 2f       	mov	r20, r22
    1910:	47 70       	andi	r20, 0x07	; 7
    1912:	40 5d       	subi	r20, 0xD0	; 208
    1914:	41 93       	st	Z+, r20
    1916:	b3 e0       	ldi	r27, 0x03	; 3
    1918:	0f d0       	rcall	.+30     	; 0x1938 <__ultoa_invert+0x86>
    191a:	c9 f7       	brne	.-14     	; 0x190e <__ultoa_invert+0x5c>
    191c:	f6 cf       	rjmp	.-20     	; 0x190a <__ultoa_invert+0x58>
    191e:	46 2f       	mov	r20, r22
    1920:	4f 70       	andi	r20, 0x0F	; 15
    1922:	40 5d       	subi	r20, 0xD0	; 208
    1924:	4a 33       	cpi	r20, 0x3A	; 58
    1926:	18 f0       	brcs	.+6      	; 0x192e <__ultoa_invert+0x7c>
    1928:	49 5d       	subi	r20, 0xD9	; 217
    192a:	31 fd       	sbrc	r19, 1
    192c:	40 52       	subi	r20, 0x20	; 32
    192e:	41 93       	st	Z+, r20
    1930:	02 d0       	rcall	.+4      	; 0x1936 <__ultoa_invert+0x84>
    1932:	a9 f7       	brne	.-22     	; 0x191e <__ultoa_invert+0x6c>
    1934:	ea cf       	rjmp	.-44     	; 0x190a <__ultoa_invert+0x58>
    1936:	b4 e0       	ldi	r27, 0x04	; 4
    1938:	a6 95       	lsr	r26
    193a:	97 95       	ror	r25
    193c:	87 95       	ror	r24
    193e:	77 95       	ror	r23
    1940:	67 95       	ror	r22
    1942:	ba 95       	dec	r27
    1944:	c9 f7       	brne	.-14     	; 0x1938 <__ultoa_invert+0x86>
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	61 05       	cpc	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	08 95       	ret
    194e:	9b 01       	movw	r18, r22
    1950:	ac 01       	movw	r20, r24
    1952:	0a 2e       	mov	r0, r26
    1954:	06 94       	lsr	r0
    1956:	57 95       	ror	r21
    1958:	47 95       	ror	r20
    195a:	37 95       	ror	r19
    195c:	27 95       	ror	r18
    195e:	ba 95       	dec	r27
    1960:	c9 f7       	brne	.-14     	; 0x1954 <__ultoa_invert+0xa2>
    1962:	62 0f       	add	r22, r18
    1964:	73 1f       	adc	r23, r19
    1966:	84 1f       	adc	r24, r20
    1968:	95 1f       	adc	r25, r21
    196a:	a0 1d       	adc	r26, r0
    196c:	08 95       	ret

0000196e <__prologue_saves__>:
    196e:	2f 92       	push	r2
    1970:	3f 92       	push	r3
    1972:	4f 92       	push	r4
    1974:	5f 92       	push	r5
    1976:	6f 92       	push	r6
    1978:	7f 92       	push	r7
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	ca 1b       	sub	r28, r26
    1998:	db 0b       	sbc	r29, r27
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	09 94       	ijmp

000019a6 <__epilogue_restores__>:
    19a6:	2a 88       	ldd	r2, Y+18	; 0x12
    19a8:	39 88       	ldd	r3, Y+17	; 0x11
    19aa:	48 88       	ldd	r4, Y+16	; 0x10
    19ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b8:	b9 84       	ldd	r11, Y+9	; 0x09
    19ba:	c8 84       	ldd	r12, Y+8	; 0x08
    19bc:	df 80       	ldd	r13, Y+7	; 0x07
    19be:	ee 80       	ldd	r14, Y+6	; 0x06
    19c0:	fd 80       	ldd	r15, Y+5	; 0x05
    19c2:	0c 81       	ldd	r16, Y+4	; 0x04
    19c4:	1b 81       	ldd	r17, Y+3	; 0x03
    19c6:	aa 81       	ldd	r26, Y+2	; 0x02
    19c8:	b9 81       	ldd	r27, Y+1	; 0x01
    19ca:	ce 0f       	add	r28, r30
    19cc:	d1 1d       	adc	r29, r1
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	ed 01       	movw	r28, r26
    19da:	08 95       	ret

000019dc <_exit>:
    19dc:	f8 94       	cli

000019de <__stop_program>:
    19de:	ff cf       	rjmp	.-2      	; 0x19de <__stop_program>
