
PCRemote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00001936  000019ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000309  008001ec  008001ec  00001ab6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120f  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00002e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000729  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000515e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_3>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_7>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_14>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_19>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	af 07       	cpc	r26, r31
      6a:	a6 07       	cpc	r26, r22
      6c:	9c 07       	cpc	r25, r28
      6e:	93 07       	cpc	r25, r19
      70:	8b 07       	cpc	r24, r27
      72:	82 07       	cpc	r24, r18
      74:	7a 07       	cpc	r23, r26
      76:	73 07       	cpc	r23, r19
      78:	70 07       	cpc	r23, r16
      7a:	ed 08       	sbc	r14, r13
      7c:	ad 08       	sbc	r10, r13
      7e:	3b 09       	sbc	r19, r11
      80:	3b 09       	sbc	r19, r11
      82:	3b 09       	sbc	r19, r11
      84:	fb 08       	sbc	r15, r11
      86:	df 08       	sbc	r13, r15
      88:	2c 09       	sbc	r18, r12
      8a:	1a 09       	sbc	r17, r10
      8c:	0e 09       	sbc	r16, r14
      8e:	d3 08       	sbc	r13, r3
      90:	d3 08       	sbc	r13, r3
      92:	d3 08       	sbc	r13, r3
      94:	d3 08       	sbc	r13, r3
      96:	d3 08       	sbc	r13, r3
      98:	d3 08       	sbc	r13, r3
      9a:	d3 08       	sbc	r13, r3
      9c:	b9 08       	sbc	r11, r9
      9e:	c5 08       	sbc	r12, r5

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	11 e0       	ldi	r17, 0x01	; 1
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e6 e3       	ldi	r30, 0x36	; 54
      b4:	f9 e1       	ldi	r31, 0x19	; 25
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	ac 3e       	cpi	r26, 0xEC	; 236
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	24 e0       	ldi	r18, 0x04	; 4
      c4:	ac ee       	ldi	r26, 0xEC	; 236
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a5 3f       	cpi	r26, 0xF5	; 245
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 9a 00 	call	0x134	; 0x134 <main>
      d6:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <send_break_for_ircode>:
			    debug_log("\r\n");
}

static void send_break_for_ircode(unsigned long ircode)
{
			    debug_log("B 0x");
      de:	83 e0       	ldi	r24, 0x03	; 3
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			    sprintf(strbuf1,"%lx",decode_results.value);
      e6:	80 91 ed 04 	lds	r24, 0x04ED
      ea:	90 91 ee 04 	lds	r25, 0x04EE
      ee:	a0 91 ef 04 	lds	r26, 0x04EF
      f2:	b0 91 f0 04 	lds	r27, 0x04F0
      f6:	bf 93       	push	r27
      f8:	af 93       	push	r26
      fa:	9f 93       	push	r25
      fc:	8f 93       	push	r24
      fe:	88 e0       	ldi	r24, 0x08	; 8
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	9f 93       	push	r25
     104:	8f 93       	push	r24
     106:	80 ef       	ldi	r24, 0xF0	; 240
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	9f 93       	push	r25
     10c:	8f 93       	push	r24
     10e:	0e 94 c1 09 	call	0x1382	; 0x1382 <sprintf>
			    debug_log(strbuf1);
     112:	80 ef       	ldi	r24, 0xF0	; 240
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			    debug_log("\r\n");
     11a:	8a eb       	ldi	r24, 0xBA	; 186
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
     122:	8d b7       	in	r24, 0x3d	; 61
     124:	9e b7       	in	r25, 0x3e	; 62
     126:	08 96       	adiw	r24, 0x08	; 8
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	9e bf       	out	0x3e, r25	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	8d bf       	out	0x3d, r24	; 61
     132:	08 95       	ret

00000134 <main>:
}

int main(void)
{
	init_debug_log();
     134:	0e 94 c1 01 	call	0x382	; 0x382 <init_debug_log>
	enableIRRecv();
     138:	0e 94 4b 03 	call	0x696	; 0x696 <enableIRRecv>
	setup_ps2device(PINB2, PINB1);
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	0e 94 46 08 	call	0x108c	; 0x108c <setup_ps2device>
	DDRB &= ~_BV(DDB0); // data direction input for B0
     144:	20 98       	cbi	0x04, 0	; 4
	PORTB |= _BV(PORTB0); // enable pullup
     146:	28 9a       	sbi	0x05, 0	; 5
static unsigned long prev_ir_value = 0;

static void send_make_for_ircode(unsigned long ircode)
{
			    debug_log("M 0x");
			    sprintf(strbuf1,"%lx",decode_results.value);
     148:	08 e0       	ldi	r16, 0x08	; 8
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	0f 2e       	mov	r0, r31
     14e:	f0 ef       	ldi	r31, 0xF0	; 240
     150:	ef 2e       	mov	r14, r31
     152:	f1 e0       	ldi	r31, 0x01	; 1
     154:	ff 2e       	mov	r15, r31
     156:	f0 2d       	mov	r31, r0
     158:	ce 2c       	mov	r12, r14
     15a:	df 2c       	mov	r13, r15
	setup_ps2device(PINB2, PINB1);
	DDRB &= ~_BV(DDB0); // data direction input for B0
	PORTB |= _BV(PORTB0); // enable pullup
    while (1) 
    {
		do_ps2device_work();
     15c:	0e 94 4d 08 	call	0x109a	; 0x109a <do_ps2device_work>
        switch(decodeHashIRRecv(&decode_results))
     160:	8b ee       	ldi	r24, 0xEB	; 235
     162:	94 e0       	ldi	r25, 0x04	; 4
     164:	0e 94 a2 02 	call	0x544	; 0x544 <decodeHashIRRecv>
     168:	88 23       	and	r24, r24
     16a:	21 f0       	breq	.+8      	; 0x174 <main+0x40>
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	09 f4       	brne	.+2      	; 0x172 <main+0x3e>
     170:	52 c0       	rjmp	.+164    	; 0x216 <main+0xe2>
     172:	63 c0       	rjmp	.+198    	; 0x23a <main+0x106>
				    if (i + 1 < decode_results.rawlen)
                    {
					    debug_log(",");
				    }
			    }*/
                if (prev_ir_value && prev_ir_value != decode_results.value)
     174:	60 91 ec 01 	lds	r22, 0x01EC
     178:	70 91 ed 01 	lds	r23, 0x01ED
     17c:	80 91 ee 01 	lds	r24, 0x01EE
     180:	90 91 ef 01 	lds	r25, 0x01EF
     184:	61 15       	cp	r22, r1
     186:	71 05       	cpc	r23, r1
     188:	81 05       	cpc	r24, r1
     18a:	91 05       	cpc	r25, r1
     18c:	79 f0       	breq	.+30     	; 0x1ac <main+0x78>
     18e:	80 90 ed 04 	lds	r8, 0x04ED
     192:	90 90 ee 04 	lds	r9, 0x04EE
     196:	a0 90 ef 04 	lds	r10, 0x04EF
     19a:	b0 90 f0 04 	lds	r11, 0x04F0
     19e:	68 15       	cp	r22, r8
     1a0:	79 05       	cpc	r23, r9
     1a2:	8a 05       	cpc	r24, r10
     1a4:	9b 05       	cpc	r25, r11
     1a6:	11 f0       	breq	.+4      	; 0x1ac <main+0x78>
                {
                    send_break_for_ircode(prev_ir_value);
     1a8:	0e 94 6f 00 	call	0xde	; 0xde <send_break_for_ircode>
                }
                send_make_for_ircode(decode_results.value);
     1ac:	cb ee       	ldi	r28, 0xEB	; 235
     1ae:	d4 e0       	ldi	r29, 0x04	; 4
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	9b 81       	ldd	r25, Y+3	; 0x03
     1b4:	ac 81       	ldd	r26, Y+4	; 0x04
     1b6:	bd 81       	ldd	r27, Y+5	; 0x05
static char strbuf1[10];
static unsigned long prev_ir_value = 0;

static void send_make_for_ircode(unsigned long ircode)
{
			    debug_log("M 0x");
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			    sprintf(strbuf1,"%lx",decode_results.value);
     1c0:	4a 81       	ldd	r20, Y+2	; 0x02
     1c2:	5b 81       	ldd	r21, Y+3	; 0x03
     1c4:	6c 81       	ldd	r22, Y+4	; 0x04
     1c6:	7d 81       	ldd	r23, Y+5	; 0x05
     1c8:	7f 93       	push	r23
     1ca:	6f 93       	push	r22
     1cc:	5f 93       	push	r21
     1ce:	4f 93       	push	r20
     1d0:	1f 93       	push	r17
     1d2:	0f 93       	push	r16
     1d4:	ff 92       	push	r15
     1d6:	ef 92       	push	r14
     1d8:	0e 94 c1 09 	call	0x1382	; 0x1382 <sprintf>
			    debug_log(strbuf1);
     1dc:	8c 2d       	mov	r24, r12
     1de:	9d 2d       	mov	r25, r13
     1e0:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			    debug_log("\r\n");
     1e4:	8a eb       	ldi	r24, 0xBA	; 186
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
                if (prev_ir_value && prev_ir_value != decode_results.value)
                {
                    send_break_for_ircode(prev_ir_value);
                }
                send_make_for_ircode(decode_results.value);
                prev_ir_value = decode_results.value;
     1ec:	8a 81       	ldd	r24, Y+2	; 0x02
     1ee:	9b 81       	ldd	r25, Y+3	; 0x03
     1f0:	ac 81       	ldd	r26, Y+4	; 0x04
     1f2:	bd 81       	ldd	r27, Y+5	; 0x05
     1f4:	80 93 ec 01 	sts	0x01EC, r24
     1f8:	90 93 ed 01 	sts	0x01ED, r25
     1fc:	a0 93 ee 01 	sts	0x01EE, r26
     200:	b0 93 ef 01 	sts	0x01EF, r27
                break;
     204:	8d b7       	in	r24, 0x3d	; 61
     206:	9e b7       	in	r25, 0x3e	; 62
     208:	08 96       	adiw	r24, 0x08	; 8
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	9e bf       	out	0x3e, r25	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	8d bf       	out	0x3d, r24	; 61
     214:	12 c0       	rjmp	.+36     	; 0x23a <main+0x106>
            }
            case BUTTON_RELEASED:
            {
                send_break_for_ircode(prev_ir_value);
     216:	60 91 ec 01 	lds	r22, 0x01EC
     21a:	70 91 ed 01 	lds	r23, 0x01ED
     21e:	80 91 ee 01 	lds	r24, 0x01EE
     222:	90 91 ef 01 	lds	r25, 0x01EF
     226:	0e 94 6f 00 	call	0xde	; 0xde <send_break_for_ircode>
                prev_ir_value = 0;
     22a:	10 92 ec 01 	sts	0x01EC, r1
     22e:	10 92 ed 01 	sts	0x01ED, r1
     232:	10 92 ee 01 	sts	0x01EE, r1
     236:	10 92 ef 01 	sts	0x01EF, r1
            default:
            {
                break;
            }
        }            
		if (bit_is_clear(PINB,PINB0)) {
     23a:	18 99       	sbic	0x03, 0	; 3
     23c:	8f cf       	rjmp	.-226    	; 0x15c <main+0x28>
			debug_log("Make U ARROW\r\n");
     23e:	81 e1       	ldi	r24, 0x11	; 17
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			SEND_EXT_MAKE(PS2DC_U_ARROW_EXT);
     246:	80 ee       	ldi	r24, 0xE0	; 224
     248:	0e 94 75 09 	call	0x12ea	; 0x12ea <add_char_to_send_buf>
     24c:	85 e7       	ldi	r24, 0x75	; 117
     24e:	0e 94 75 09 	call	0x12ea	; 0x12ea <add_char_to_send_buf>
     252:	0e 94 4d 08 	call	0x109a	; 0x109a <do_ps2device_work>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	9f ef       	ldi	r25, 0xFF	; 255
     258:	20 e7       	ldi	r18, 0x70	; 112
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	91 50       	subi	r25, 0x01	; 1
     25e:	20 40       	sbci	r18, 0x00	; 0
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	e1 f7       	brne	.-8      	; 0x25c <main+0x128>
     264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x132>
     266:	00 00       	nop
			_delay_ms(100);
			debug_log("Break U ARROW\r\n");
     268:	80 e2       	ldi	r24, 0x20	; 32
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			SEND_EXT_BREAK(PS2DC_U_ARROW_EXT);
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	0e 94 75 09 	call	0x12ea	; 0x12ea <add_char_to_send_buf>
     276:	80 ee       	ldi	r24, 0xE0	; 224
     278:	0e 94 75 09 	call	0x12ea	; 0x12ea <add_char_to_send_buf>
     27c:	85 e7       	ldi	r24, 0x75	; 117
     27e:	0e 94 75 09 	call	0x12ea	; 0x12ea <add_char_to_send_buf>
     282:	0e 94 4d 08 	call	0x109a	; 0x109a <do_ps2device_work>
     286:	9f ef       	ldi	r25, 0xFF	; 255
     288:	20 e7       	ldi	r18, 0x70	; 112
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	91 50       	subi	r25, 0x01	; 1
     28e:	20 40       	sbci	r18, 0x00	; 0
     290:	80 40       	sbci	r24, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <main+0x158>
     294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x162>
     296:	00 00       	nop
     298:	61 cf       	rjmp	.-318    	; 0x15c <main+0x28>

0000029a <_get_char_from_log_buf>:
static volatile uint8_t _log_buf_head = 0;
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
     29a:	80 91 fa 01 	lds	r24, 0x01FA
     29e:	88 23       	and	r24, r24
     2a0:	99 f0       	breq	.+38     	; 0x2c8 <_get_char_from_log_buf+0x2e>
		return 0;
	}
	char c = _log_buf[_log_buf_head];
     2a2:	e0 91 fb 01 	lds	r30, 0x01FB
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	e4 50       	subi	r30, 0x04	; 4
     2aa:	fe 4f       	sbci	r31, 0xFE	; 254
     2ac:	80 81       	ld	r24, Z
	_log_buf_head++;
     2ae:	90 91 fb 01 	lds	r25, 0x01FB
     2b2:	9f 5f       	subi	r25, 0xFF	; 255
     2b4:	90 93 fb 01 	sts	0x01FB, r25
	_log_buf_len--;
     2b8:	90 91 fa 01 	lds	r25, 0x01FA
     2bc:	91 50       	subi	r25, 0x01	; 1
     2be:	90 93 fa 01 	sts	0x01FA, r25
	if (_log_buf_head >= LOG_BUF_SIZE) {
     2c2:	90 91 fb 01 	lds	r25, 0x01FB
		_log_buf_head = 0;
	}
	return c;
     2c6:	08 95       	ret
static volatile uint8_t _log_buf_len = 0;

// we can't use cli()/sei() - called from inside ISR
static char _get_char_from_log_buf() {
	if (_log_buf_len == 0) {
		return 0;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
	_log_buf_len--;
	if (_log_buf_head >= LOG_BUF_SIZE) {
		_log_buf_head = 0;
	}
	return c;
}
     2ca:	08 95       	ret

000002cc <__vector_19>:
	_log_buf_len++;
	sei();
	return true;
}

ISR(USART_UDRE_vect) {
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	ef 93       	push	r30
     2ec:	ff 93       	push	r31
	// if num char in buf <= 1 then disable this int
	// if char in buf -> get char from bug and put in UART
	char c = _get_char_from_log_buf();
     2ee:	0e 94 4d 01 	call	0x29a	; 0x29a <_get_char_from_log_buf>
	if (c) {
     2f2:	88 23       	and	r24, r24
     2f4:	19 f0       	breq	.+6      	; 0x2fc <__vector_19+0x30>
		UDR0 = c;
     2f6:	80 93 c6 00 	sts	0x00C6, r24
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <__vector_19+0x3a>
	} else {
		UCSR0B &= ~_BV(UDRIE0);
     2fc:	e1 ec       	ldi	r30, 0xC1	; 193
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	8f 7d       	andi	r24, 0xDF	; 223
     304:	80 83       	st	Z, r24
	}
}
     306:	ff 91       	pop	r31
     308:	ef 91       	pop	r30
     30a:	bf 91       	pop	r27
     30c:	af 91       	pop	r26
     30e:	9f 91       	pop	r25
     310:	8f 91       	pop	r24
     312:	7f 91       	pop	r23
     314:	6f 91       	pop	r22
     316:	5f 91       	pop	r21
     318:	4f 91       	pop	r20
     31a:	3f 91       	pop	r19
     31c:	2f 91       	pop	r18
     31e:	0f 90       	pop	r0
     320:	0f be       	out	0x3f, r0	; 63
     322:	0f 90       	pop	r0
     324:	1f 90       	pop	r1
     326:	18 95       	reti

00000328 <debug_log>:

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     328:	fc 01       	movw	r30, r24
     32a:	20 81       	ld	r18, Z
     32c:	22 23       	and	r18, r18
     32e:	b9 f0       	breq	.+46     	; 0x35e <debug_log+0x36>
     330:	dc 01       	movw	r26, r24
     332:	11 96       	adiw	r26, 0x01	; 1
	return c;
}

// returns true if successful and false if buffer full
static bool _put_char_into_log_buf(char c) {
	cli();
     334:	f8 94       	cli
	if (_log_buf_len >= LOG_BUF_SIZE) {
     336:	80 91 fa 01 	lds	r24, 0x01FA
		sei();
		return false;
	}
	uint8_t i = _log_buf_head + _log_buf_len;
     33a:	90 91 fb 01 	lds	r25, 0x01FB
     33e:	e0 91 fa 01 	lds	r30, 0x01FA
     342:	e9 0f       	add	r30, r25
	if (i >= LOG_BUF_SIZE) {
		i -= LOG_BUF_SIZE;
	}
	_log_buf[i] = c;
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	e4 50       	subi	r30, 0x04	; 4
     348:	fe 4f       	sbci	r31, 0xFE	; 254
     34a:	20 83       	st	Z, r18
	_log_buf_len++;
     34c:	90 91 fa 01 	lds	r25, 0x01FA
     350:	9f 5f       	subi	r25, 0xFF	; 255
     352:	90 93 fa 01 	sts	0x01FA, r25
	sei();
     356:	78 94       	sei
	}
}

void debug_log(char* str) {
	// put as many chars from str into buffer as fit
	for (int i = 0; str[i] != 0; i++)
     358:	2d 91       	ld	r18, X+
     35a:	21 11       	cpse	r18, r1
     35c:	eb cf       	rjmp	.-42     	; 0x334 <debug_log+0xc>
		if (!_put_char_into_log_buf(str[i])) {
			break;
		}
	}
	// if !(USART_UDRE enabled) then enabled it and put first char in UART
	if (!(UCSR0B & _BV(UDRIE0))) {
     35e:	80 91 c1 00 	lds	r24, 0x00C1
     362:	85 fd       	sbrc	r24, 5
     364:	0d c0       	rjmp	.+26     	; 0x380 <debug_log+0x58>
		cli();
     366:	f8 94       	cli
		char c = _get_char_from_log_buf();
     368:	0e 94 4d 01 	call	0x29a	; 0x29a <_get_char_from_log_buf>
		if (c) {
     36c:	88 23       	and	r24, r24
     36e:	39 f0       	breq	.+14     	; 0x37e <debug_log+0x56>
			UCSR0B |= _BV(UDRIE0);
     370:	e1 ec       	ldi	r30, 0xC1	; 193
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	90 81       	ld	r25, Z
     376:	90 62       	ori	r25, 0x20	; 32
     378:	90 83       	st	Z, r25
			UDR0 = c;
     37a:	80 93 c6 00 	sts	0x00C6, r24
		}
		sei();		
     37e:	78 94       	sei
     380:	08 95       	ret

00000382 <init_debug_log>:
	}
}

void init_debug_log() {
	UCSR0A = _BV(U2X0);
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	80 93 c0 00 	sts	0x00C0, r24
	UBRR0L = 8; //115200 baud - see page 188 of ATmega328 book
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(TXEN0); /* only tx enable */
     38e:	80 93 c1 00 	sts	0x00C1, r24
     392:	08 95       	ret

00000394 <__vector_7>:
// First entry is the SPACE between transmissions.
//    -> we don't need that at all. carries no information since the counter overflows without detection
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
ISR(TIMER2_COMPA_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	3f 93       	push	r19
     3a2:	8f 93       	push	r24
     3a4:	9f 93       	push	r25
     3a6:	af 93       	push	r26
     3a8:	bf 93       	push	r27
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31

	uint8_t irdata = bit_is_set(_IRPIN,IR_RECV_PIN) ? SPACE : MARK;
     3b2:	89 b1       	in	r24, 0x09	; 9
     3b4:	82 fb       	bst	r24, 2
     3b6:	88 27       	eor	r24, r24
     3b8:	80 f9       	bld	r24, 0

	if (irparams.rawlen >= RAWBUF) {
     3ba:	90 91 c7 04 	lds	r25, 0x04C7
     3be:	94 36       	cpi	r25, 0x64	; 100
     3c0:	18 f0       	brcs	.+6      	; 0x3c8 <__vector_7+0x34>
		// Buffer overflow
		irparams.rcvstate = STATE_TRANSMISSION_COMPLETED;
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	90 93 fc 03 	sts	0x03FC, r25
	}
	switch(irparams.rcvstate) {
     3c8:	90 91 fc 03 	lds	r25, 0x03FC
     3cc:	91 30       	cpi	r25, 0x01	; 1
     3ce:	11 f1       	breq	.+68     	; 0x414 <__vector_7+0x80>
     3d0:	38 f0       	brcs	.+14     	; 0x3e0 <__vector_7+0x4c>
     3d2:	92 30       	cpi	r25, 0x02	; 2
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_7+0x44>
     3d6:	4a c0       	rjmp	.+148    	; 0x46c <__vector_7+0xd8>
     3d8:	93 30       	cpi	r25, 0x03	; 3
     3da:	09 f4       	brne	.+2      	; 0x3de <__vector_7+0x4a>
     3dc:	7c c0       	rjmp	.+248    	; 0x4d6 <__vector_7+0x142>
     3de:	8a c0       	rjmp	.+276    	; 0x4f4 <__vector_7+0x160>
		case STATE_IDLE: // In the middle of a gap
            INC_TIMER;
     3e0:	20 91 fd 03 	lds	r18, 0x03FD
     3e4:	30 91 fe 03 	lds	r19, 0x03FE
     3e8:	29 3b       	cpi	r18, 0xB9	; 185
     3ea:	3b 40       	sbci	r19, 0x0B	; 11
     3ec:	40 f4       	brcc	.+16     	; 0x3fe <__vector_7+0x6a>
     3ee:	ec ef       	ldi	r30, 0xFC	; 252
     3f0:	f3 e0       	ldi	r31, 0x03	; 3
     3f2:	21 81       	ldd	r18, Z+1	; 0x01
     3f4:	32 81       	ldd	r19, Z+2	; 0x02
     3f6:	2f 5f       	subi	r18, 0xFF	; 255
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	32 83       	std	Z+2, r19	; 0x02
     3fc:	21 83       	std	Z+1, r18	; 0x01
			if (irdata == MARK) {
     3fe:	81 11       	cpse	r24, r1
     400:	7d c0       	rjmp	.+250    	; 0x4fc <__vector_7+0x168>
				irparams.timer = 0;
     402:	ec ef       	ldi	r30, 0xFC	; 252
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	12 82       	std	Z+2, r1	; 0x02
     408:	11 82       	std	Z+1, r1	; 0x01
				irparams.rawlen = 0;
     40a:	10 92 c7 04 	sts	0x04C7, r1
				irparams.rcvstate = STATE_MARK;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 83       	st	Z, r24
     412:	72 c0       	rjmp	.+228    	; 0x4f8 <__vector_7+0x164>
                // original had GAP handling here. Need to check if it is necessary.
			}
			break;
		case STATE_MARK: // timing MARK
			if (irdata == SPACE) {   // MARK ended, record time
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	c9 f4       	brne	.+50     	; 0x44a <__vector_7+0xb6>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     418:	ac ef       	ldi	r26, 0xFC	; 252
     41a:	b3 e0       	ldi	r27, 0x03	; 3
     41c:	c7 ec       	ldi	r28, 0xC7	; 199
     41e:	d4 e0       	ldi	r29, 0x04	; 4
     420:	e8 81       	ld	r30, Y
     422:	8e 0f       	add	r24, r30
     424:	88 83       	st	Y, r24
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	11 96       	adiw	r26, 0x01	; 1
     42a:	8d 91       	ld	r24, X+
     42c:	9c 91       	ld	r25, X
     42e:	12 97       	sbiw	r26, 0x02	; 2
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e4 50       	subi	r30, 0x04	; 4
     436:	fc 4f       	sbci	r31, 0xFC	; 252
     438:	94 83       	std	Z+4, r25	; 0x04
     43a:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	1c 92       	st	X, r1
     440:	1e 92       	st	-X, r1
     442:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_SPACE;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	8c 93       	st	X, r24
     448:	59 c0       	rjmp	.+178    	; 0x4fc <__vector_7+0x168>
			}
            else
            {
                INC_TIMER;
     44a:	20 91 fd 03 	lds	r18, 0x03FD
     44e:	30 91 fe 03 	lds	r19, 0x03FE
     452:	29 3b       	cpi	r18, 0xB9	; 185
     454:	3b 40       	sbci	r19, 0x0B	; 11
     456:	08 f0       	brcs	.+2      	; 0x45a <__vector_7+0xc6>
     458:	4d c0       	rjmp	.+154    	; 0x4f4 <__vector_7+0x160>
     45a:	ec ef       	ldi	r30, 0xFC	; 252
     45c:	f3 e0       	ldi	r31, 0x03	; 3
     45e:	21 81       	ldd	r18, Z+1	; 0x01
     460:	32 81       	ldd	r19, Z+2	; 0x02
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	32 83       	std	Z+2, r19	; 0x02
     468:	21 83       	std	Z+1, r18	; 0x01
     46a:	44 c0       	rjmp	.+136    	; 0x4f4 <__vector_7+0x160>
            }                
			break;
		case STATE_SPACE: // timing SPACE
			if (irdata == MARK) { // SPACE just ended, record it
     46c:	81 11       	cpse	r24, r1
     46e:	1a c0       	rjmp	.+52     	; 0x4a4 <__vector_7+0x110>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     470:	ac ef       	ldi	r26, 0xFC	; 252
     472:	b3 e0       	ldi	r27, 0x03	; 3
     474:	c7 ec       	ldi	r28, 0xC7	; 199
     476:	d4 e0       	ldi	r29, 0x04	; 4
     478:	e8 81       	ld	r30, Y
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	8e 0f       	add	r24, r30
     47e:	88 83       	st	Y, r24
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	11 96       	adiw	r26, 0x01	; 1
     484:	8d 91       	ld	r24, X+
     486:	9c 91       	ld	r25, X
     488:	12 97       	sbiw	r26, 0x02	; 2
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e4 50       	subi	r30, 0x04	; 4
     490:	fc 4f       	sbci	r31, 0xFC	; 252
     492:	94 83       	std	Z+4, r25	; 0x04
     494:	83 83       	std	Z+3, r24	; 0x03
				irparams.timer = 0;
     496:	12 96       	adiw	r26, 0x02	; 2
     498:	1c 92       	st	X, r1
     49a:	1e 92       	st	-X, r1
     49c:	11 97       	sbiw	r26, 0x01	; 1
				irparams.rcvstate = STATE_MARK;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8c 93       	st	X, r24
     4a2:	2a c0       	rjmp	.+84     	; 0x4f8 <__vector_7+0x164>
			}
			else { // SPACE
                INC_TIMER;
     4a4:	80 91 fd 03 	lds	r24, 0x03FD
     4a8:	90 91 fe 03 	lds	r25, 0x03FE
     4ac:	89 3b       	cpi	r24, 0xB9	; 185
     4ae:	9b 40       	sbci	r25, 0x0B	; 11
     4b0:	38 f4       	brcc	.+14     	; 0x4c0 <__vector_7+0x12c>
     4b2:	ec ef       	ldi	r30, 0xFC	; 252
     4b4:	f3 e0       	ldi	r31, 0x03	; 3
     4b6:	81 81       	ldd	r24, Z+1	; 0x01
     4b8:	92 81       	ldd	r25, Z+2	; 0x02
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	92 83       	std	Z+2, r25	; 0x02
     4be:	81 83       	std	Z+1, r24	; 0x01
				if (irparams.timer > GAP_TICKS) {
     4c0:	80 91 fd 03 	lds	r24, 0x03FD
     4c4:	90 91 fe 03 	lds	r25, 0x03FE
     4c8:	85 36       	cpi	r24, 0x65	; 101
     4ca:	91 05       	cpc	r25, r1
     4cc:	b8 f0       	brcs	.+46     	; 0x4fc <__vector_7+0x168>
					// big SPACE, indicates gap between codes
					// Mark current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting space width
					irparams.rcvstate = STATE_TRANSMISSION_COMPLETED;
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	80 93 fc 03 	sts	0x03FC, r24
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <__vector_7+0x168>
				}
			}
			break;
		case STATE_TRANSMISSION_COMPLETED: // waiting, measuring gap
            INC_TIMER;
     4d6:	20 91 fd 03 	lds	r18, 0x03FD
     4da:	30 91 fe 03 	lds	r19, 0x03FE
     4de:	29 3b       	cpi	r18, 0xB9	; 185
     4e0:	3b 40       	sbci	r19, 0x0B	; 11
     4e2:	40 f4       	brcc	.+16     	; 0x4f4 <__vector_7+0x160>
     4e4:	ec ef       	ldi	r30, 0xFC	; 252
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	21 81       	ldd	r18, Z+1	; 0x01
     4ea:	32 81       	ldd	r19, Z+2	; 0x02
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	32 83       	std	Z+2, r19	; 0x02
     4f2:	21 83       	std	Z+1, r18	; 0x01
            // we stay in stop until decode_hash resurrects us.
			break;
	}

#ifdef BLINK_LED
	if (irdata == MARK)
     4f4:	81 11       	cpse	r24, r1
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__vector_7+0x168>
    {
		_LED_PORT |= _BV(BLINK_LED_PIN);
     4f8:	45 9a       	sbi	0x08, 5	; 8
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__vector_7+0x16a>
	}
	else
    {
		_LED_PORT &=~ _BV(BLINK_LED_PIN);
     4fc:	45 98       	cbi	0x08, 5	; 8
	}
#endif
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	3f 91       	pop	r19
     510:	2f 91       	pop	r18
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <compare>:
// ----Use a tolerance of 20%
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
    unsigned int tolerance = 4;
	if (newval < oldval - tolerance) {
     51c:	9c 01       	movw	r18, r24
     51e:	24 50       	subi	r18, 0x04	; 4
     520:	31 09       	sbc	r19, r1
     522:	62 17       	cp	r22, r18
     524:	73 07       	cpc	r23, r19
     526:	40 f0       	brcs	.+16     	; 0x538 <compare+0x1c>
		return 0;
	}
	else if (oldval < newval - tolerance) {
     528:	64 50       	subi	r22, 0x04	; 4
     52a:	71 09       	sbc	r23, r1
     52c:	86 17       	cp	r24, r22
     52e:	97 07       	cpc	r25, r23
     530:	30 f0       	brcs	.+12     	; 0x53e <compare+0x22>
		return 2;
	}
	else {
		return 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	08 95       	ret
// ++++To avoid fp multiplication use an integer tolerance and substract it
// ++++Values are in the range of 7..30 (except lead-in which is 55)
int compare(unsigned int oldval, unsigned int newval) {
    unsigned int tolerance = 4;
	if (newval < oldval - tolerance) {
		return 0;
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	08 95       	ret
	}
	else if (oldval < newval - tolerance) {
		return 2;
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 1;
	}
}
     542:	08 95       	ret

00000544 <decodeHashIRRecv>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
DECODE_STATE decodeHashIRRecv(volatile decode_results_t *results) {
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	8c 01       	movw	r16, r24
    switch (irparams.rcvstate)
     55a:	90 91 fc 03 	lds	r25, 0x03FC
     55e:	99 23       	and	r25, r25
     560:	19 f0       	breq	.+6      	; 0x568 <decodeHashIRRecv+0x24>
     562:	93 30       	cpi	r25, 0x03	; 3
     564:	88 f4       	brcc	.+34     	; 0x588 <decodeHashIRRecv+0x44>
     566:	87 c0       	rjmp	.+270    	; 0x676 <decodeHashIRRecv+0x132>
        case STATE_MARK:
        case STATE_SPACE:
            return IN_TRANSMISSION;
        case STATE_IDLE:
        {
            if (!break_sent && irparams.timer >= BTN_RELEASE_GAP_TICKS)
     568:	80 91 00 01 	lds	r24, 0x0100
     56c:	81 11       	cpse	r24, r1
     56e:	85 c0       	rjmp	.+266    	; 0x67a <decodeHashIRRecv+0x136>
     570:	80 91 fd 03 	lds	r24, 0x03FD
     574:	90 91 fe 03 	lds	r25, 0x03FE
     578:	88 3b       	cpi	r24, 0xB8	; 184
     57a:	9b 40       	sbci	r25, 0x0B	; 11
     57c:	08 f4       	brcc	.+2      	; 0x580 <decodeHashIRRecv+0x3c>
     57e:	7f c0       	rjmp	.+254    	; 0x67e <decodeHashIRRecv+0x13a>
            {
                break_sent = true;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 00 01 	sts	0x0100, r24
                return BUTTON_RELEASED;
     586:	7c c0       	rjmp	.+248    	; 0x680 <decodeHashIRRecv+0x13c>
            }
        }
        case STATE_TRANSMISSION_COMPLETED:
        default:
        {
            results->rawbuf = irparams.rawbuf;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	d8 01       	movw	r26, r16
     58e:	18 96       	adiw	r26, 0x08	; 8
     590:	9c 93       	st	X, r25
     592:	8e 93       	st	-X, r24
     594:	17 97       	sbiw	r26, 0x07	; 7
            results->rawlen = irparams.rawlen;
     596:	80 91 c7 04 	lds	r24, 0x04C7
     59a:	19 96       	adiw	r26, 0x09	; 9
     59c:	8c 93       	st	X, r24
     59e:	19 97       	sbiw	r26, 0x09	; 9
    
            long hash = FNV_BASIS_32;
            for (int i = 0; i+2 < results->rawlen; i++)
     5a0:	19 96       	adiw	r26, 0x09	; 9
     5a2:	8c 91       	ld	r24, X
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	03 97       	sbiw	r24, 0x03	; 3
     5a8:	0c f4       	brge	.+2      	; 0x5ac <decodeHashIRRecv+0x68>
     5aa:	43 c0       	rjmp	.+134    	; 0x632 <decodeHashIRRecv+0xee>
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f3 e0       	ldi	r31, 0x03	; 3
     5b0:	af 2e       	mov	r10, r31
     5b2:	b1 2c       	mov	r11, r1
     5b4:	f0 2d       	mov	r31, r0
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	0f 2e       	mov	r0, r31
     5bc:	f5 ec       	ldi	r31, 0xC5	; 197
     5be:	cf 2e       	mov	r12, r31
     5c0:	fd e9       	ldi	r31, 0x9D	; 157
     5c2:	df 2e       	mov	r13, r31
     5c4:	fc e1       	ldi	r31, 0x1C	; 28
     5c6:	ef 2e       	mov	r14, r31
     5c8:	f1 e8       	ldi	r31, 0x81	; 129
     5ca:	ff 2e       	mov	r15, r31
     5cc:	f0 2d       	mov	r31, r0
            {
                int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
     5ce:	d8 01       	movw	r26, r16
     5d0:	17 96       	adiw	r26, 0x07	; 7
     5d2:	ed 91       	ld	r30, X+
     5d4:	fc 91       	ld	r31, X
     5d6:	18 97       	sbiw	r26, 0x08	; 8
     5d8:	ce 01       	movw	r24, r28
     5da:	04 96       	adiw	r24, 0x04	; 4
     5dc:	e8 0f       	add	r30, r24
     5de:	f9 1f       	adc	r31, r25
     5e0:	60 81       	ld	r22, Z
     5e2:	71 81       	ldd	r23, Z+1	; 0x01
     5e4:	17 96       	adiw	r26, 0x07	; 7
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	18 97       	sbiw	r26, 0x08	; 8
     5ec:	ec 0f       	add	r30, r28
     5ee:	fd 1f       	adc	r31, r29
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	0e 94 8e 02 	call	0x51c	; 0x51c <compare>
     5f8:	fc 01       	movw	r30, r24
                // Add value into the hash
                hash = (hash * FNV_PRIME_32) ^ value;
     5fa:	a7 01       	movw	r20, r14
     5fc:	96 01       	movw	r18, r12
     5fe:	63 e9       	ldi	r22, 0x93	; 147
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsi3>
     60a:	6f 01       	movw	r12, r30
     60c:	ff 0f       	add	r31, r31
     60e:	ee 08       	sbc	r14, r14
     610:	ff 08       	sbc	r15, r15
     612:	c6 26       	eor	r12, r22
     614:	d7 26       	eor	r13, r23
     616:	e8 26       	eor	r14, r24
     618:	f9 26       	eor	r15, r25
        {
            results->rawbuf = irparams.rawbuf;
            results->rawlen = irparams.rawlen;
    
            long hash = FNV_BASIS_32;
            for (int i = 0; i+2 < results->rawlen; i++)
     61a:	95 01       	movw	r18, r10
     61c:	f8 01       	movw	r30, r16
     61e:	81 85       	ldd	r24, Z+9	; 0x09
     620:	22 96       	adiw	r28, 0x02	; 2
     622:	ff ef       	ldi	r31, 0xFF	; 255
     624:	af 1a       	sub	r10, r31
     626:	bf 0a       	sbc	r11, r31
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	28 17       	cp	r18, r24
     62c:	39 07       	cpc	r19, r25
     62e:	7c f2       	brlt	.-98     	; 0x5ce <decodeHashIRRecv+0x8a>
     630:	0a c0       	rjmp	.+20     	; 0x646 <decodeHashIRRecv+0x102>
        default:
        {
            results->rawbuf = irparams.rawbuf;
            results->rawlen = irparams.rawlen;
    
            long hash = FNV_BASIS_32;
     632:	0f 2e       	mov	r0, r31
     634:	f5 ec       	ldi	r31, 0xC5	; 197
     636:	cf 2e       	mov	r12, r31
     638:	fd e9       	ldi	r31, 0x9D	; 157
     63a:	df 2e       	mov	r13, r31
     63c:	fc e1       	ldi	r31, 0x1C	; 28
     63e:	ef 2e       	mov	r14, r31
     640:	f1 e8       	ldi	r31, 0x81	; 129
     642:	ff 2e       	mov	r15, r31
     644:	f0 2d       	mov	r31, r0
            {
                int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
                // Add value into the hash
                hash = (hash * FNV_PRIME_32) ^ value;
            }
            results->value = hash;
     646:	d8 01       	movw	r26, r16
     648:	12 96       	adiw	r26, 0x02	; 2
     64a:	cd 92       	st	X+, r12
     64c:	dd 92       	st	X+, r13
     64e:	ed 92       	st	X+, r14
     650:	fc 92       	st	X, r15
     652:	15 97       	sbiw	r26, 0x05	; 5
            results->bits = 32;
     654:	80 e2       	ldi	r24, 0x20	; 32
     656:	16 96       	adiw	r26, 0x06	; 6
     658:	8c 93       	st	X, r24
     65a:	16 97       	sbiw	r26, 0x06	; 6
            results->decode_type = HASH;
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	9f ef       	ldi	r25, 0xFF	; 255
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	9c 93       	st	X, r25
     664:	8e 93       	st	-X, r24

            irparams.rcvstate = STATE_IDLE;
     666:	10 92 fc 03 	sts	0x03FC, r1
            break_sent = false;
     66a:	10 92 00 01 	sts	0x0100, r1
            irparams.rawlen = 0;
     66e:	10 92 c7 04 	sts	0x04C7, r1

            return DECODED;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	05 c0       	rjmp	.+10     	; 0x680 <decodeHashIRRecv+0x13c>
DECODE_STATE decodeHashIRRecv(volatile decode_results_t *results) {
    switch (irparams.rcvstate)
    {
        case STATE_MARK:
        case STATE_SPACE:
            return IN_TRANSMISSION;
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	03 c0       	rjmp	.+6      	; 0x680 <decodeHashIRRecv+0x13c>
                break_sent = true;
                return BUTTON_RELEASED;
            }
            else
            {
                return IDLE;
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	01 c0       	rjmp	.+2      	; 0x680 <decodeHashIRRecv+0x13c>
     67e:	83 e0       	ldi	r24, 0x03	; 3
            irparams.rawlen = 0;

            return DECODED;
        }
    }
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	08 95       	ret

00000696 <enableIRRecv>:

// initialization
void enableIRRecv() {
	cli();
     696:	f8 94       	cli
	// setup pulse clock timer interrupt
	//Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 93 b0 00 	sts	0x00B0, r24
     69e:	80 93 b1 00 	sts	0x00B1, r24
     6a2:	92 e3       	ldi	r25, 0x32	; 50
     6a4:	90 93 b3 00 	sts	0x00B3, r25
     6a8:	10 92 b2 00 	sts	0x00B2, r1

	//Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
     6ac:	17 ba       	out	0x17, r1	; 23
     6ae:	80 93 70 00 	sts	0x0070, r24

	sei();  // enable interrupts
     6b2:	78 94       	sei

	// initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
     6b4:	10 92 fc 03 	sts	0x03FC, r1
	irparams.rawlen = 0;
     6b8:	10 92 c7 04 	sts	0x04C7, r1

	// set pin modes
	_IRDDR &= ~_BV(IR_RECV_PIN);
     6bc:	52 98       	cbi	0x0a, 2	; 10
	
#ifdef BLINK_LED
	_LED_DDR |= _BV(BLINK_LED_PIN);
     6be:	3d 9a       	sbi	0x07, 5	; 7
	_LED_PORT |= _BV(BLINK_LED_PIN);
     6c0:	45 9a       	sbi	0x08, 5	; 8
     6c2:	08 95       	ret

000006c4 <_send_char_to_host>:
	y ^= (y >> 2);
	y ^= (y >> 4);
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
     6c4:	28 2f       	mov	r18, r24
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
     6c6:	88 23       	and	r24, r24
     6c8:	09 f4       	brne	.+2      	; 0x6cc <_send_char_to_host+0x8>
     6ca:	9b c0       	rjmp	.+310    	; 0x802 <_send_char_to_host+0x13e>
     6cc:	80 91 02 01 	lds	r24, 0x0102
     6d0:	88 23       	and	r24, r24
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <_send_char_to_host+0x12>
     6d4:	97 c0       	rjmp	.+302    	; 0x804 <_send_char_to_host+0x140>
		return false;
	}
	while(_trans_in_progress) {}
     6d6:	90 91 ce 04 	lds	r25, 0x04CE
     6da:	91 11       	cpse	r25, r1
     6dc:	fc cf       	rjmp	.-8      	; 0x6d6 <_send_char_to_host+0x12>
	_trans_in_progress = true;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 ce 04 	sts	0x04CE, r24
	_char_to_send = c;
     6e4:	20 93 d0 04 	sts	0x04D0, r18
	}
	sei();
}

static uint8_t _parity(uint8_t x) {
	uint8_t y = x ^ (x >> 1);
     6e8:	82 2f       	mov	r24, r18
     6ea:	86 95       	lsr	r24
     6ec:	28 27       	eor	r18, r24
	y ^= (y >> 2);
     6ee:	82 2f       	mov	r24, r18
     6f0:	86 95       	lsr	r24
     6f2:	86 95       	lsr	r24
     6f4:	28 27       	eor	r18, r24
	y ^= (y >> 4);
     6f6:	82 2f       	mov	r24, r18
     6f8:	82 95       	swap	r24
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	28 27       	eor	r18, r24
	return y & 1;
     6fe:	21 70       	andi	r18, 0x01	; 1
		return false;
	}
	while(_trans_in_progress) {}
	_trans_in_progress = true;
	_char_to_send = c;
	_char_to_send_parity = _parity(c);
     700:	20 93 cf 04 	sts	0x04CF, r18
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	00 90 cb 04 	lds	r0, 0x04CB
     70c:	02 c0       	rjmp	.+4      	; 0x712 <_send_char_to_host+0x4e>
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <_send_char_to_host+0x4a>
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
     716:	83 b1       	in	r24, 0x03	; 3
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	82 23       	and	r24, r18
     71c:	93 23       	and	r25, r19
     71e:	89 2b       	or	r24, r25
     720:	d1 f3       	breq	.-12     	; 0x716 <_send_char_to_host+0x52>
	ENABLE_PCINT_DATA;
	ENABLE_PCINT0S;
}

static inline void _conf_pins_output() {
	DISABLE_PCINT0S;
     722:	e8 e6       	ldi	r30, 0x68	; 104
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	8e 7f       	andi	r24, 0xFE	; 254
     72a:	80 83       	st	Z, r24
	DISABLE_PCINT_DATA;
     72c:	eb e6       	ldi	r30, 0x6B	; 107
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	30 81       	ld	r19, Z
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	ac 01       	movw	r20, r24
     738:	00 90 ca 04 	lds	r0, 0x04CA
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_send_char_to_host+0x7e>
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <_send_char_to_host+0x7a>
     746:	24 2f       	mov	r18, r20
     748:	20 95       	com	r18
     74a:	23 23       	and	r18, r19
     74c:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     74e:	30 81       	ld	r19, Z
     750:	ac 01       	movw	r20, r24
     752:	00 90 cb 04 	lds	r0, 0x04CB
     756:	02 c0       	rjmp	.+4      	; 0x75c <_send_char_to_host+0x98>
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <_send_char_to_host+0x94>
     760:	24 2f       	mov	r18, r20
     762:	20 95       	com	r18
     764:	23 23       	and	r18, r19
     766:	20 83       	st	Z, r18
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
     768:	34 b1       	in	r19, 0x04	; 4
     76a:	bc 01       	movw	r22, r24
     76c:	00 90 cb 04 	lds	r0, 0x04CB
     770:	02 c0       	rjmp	.+4      	; 0x776 <_send_char_to_host+0xb2>
     772:	66 0f       	add	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <_send_char_to_host+0xae>
     77a:	ac 01       	movw	r20, r24
     77c:	00 90 ca 04 	lds	r0, 0x04CA
     780:	02 c0       	rjmp	.+4      	; 0x786 <_send_char_to_host+0xc2>
     782:	44 0f       	add	r20, r20
     784:	55 1f       	adc	r21, r21
     786:	0a 94       	dec	r0
     788:	e2 f7       	brpl	.-8      	; 0x782 <_send_char_to_host+0xbe>
     78a:	26 2f       	mov	r18, r22
     78c:	24 2b       	or	r18, r20
     78e:	23 2b       	or	r18, r19
     790:	24 b9       	out	0x04, r18	; 4
	_char_to_send_parity = _parity(c);
	while(bit_is_clear(PINB,_clock_pin_port_b)) {
		//wait for the clock pin to become high
	}
	_conf_pins_output();
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
     792:	35 b1       	in	r19, 0x05	; 5
     794:	ac 01       	movw	r20, r24
     796:	00 90 ca 04 	lds	r0, 0x04CA
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <_send_char_to_host+0xdc>
     79c:	44 0f       	add	r20, r20
     79e:	55 1f       	adc	r21, r21
     7a0:	0a 94       	dec	r0
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <_send_char_to_host+0xd8>
     7a4:	24 2f       	mov	r18, r20
     7a6:	20 95       	com	r18
     7a8:	23 23       	and	r18, r19
     7aa:	25 b9       	out	0x05, r18	; 5
	PORTB &= ~_BV(_clock_pin_port_b);
     7ac:	25 b1       	in	r18, 0x05	; 5
     7ae:	00 90 cb 04 	lds	r0, 0x04CB
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <_send_char_to_host+0xf4>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	0a 94       	dec	r0
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <_send_char_to_host+0xf0>
     7bc:	80 95       	com	r24
     7be:	82 23       	and	r24, r18
     7c0:	85 b9       	out	0x05, r24	; 5
	_bit_index = BIT_0_INDEX;
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	80 93 cc 04 	sts	0x04CC, r24
	_clock_state = 0;
     7c8:	10 92 01 01 	sts	0x0101, r1
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     7cc:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     7ce:	85 b5       	in	r24, 0x25	; 37
     7d0:	82 60       	ori	r24, 0x02	; 2
     7d2:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     7d4:	85 b5       	in	r24, 0x25	; 37
     7d6:	8a 7f       	andi	r24, 0xFA	; 250
     7d8:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     7da:	84 b5       	in	r24, 0x24	; 36
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     7e0:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     7e2:	ee e6       	ldi	r30, 0x6E	; 110
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	82 60       	ori	r24, 0x02	; 2
     7ea:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     7ec:	88 e2       	ldi	r24, 0x28	; 40
     7ee:	87 bd       	out	0x27, r24	; 39
	PORTB &= ~_BV(_data_pin_port_b); // send the start bit (LOW)
	PORTB &= ~_BV(_clock_pin_port_b);
	_bit_index = BIT_0_INDEX;
	_clock_state = 0;
	_enable_timer0();
	while(_trans_in_progress) {
     7f0:	80 91 ce 04 	lds	r24, 0x04CE
     7f4:	81 11       	cpse	r24, r1
     7f6:	fc cf       	rjmp	.-8      	; 0x7f0 <_send_char_to_host+0x12c>
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
     7f8:	80 91 cd 04 	lds	r24, 0x04CD
	_trans_interrupted = false;
     7fc:	10 92 cd 04 	sts	0x04CD, r1
	return x;
     800:	08 95       	ret
	return y & 1;
}

static bool _send_char_to_host( uint8_t c) {
	if (!c || !_ps2dev_enabled) { // since the buffer returns 0x0 when empty
		return false;
     802:	80 e0       	ldi	r24, 0x00	; 0
		//block until transmission to finish
	}
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}
     804:	08 95       	ret

00000806 <_reset_state>:
	_send_buf_len=0;
	sei();
}

static void _reset_state() {
	cli();
     806:	f8 94       	cli
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     808:	a8 e6       	ldi	r26, 0x68	; 104
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	8c 91       	ld	r24, X
     80e:	8e 7f       	andi	r24, 0xFE	; 254
     810:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     812:	eb e6       	ldi	r30, 0x6B	; 107
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	30 81       	ld	r19, Z
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	ac 01       	movw	r20, r24
     81e:	00 90 ca 04 	lds	r0, 0x04CA
     822:	02 c0       	rjmp	.+4      	; 0x828 <_reset_state+0x22>
     824:	44 0f       	add	r20, r20
     826:	55 1f       	adc	r21, r21
     828:	0a 94       	dec	r0
     82a:	e2 f7       	brpl	.-8      	; 0x824 <_reset_state+0x1e>
     82c:	24 2f       	mov	r18, r20
     82e:	20 95       	com	r18
     830:	23 23       	and	r18, r19
     832:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     834:	30 81       	ld	r19, Z
     836:	ac 01       	movw	r20, r24
     838:	00 90 cb 04 	lds	r0, 0x04CB
     83c:	02 c0       	rjmp	.+4      	; 0x842 <_reset_state+0x3c>
     83e:	44 0f       	add	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	0a 94       	dec	r0
     844:	e2 f7       	brpl	.-8      	; 0x83e <_reset_state+0x38>
     846:	24 2f       	mov	r18, r20
     848:	20 95       	com	r18
     84a:	23 23       	and	r18, r19
     84c:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     84e:	44 b1       	in	r20, 0x04	; 4
     850:	bc 01       	movw	r22, r24
     852:	00 90 ca 04 	lds	r0, 0x04CA
     856:	02 c0       	rjmp	.+4      	; 0x85c <_reset_state+0x56>
     858:	66 0f       	add	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	0a 94       	dec	r0
     85e:	e2 f7       	brpl	.-8      	; 0x858 <_reset_state+0x52>
     860:	9c 01       	movw	r18, r24
     862:	00 90 cb 04 	lds	r0, 0x04CB
     866:	02 c0       	rjmp	.+4      	; 0x86c <_reset_state+0x66>
     868:	22 0f       	add	r18, r18
     86a:	33 1f       	adc	r19, r19
     86c:	0a 94       	dec	r0
     86e:	e2 f7       	brpl	.-8      	; 0x868 <_reset_state+0x62>
     870:	26 2b       	or	r18, r22
     872:	20 95       	com	r18
     874:	24 23       	and	r18, r20
     876:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     878:	35 b1       	in	r19, 0x05	; 5
     87a:	bc 01       	movw	r22, r24
     87c:	00 90 cb 04 	lds	r0, 0x04CB
     880:	02 c0       	rjmp	.+4      	; 0x886 <_reset_state+0x80>
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	0a 94       	dec	r0
     888:	e2 f7       	brpl	.-8      	; 0x882 <_reset_state+0x7c>
     88a:	ac 01       	movw	r20, r24
     88c:	00 90 ca 04 	lds	r0, 0x04CA
     890:	02 c0       	rjmp	.+4      	; 0x896 <_reset_state+0x90>
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <_reset_state+0x8c>
     89a:	26 2f       	mov	r18, r22
     89c:	24 2b       	or	r18, r20
     89e:	23 2b       	or	r18, r19
     8a0:	25 b9       	out	0x05, r18	; 5
	_NOP();
     8a2:	00 00       	nop
	ENABLE_PCINT_CLK;
     8a4:	40 81       	ld	r20, Z
     8a6:	9c 01       	movw	r18, r24
     8a8:	00 90 cb 04 	lds	r0, 0x04CB
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <_reset_state+0xac>
     8ae:	22 0f       	add	r18, r18
     8b0:	33 1f       	adc	r19, r19
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <_reset_state+0xa8>
     8b6:	24 2b       	or	r18, r20
     8b8:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     8ba:	20 81       	ld	r18, Z
     8bc:	00 90 ca 04 	lds	r0, 0x04CA
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <_reset_state+0xc0>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	0a 94       	dec	r0
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <_reset_state+0xbc>
     8ca:	82 2b       	or	r24, r18
     8cc:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     8ce:	8c 91       	ld	r24, X
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	8c 93       	st	X, r24
}

static void _reset_state() {
	cli();
	_conf_pins_input();
	_ps2dev_enabled = true;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 02 01 	sts	0x0102, r24
	_recv_buf_overflow=false;
     8da:	10 92 d7 04 	sts	0x04D7, r1
	_rcvd_char = 0;
     8de:	10 92 d2 04 	sts	0x04D2, r1
	_rcvd_char_parity = 0;
     8e2:	10 92 d1 04 	sts	0x04D1, r1
	_char_to_send = 0;
     8e6:	10 92 d0 04 	sts	0x04D0, r1
	_char_to_send_parity = 0;
     8ea:	10 92 cf 04 	sts	0x04CF, r1
	_trans_in_progress = false;
     8ee:	10 92 ce 04 	sts	0x04CE, r1
	_recv_in_progress = false;
     8f2:	10 92 c8 04 	sts	0x04C8, r1
	_host_req_dev_rcv = false;
     8f6:	10 92 c9 04 	sts	0x04C9, r1
	_clock_state = 1;
     8fa:	80 93 01 01 	sts	0x0101, r24
	_bit_index = BIT_ACK_INDEX;
     8fe:	10 92 cc 04 	sts	0x04CC, r1
	_next_byte_led = false;
     902:	10 92 d3 04 	sts	0x04D3, r1
	_next_byte_typematic_rate = false;
     906:	10 92 d4 04 	sts	0x04D4, r1
		_bit_index--;
	}
}

static void _clear_rcv_buf() {
	cli();
     90a:	f8 94       	cli
	_recv_buf_head=0;
     90c:	10 92 d9 04 	sts	0x04D9, r1
	_recv_buf_len=0;
     910:	10 92 d8 04 	sts	0x04D8, r1
	sei();
     914:	78 94       	sei
}

static void _clear_send_buf() {
	cli();
     916:	f8 94       	cli
	_send_buf_head=0;
     918:	10 92 d6 04 	sts	0x04D6, r1
	_send_buf_len=0;
     91c:	10 92 d5 04 	sts	0x04D5, r1
	sei();
     920:	78 94       	sei
	_bit_index = BIT_ACK_INDEX;
	_next_byte_led = false;
	_next_byte_typematic_rate = false;
	_clear_rcv_buf();
	_clear_send_buf();
	sei();
     922:	78 94       	sei
	_send_char_to_host(PS2DEVICE_BAT_OK);
     924:	8a ea       	ldi	r24, 0xAA	; 170
     926:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
	debug_log("<BAT_OK\r\n");
     92a:	80 e3       	ldi	r24, 0x30	; 48
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
     932:	08 95       	ret

00000934 <__vector_3>:
	bool x = _trans_interrupted;
	_trans_interrupted = false;
	return x;
}

ISR(PCINT0_vect) {
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	1f 92       	push	r1
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
	uint8_t p = PINB; // save the value of the interrupt source pins
     958:	83 b1       	in	r24, 0x03	; 3
     95a:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b)) {
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	20 91 cb 04 	lds	r18, 0x04CB
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 2e       	mov	r0, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <__vector_3+0x38>
     968:	95 95       	asr	r25
     96a:	87 95       	ror	r24
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__vector_3+0x34>
     970:	80 fd       	sbrc	r24, 0
     972:	0f c0       	rjmp	.+30     	; 0x992 <__vector_3+0x5e>
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	00 90 ca 04 	lds	r0, 0x04CA
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__vector_3+0x4e>
     97e:	95 95       	asr	r25
     980:	87 95       	ror	r24
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <__vector_3+0x4a>
     986:	80 fd       	sbrc	r24, 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__vector_3+0x5e>
		_host_req_dev_rcv = 1; // get ready for the action
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 c9 04 	sts	0x04C9, r24
     990:	5d c0       	rjmp	.+186    	; 0xa4c <__vector_3+0x118>
	} else if (bit_is_set(p,_clock_pin_port_b) && bit_is_clear(p,_data_pin_port_b) && _host_req_dev_rcv && !_recv_in_progress) {
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <__vector_3+0x68>
     998:	95 95       	asr	r25
     99a:	87 95       	ror	r24
     99c:	2a 95       	dec	r18
     99e:	e2 f7       	brpl	.-8      	; 0x998 <__vector_3+0x64>
     9a0:	80 ff       	sbrs	r24, 0
     9a2:	52 c0       	rjmp	.+164    	; 0xa48 <__vector_3+0x114>
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	00 90 ca 04 	lds	r0, 0x04CA
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__vector_3+0x7e>
     9ae:	95 95       	asr	r25
     9b0:	87 95       	ror	r24
     9b2:	0a 94       	dec	r0
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <__vector_3+0x7a>
     9b6:	80 fd       	sbrc	r24, 0
     9b8:	47 c0       	rjmp	.+142    	; 0xa48 <__vector_3+0x114>
     9ba:	80 91 c9 04 	lds	r24, 0x04C9
     9be:	88 23       	and	r24, r24
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <__vector_3+0x90>
     9c2:	42 c0       	rjmp	.+132    	; 0xa48 <__vector_3+0x114>
     9c4:	80 91 c8 04 	lds	r24, 0x04C8
     9c8:	81 11       	cpse	r24, r1
     9ca:	3e c0       	rjmp	.+124    	; 0xa48 <__vector_3+0x114>
		DISABLE_PCINT0S;
     9cc:	e8 e6       	ldi	r30, 0x68	; 104
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	80 83       	st	Z, r24
		DISABLE_PCINT_DATA;
     9d6:	eb e6       	ldi	r30, 0x6B	; 107
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	30 81       	ld	r19, Z
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	ac 01       	movw	r20, r24
     9e2:	00 90 ca 04 	lds	r0, 0x04CA
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__vector_3+0xb8>
     9e8:	44 0f       	add	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	0a 94       	dec	r0
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <__vector_3+0xb4>
     9f0:	24 2f       	mov	r18, r20
     9f2:	20 95       	com	r18
     9f4:	23 23       	and	r18, r19
     9f6:	20 83       	st	Z, r18
		DISABLE_PCINT_CLK;
     9f8:	20 81       	ld	r18, Z
     9fa:	00 90 cb 04 	lds	r0, 0x04CB
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <__vector_3+0xd0>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	0a 94       	dec	r0
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <__vector_3+0xcc>
     a08:	80 95       	com	r24
     a0a:	82 23       	and	r24, r18
     a0c:	80 83       	st	Z, r24
		_clock_state = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 01 01 	sts	0x0101, r24
		_bit_index = BIT_0_INDEX;
     a14:	9a e0       	ldi	r25, 0x0A	; 10
     a16:	90 93 cc 04 	sts	0x04CC, r25
		_host_req_dev_rcv = 0;
     a1a:	10 92 c9 04 	sts	0x04C9, r1
		_recv_in_progress = 1;
     a1e:	80 93 c8 04 	sts	0x04C8, r24
static volatile bool _host_req_dev_rcv = false; // signals that the host wants us to receive something
static volatile bool _recv_in_progress = false;
static volatile uint8_t _clock_state = 1;

static inline void _enable_timer0() {
	TCNT0 = 0; // reset the timer
     a22:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= _BV(CS01); // enable the counter with iclk/8
     a24:	85 b5       	in	r24, 0x25	; 37
     a26:	82 60       	ori	r24, 0x02	; 2
     a28:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(_BV(CS02) | _BV(CS00)); // enable the counter with iclk/8
     a2a:	85 b5       	in	r24, 0x25	; 37
     a2c:	8a 7f       	andi	r24, 0xFA	; 250
     a2e:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= _BV(WGM01); // CTC mode
     a30:	84 b5       	in	r24, 0x24	; 36
     a32:	82 60       	ori	r24, 0x02	; 2
     a34:	84 bd       	out	0x24, r24	; 36
	TIFR0 |= _BV(OCF0A); // clear output compare match A interrupt flag
     a36:	a9 9a       	sbi	0x15, 1	; 21
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
     a38:	ee e6       	ldi	r30, 0x6E	; 110
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	80 83       	st	Z, r24
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
     a42:	88 e2       	ldi	r24, 0x28	; 40
     a44:	87 bd       	out	0x27, r24	; 39
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__vector_3+0x118>
		_host_req_dev_rcv = 0;
		_recv_in_progress = 1;
		_enable_timer0();
	} else {
		// reset the state
		_host_req_dev_rcv = 0;
     a48:	10 92 c9 04 	sts	0x04C9, r1
	}
}
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <__vector_14>:

ISR(TIMER0_COMPA_vect) {
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
	if (_clock_state) {
     a92:	80 91 01 01 	lds	r24, 0x0101
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <__vector_14+0x30>
     a9a:	e5 c1       	rjmp	.+970    	; 0xe66 <__vector_14+0x3fa>
		if (bit_is_set(PINB,_clock_pin_port_b)) {
     a9c:	83 b1       	in	r24, 0x03	; 3
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	00 90 cb 04 	lds	r0, 0x04CB
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <__vector_14+0x3e>
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <__vector_14+0x3a>
     aae:	80 ff       	sbrs	r24, 0
     ab0:	65 c1       	rjmp	.+714    	; 0xd7c <__vector_14+0x310>
			if (_recv_in_progress) {
     ab2:	80 91 c8 04 	lds	r24, 0x04C8
     ab6:	88 23       	and	r24, r24
     ab8:	09 f4       	brne	.+2      	; 0xabc <__vector_14+0x50>
     aba:	ca c0       	rjmp	.+404    	; 0xc50 <__vector_14+0x1e4>
				if (_bit_index == BIT_ACK_INDEX) {
     abc:	90 91 cc 04 	lds	r25, 0x04CC
     ac0:	91 11       	cpse	r25, r1
     ac2:	18 c0       	rjmp	.+48     	; 0xaf4 <__vector_14+0x88>
					DDRB |= _BV(_data_pin_port_b); //switch data to output
     ac4:	94 b1       	in	r25, 0x04	; 4
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	a9 01       	movw	r20, r18
     acc:	00 90 ca 04 	lds	r0, 0x04CA
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__vector_14+0x6a>
     ad2:	44 0f       	add	r20, r20
     ad4:	55 1f       	adc	r21, r21
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <__vector_14+0x66>
     ada:	49 2b       	or	r20, r25
     adc:	44 b9       	out	0x04, r20	; 4
					PORTB &= ~_BV(_data_pin_port_b); //set to LOW - this is the ACK bit
     ade:	95 b1       	in	r25, 0x05	; 5
     ae0:	00 90 ca 04 	lds	r0, 0x04CA
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <__vector_14+0x7e>
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	0a 94       	dec	r0
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <__vector_14+0x7a>
     aee:	20 95       	com	r18
     af0:	29 23       	and	r18, r25
     af2:	25 b9       	out	0x05, r18	; 5
				}
				if (_bit_index <0) {
     af4:	90 91 cc 04 	lds	r25, 0x04CC
     af8:	99 23       	and	r25, r25
     afa:	0c f0       	brlt	.+2      	; 0xafe <__vector_14+0x92>
     afc:	8f c0       	rjmp	.+286    	; 0xc1c <__vector_14+0x1b0>
					_host_req_dev_rcv = 0;
     afe:	10 92 c9 04 	sts	0x04C9, r1
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     b02:	95 b5       	in	r25, 0x25	; 37
     b04:	98 7f       	andi	r25, 0xF8	; 248
     b06:	95 bd       	out	0x25, r25	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     b08:	ee e6       	ldi	r30, 0x6E	; 110
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	90 81       	ld	r25, Z
     b0e:	9d 7f       	andi	r25, 0xFD	; 253
     b10:	90 83       	st	Z, r25
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     b12:	a8 e6       	ldi	r26, 0x68	; 104
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	9c 91       	ld	r25, X
     b18:	9e 7f       	andi	r25, 0xFE	; 254
     b1a:	9c 93       	st	X, r25
	DISABLE_PCINT_DATA;
     b1c:	eb e6       	ldi	r30, 0x6B	; 107
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	40 81       	ld	r20, Z
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	b9 01       	movw	r22, r18
     b28:	00 90 ca 04 	lds	r0, 0x04CA
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <__vector_14+0xc6>
     b2e:	66 0f       	add	r22, r22
     b30:	77 1f       	adc	r23, r23
     b32:	0a 94       	dec	r0
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <__vector_14+0xc2>
     b36:	96 2f       	mov	r25, r22
     b38:	90 95       	com	r25
     b3a:	94 23       	and	r25, r20
     b3c:	90 83       	st	Z, r25
	DISABLE_PCINT_CLK;
     b3e:	40 81       	ld	r20, Z
     b40:	b9 01       	movw	r22, r18
     b42:	00 90 cb 04 	lds	r0, 0x04CB
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__vector_14+0xe0>
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <__vector_14+0xdc>
     b50:	96 2f       	mov	r25, r22
     b52:	90 95       	com	r25
     b54:	94 23       	and	r25, r20
     b56:	90 83       	st	Z, r25
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     b58:	94 b1       	in	r25, 0x04	; 4
     b5a:	b9 01       	movw	r22, r18
     b5c:	00 90 ca 04 	lds	r0, 0x04CA
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <__vector_14+0xfa>
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <__vector_14+0xf6>
     b6a:	a9 01       	movw	r20, r18
     b6c:	00 90 cb 04 	lds	r0, 0x04CB
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <__vector_14+0x10a>
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	0a 94       	dec	r0
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <__vector_14+0x106>
     b7a:	46 2b       	or	r20, r22
     b7c:	40 95       	com	r20
     b7e:	49 23       	and	r20, r25
     b80:	44 b9       	out	0x04, r20	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     b82:	45 b1       	in	r20, 0x05	; 5
     b84:	e9 01       	movw	r28, r18
     b86:	00 90 cb 04 	lds	r0, 0x04CB
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__vector_14+0x124>
     b8c:	cc 0f       	add	r28, r28
     b8e:	dd 1f       	adc	r29, r29
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <__vector_14+0x120>
     b94:	b9 01       	movw	r22, r18
     b96:	00 90 ca 04 	lds	r0, 0x04CA
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__vector_14+0x134>
     b9c:	66 0f       	add	r22, r22
     b9e:	77 1f       	adc	r23, r23
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <__vector_14+0x130>
     ba4:	9c 2f       	mov	r25, r28
     ba6:	96 2b       	or	r25, r22
     ba8:	94 2b       	or	r25, r20
     baa:	95 b9       	out	0x05, r25	; 5
	_NOP();
     bac:	00 00       	nop
	ENABLE_PCINT_CLK;
     bae:	90 81       	ld	r25, Z
     bb0:	a9 01       	movw	r20, r18
     bb2:	00 90 cb 04 	lds	r0, 0x04CB
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__vector_14+0x150>
     bb8:	44 0f       	add	r20, r20
     bba:	55 1f       	adc	r21, r21
     bbc:	0a 94       	dec	r0
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <__vector_14+0x14c>
     bc0:	49 2b       	or	r20, r25
     bc2:	40 83       	st	Z, r20
	ENABLE_PCINT_DATA;
     bc4:	90 81       	ld	r25, Z
     bc6:	00 90 ca 04 	lds	r0, 0x04CA
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__vector_14+0x164>
     bcc:	22 0f       	add	r18, r18
     bce:	33 1f       	adc	r19, r19
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <__vector_14+0x160>
     bd4:	29 2b       	or	r18, r25
     bd6:	20 83       	st	Z, r18
	ENABLE_PCINT0S;
     bd8:	9c 91       	ld	r25, X
     bda:	91 60       	ori	r25, 0x01	; 1
     bdc:	9c 93       	st	X, r25
				}
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
     bde:	10 92 c8 04 	sts	0x04C8, r1
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     be2:	20 91 d2 04 	lds	r18, 0x04D2
}

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
     be6:	90 91 d8 04 	lds	r25, 0x04D8
     bea:	91 11       	cpse	r25, r1
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_14+0x1a4>
		return false;
	uint8_t i = _recv_buf_head + _recv_buf_len;
     bee:	90 91 d9 04 	lds	r25, 0x04D9
     bf2:	e0 91 d8 04 	lds	r30, 0x04D8
     bf6:	e9 0f       	add	r30, r25
	if (i >= RCV_BUF_SIZE)
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__vector_14+0x190>
		i -= RCV_BUF_SIZE;
     bfa:	e1 50       	subi	r30, 0x01	; 1
	_recv_buf[i] = c;
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e6 51       	subi	r30, 0x16	; 22
     c00:	fb 4f       	sbci	r31, 0xFB	; 251
     c02:	20 83       	st	Z, r18
	_recv_buf_len++;
     c04:	90 91 d8 04 	lds	r25, 0x04D8
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 d8 04 	sts	0x04D8, r25
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <__vector_14+0x1a6>

// is meant to be called from ISR so no interrupt disabling etc.
// returning a 0 means buffer is full
static bool _put_char_into_rcv_buf(char c) {
	if (_recv_buf_len >= RCV_BUF_SIZE)
		return false;
     c10:	80 e0       	ldi	r24, 0x00	; 0
				if (_bit_index <0) {
					_host_req_dev_rcv = 0;
					_disable_timer0();
					_conf_pins_input();
					_recv_in_progress = 0;
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	89 27       	eor	r24, r25
     c16:	80 93 d7 04 	sts	0x04D7, r24
     c1a:	1a c0       	rjmp	.+52     	; 0xc50 <__vector_14+0x1e4>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     c1c:	10 92 01 01 	sts	0x0101, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     c20:	44 b1       	in	r20, 0x04	; 4
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9c 01       	movw	r18, r24
     c28:	00 90 cb 04 	lds	r0, 0x04CB
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__vector_14+0x1c6>
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <__vector_14+0x1c2>
     c36:	24 2b       	or	r18, r20
     c38:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     c3a:	25 b1       	in	r18, 0x05	; 5
     c3c:	00 90 cb 04 	lds	r0, 0x04CB
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <__vector_14+0x1da>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <__vector_14+0x1d6>
     c4a:	80 95       	com	r24
     c4c:	82 23       	and	r24, r18
     c4e:	85 b9       	out	0x05, r24	; 5
					_recv_buf_overflow = !_put_char_into_rcv_buf(_rcvd_char);
				} else {
					_conf_clock_out_low(); // don't bring the clock line low after everything has been received!
				}
			}
			if (_trans_in_progress) {
     c50:	80 91 ce 04 	lds	r24, 0x04CE
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <__vector_14+0x1ee>
     c58:	06 c2       	rjmp	.+1036   	; 0x1066 <__vector_14+0x5fa>
				if (_bit_index < 0) {
     c5a:	80 91 cc 04 	lds	r24, 0x04CC
     c5e:	88 23       	and	r24, r24
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__vector_14+0x1f8>
     c62:	71 c0       	rjmp	.+226    	; 0xd46 <__vector_14+0x2da>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	88 7f       	andi	r24, 0xF8	; 248
     c68:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     c6a:	ee e6       	ldi	r30, 0x6E	; 110
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8d 7f       	andi	r24, 0xFD	; 253
     c72:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     c74:	a8 e6       	ldi	r26, 0x68	; 104
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	8c 91       	ld	r24, X
     c7a:	8e 7f       	andi	r24, 0xFE	; 254
     c7c:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     c7e:	eb e6       	ldi	r30, 0x6B	; 107
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	30 81       	ld	r19, Z
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	ac 01       	movw	r20, r24
     c8a:	00 90 ca 04 	lds	r0, 0x04CA
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <__vector_14+0x228>
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <__vector_14+0x224>
     c98:	24 2f       	mov	r18, r20
     c9a:	20 95       	com	r18
     c9c:	23 23       	and	r18, r19
     c9e:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     ca0:	30 81       	ld	r19, Z
     ca2:	ac 01       	movw	r20, r24
     ca4:	00 90 cb 04 	lds	r0, 0x04CB
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <__vector_14+0x242>
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <__vector_14+0x23e>
     cb2:	24 2f       	mov	r18, r20
     cb4:	20 95       	com	r18
     cb6:	23 23       	and	r18, r19
     cb8:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     cba:	44 b1       	in	r20, 0x04	; 4
     cbc:	bc 01       	movw	r22, r24
     cbe:	00 90 ca 04 	lds	r0, 0x04CA
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <__vector_14+0x25c>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <__vector_14+0x258>
     ccc:	9c 01       	movw	r18, r24
     cce:	00 90 cb 04 	lds	r0, 0x04CB
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <__vector_14+0x26c>
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <__vector_14+0x268>
     cdc:	26 2b       	or	r18, r22
     cde:	20 95       	com	r18
     ce0:	24 23       	and	r18, r20
     ce2:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     ce4:	35 b1       	in	r19, 0x05	; 5
     ce6:	bc 01       	movw	r22, r24
     ce8:	00 90 cb 04 	lds	r0, 0x04CB
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <__vector_14+0x286>
     cee:	66 0f       	add	r22, r22
     cf0:	77 1f       	adc	r23, r23
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <__vector_14+0x282>
     cf6:	ac 01       	movw	r20, r24
     cf8:	00 90 ca 04 	lds	r0, 0x04CA
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <__vector_14+0x296>
     cfe:	44 0f       	add	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <__vector_14+0x292>
     d06:	26 2f       	mov	r18, r22
     d08:	24 2b       	or	r18, r20
     d0a:	23 2b       	or	r18, r19
     d0c:	25 b9       	out	0x05, r18	; 5
	_NOP();
     d0e:	00 00       	nop
	ENABLE_PCINT_CLK;
     d10:	40 81       	ld	r20, Z
     d12:	9c 01       	movw	r18, r24
     d14:	00 90 cb 04 	lds	r0, 0x04CB
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <__vector_14+0x2b2>
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <__vector_14+0x2ae>
     d22:	24 2b       	or	r18, r20
     d24:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     d26:	20 81       	ld	r18, Z
     d28:	00 90 ca 04 	lds	r0, 0x04CA
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <__vector_14+0x2c6>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <__vector_14+0x2c2>
     d36:	82 2b       	or	r24, r18
     d38:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     d3a:	8c 91       	ld	r24, X
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	8c 93       	st	X, r24
			}
			if (_trans_in_progress) {
				if (_bit_index < 0) {
					_disable_timer0();
					_conf_pins_input();
					_trans_in_progress = 0;
     d40:	10 92 ce 04 	sts	0x04CE, r1
     d44:	90 c1       	rjmp	.+800    	; 0x1066 <__vector_14+0x5fa>
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
	_NOP();
}

static inline void _conf_clock_out_low() {
	_clock_state = 0;
     d46:	10 92 01 01 	sts	0x0101, r1
	DDRB |= _BV(_clock_pin_port_b); // defines as output
     d4a:	44 b1       	in	r20, 0x04	; 4
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c 01       	movw	r18, r24
     d52:	00 90 cb 04 	lds	r0, 0x04CB
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <__vector_14+0x2f0>
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <__vector_14+0x2ec>
     d60:	24 2b       	or	r18, r20
     d62:	24 b9       	out	0x04, r18	; 4
	PORTB &= ~_BV(_clock_pin_port_b); // set to low
     d64:	25 b1       	in	r18, 0x05	; 5
     d66:	00 90 cb 04 	lds	r0, 0x04CB
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <__vector_14+0x304>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <__vector_14+0x300>
     d74:	80 95       	com	r24
     d76:	82 23       	and	r24, r18
     d78:	85 b9       	out	0x05, r24	; 5
     d7a:	75 c1       	rjmp	.+746    	; 0x1066 <__vector_14+0x5fa>
	TIMSK0 |= _BV(OCIE0A); // enable interrupt generation on output compare match A
	OCR0A = 40; // iclk = 8MHz, iclk/8, ocr=40 -> 12.5kHz clock
}

static inline void _disable_timer0() {
	TCCR0B &= ~(_BV(CS02) | _BV(CS01) | _BV(CS00)); // disable the counter
     d7c:	85 b5       	in	r24, 0x25	; 37
     d7e:	88 7f       	andi	r24, 0xF8	; 248
     d80:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~_BV(OCIE0A);	// disable interrupt generation
     d82:	ee e6       	ldi	r30, 0x6E	; 110
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	80 83       	st	Z, r24
}

static inline void _conf_pins_input() {
	DISABLE_PCINT0S;
     d8c:	a8 e6       	ldi	r26, 0x68	; 104
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	8c 91       	ld	r24, X
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	8c 93       	st	X, r24
	DISABLE_PCINT_DATA;
     d96:	eb e6       	ldi	r30, 0x6B	; 107
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	30 81       	ld	r19, Z
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	ac 01       	movw	r20, r24
     da2:	00 90 ca 04 	lds	r0, 0x04CA
     da6:	02 c0       	rjmp	.+4      	; 0xdac <__vector_14+0x340>
     da8:	44 0f       	add	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <__vector_14+0x33c>
     db0:	24 2f       	mov	r18, r20
     db2:	20 95       	com	r18
     db4:	23 23       	and	r18, r19
     db6:	20 83       	st	Z, r18
	DISABLE_PCINT_CLK;
     db8:	30 81       	ld	r19, Z
     dba:	ac 01       	movw	r20, r24
     dbc:	00 90 cb 04 	lds	r0, 0x04CB
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <__vector_14+0x35a>
     dc2:	44 0f       	add	r20, r20
     dc4:	55 1f       	adc	r21, r21
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <__vector_14+0x356>
     dca:	24 2f       	mov	r18, r20
     dcc:	20 95       	com	r18
     dce:	23 23       	and	r18, r19
     dd0:	20 83       	st	Z, r18
	DDRB &= ~(_BV(_clock_pin_port_b) | _BV(_data_pin_port_b)); // defines pins as inputs
     dd2:	44 b1       	in	r20, 0x04	; 4
     dd4:	bc 01       	movw	r22, r24
     dd6:	00 90 ca 04 	lds	r0, 0x04CA
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <__vector_14+0x374>
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <__vector_14+0x370>
     de4:	9c 01       	movw	r18, r24
     de6:	00 90 cb 04 	lds	r0, 0x04CB
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <__vector_14+0x384>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <__vector_14+0x380>
     df4:	26 2b       	or	r18, r22
     df6:	20 95       	com	r18
     df8:	24 23       	and	r18, r20
     dfa:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b); // activates pull-up resistors
     dfc:	35 b1       	in	r19, 0x05	; 5
     dfe:	bc 01       	movw	r22, r24
     e00:	00 90 cb 04 	lds	r0, 0x04CB
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <__vector_14+0x39e>
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <__vector_14+0x39a>
     e0e:	ac 01       	movw	r20, r24
     e10:	00 90 ca 04 	lds	r0, 0x04CA
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <__vector_14+0x3ae>
     e16:	44 0f       	add	r20, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <__vector_14+0x3aa>
     e1e:	26 2f       	mov	r18, r22
     e20:	24 2b       	or	r18, r20
     e22:	23 2b       	or	r18, r19
     e24:	25 b9       	out	0x05, r18	; 5
	_NOP();
     e26:	00 00       	nop
	ENABLE_PCINT_CLK;
     e28:	40 81       	ld	r20, Z
     e2a:	9c 01       	movw	r18, r24
     e2c:	00 90 cb 04 	lds	r0, 0x04CB
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <__vector_14+0x3ca>
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <__vector_14+0x3c6>
     e3a:	24 2b       	or	r18, r20
     e3c:	20 83       	st	Z, r18
	ENABLE_PCINT_DATA;
     e3e:	20 81       	ld	r18, Z
     e40:	00 90 ca 04 	lds	r0, 0x04CA
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <__vector_14+0x3de>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <__vector_14+0x3da>
     e4e:	82 2b       	or	r24, r18
     e50:	80 83       	st	Z, r24
	ENABLE_PCINT0S;
     e52:	8c 91       	ld	r24, X
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	8c 93       	st	X, r24
			}
		} else {
			// host has pulled clock low -> bail out and get ready to receive something
			_disable_timer0();
			_conf_pins_input();
			_trans_in_progress = 0;
     e58:	10 92 ce 04 	sts	0x04CE, r1
			_recv_in_progress = 0;
     e5c:	10 92 c8 04 	sts	0x04C8, r1
			_host_req_dev_rcv = 0;
     e60:	10 92 c9 04 	sts	0x04C9, r1
     e64:	00 c1       	rjmp	.+512    	; 0x1066 <__vector_14+0x5fa>
		}
	} else {
		// we're just after the rising edge of the clock -> do something
		if (_recv_in_progress) {
     e66:	80 91 c8 04 	lds	r24, 0x04C8
     e6a:	88 23       	and	r24, r24
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__vector_14+0x404>
     e6e:	79 c0       	rjmp	.+242    	; 0xf62 <__vector_14+0x4f6>
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
     e70:	83 b1       	in	r24, 0x03	; 3
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	00 90 ca 04 	lds	r0, 0x04CA
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <__vector_14+0x412>
     e7a:	95 95       	asr	r25
     e7c:	87 95       	ror	r24
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <__vector_14+0x40e>
     e82:	81 70       	andi	r24, 0x01	; 1
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	90 93 01 01 	sts	0x0101, r25
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
     e8a:	44 b1       	in	r20, 0x04	; 4
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	b9 01       	movw	r22, r18
     e92:	00 90 cb 04 	lds	r0, 0x04CB
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <__vector_14+0x430>
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <__vector_14+0x42c>
     ea0:	96 2f       	mov	r25, r22
     ea2:	90 95       	com	r25
     ea4:	94 23       	and	r25, r20
     ea6:	94 b9       	out	0x04, r25	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
     ea8:	95 b1       	in	r25, 0x05	; 5
     eaa:	00 90 cb 04 	lds	r0, 0x04CB
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <__vector_14+0x448>
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <__vector_14+0x444>
     eb8:	29 2b       	or	r18, r25
     eba:	25 b9       	out	0x05, r18	; 5
	_NOP();
     ebc:	00 00       	nop
			// read the value while clock is LOW
			uint8_t data_pin_val = (PINB & _BV(_data_pin_port_b)) ? 1 : 0;
			// set clock HIGH
			_conf_clock_input_high();
			// we receive something from the host
			switch (_bit_index) {
     ebe:	e0 91 cc 04 	lds	r30, 0x04CC
     ec2:	4e 2f       	mov	r20, r30
     ec4:	ee 0f       	add	r30, r30
     ec6:	55 0b       	sbc	r21, r21
     ec8:	66 0b       	sbc	r22, r22
     eca:	77 0b       	sbc	r23, r23
     ecc:	fa 01       	movw	r30, r20
     ece:	32 97       	sbiw	r30, 0x02	; 2
     ed0:	e9 30       	cpi	r30, 0x09	; 9
     ed2:	f1 05       	cpc	r31, r1
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__vector_14+0x46c>
     ed6:	45 c0       	rjmp	.+138    	; 0xf62 <__vector_14+0x4f6>
     ed8:	ec 5c       	subi	r30, 0xCC	; 204
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__tablejump2__>
				case BIT_0_INDEX:
					_rcvd_char = data_pin_val;
     ee0:	80 93 d2 04 	sts	0x04D2, r24
					break;
     ee4:	3e c0       	rjmp	.+124    	; 0xf62 <__vector_14+0x4f6>
				case BIT_1_INDEX:
					_rcvd_char |= (data_pin_val << 1);
     ee6:	90 91 d2 04 	lds	r25, 0x04D2
     eea:	88 0f       	add	r24, r24
     eec:	89 2b       	or	r24, r25
     eee:	80 93 d2 04 	sts	0x04D2, r24
					break;
     ef2:	37 c0       	rjmp	.+110    	; 0xf62 <__vector_14+0x4f6>
				case BIT_2_INDEX:
					_rcvd_char |= (data_pin_val << 2);
     ef4:	90 91 d2 04 	lds	r25, 0x04D2
     ef8:	88 0f       	add	r24, r24
     efa:	88 0f       	add	r24, r24
     efc:	89 2b       	or	r24, r25
     efe:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f02:	2f c0       	rjmp	.+94     	; 0xf62 <__vector_14+0x4f6>
				case BIT_3_INDEX:
					_rcvd_char |= (data_pin_val << 3);
     f04:	90 91 d2 04 	lds	r25, 0x04D2
     f08:	88 0f       	add	r24, r24
     f0a:	88 0f       	add	r24, r24
     f0c:	88 0f       	add	r24, r24
     f0e:	89 2b       	or	r24, r25
     f10:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f14:	26 c0       	rjmp	.+76     	; 0xf62 <__vector_14+0x4f6>
				case BIT_4_INDEX:
					_rcvd_char |= (data_pin_val << 4);
     f16:	90 91 d2 04 	lds	r25, 0x04D2
     f1a:	82 95       	swap	r24
     f1c:	80 7f       	andi	r24, 0xF0	; 240
     f1e:	89 2b       	or	r24, r25
     f20:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f24:	1e c0       	rjmp	.+60     	; 0xf62 <__vector_14+0x4f6>
				case BIT_5_INDEX:
					_rcvd_char |= (data_pin_val << 5);
     f26:	90 91 d2 04 	lds	r25, 0x04D2
     f2a:	82 95       	swap	r24
     f2c:	88 0f       	add	r24, r24
     f2e:	80 7e       	andi	r24, 0xE0	; 224
     f30:	89 2b       	or	r24, r25
     f32:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f36:	15 c0       	rjmp	.+42     	; 0xf62 <__vector_14+0x4f6>
				case BIT_6_INDEX:
					_rcvd_char |= (data_pin_val << 6);
     f38:	90 91 d2 04 	lds	r25, 0x04D2
     f3c:	82 95       	swap	r24
     f3e:	88 0f       	add	r24, r24
     f40:	88 0f       	add	r24, r24
     f42:	80 7c       	andi	r24, 0xC0	; 192
     f44:	89 2b       	or	r24, r25
     f46:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <__vector_14+0x4f6>
				case BIT_7_INDEX:
					_rcvd_char |= (data_pin_val << 7);
     f4c:	90 91 d2 04 	lds	r25, 0x04D2
     f50:	87 95       	ror	r24
     f52:	88 27       	eor	r24, r24
     f54:	87 95       	ror	r24
     f56:	89 2b       	or	r24, r25
     f58:	80 93 d2 04 	sts	0x04D2, r24
					break;
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <__vector_14+0x4f6>
				case BIT_PARITY_INDEX:
					_rcvd_char_parity = data_pin_val;
     f5e:	80 93 d1 04 	sts	0x04D1, r24
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		if (_trans_in_progress) {
     f62:	80 91 ce 04 	lds	r24, 0x04CE
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <__vector_14+0x500>
     f6a:	78 c0       	rjmp	.+240    	; 0x105c <__vector_14+0x5f0>
	DISABLE_PCINT_CLK;
	DDRB |= _BV(_clock_pin_port_b) | _BV(_data_pin_port_b);
}

static inline void _conf_clock_input_high() {
	_clock_state = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 01 01 	sts	0x0101, r24
	DDRB &= ~_BV(_clock_pin_port_b); // defines as input
     f72:	34 b1       	in	r19, 0x04	; 4
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	ac 01       	movw	r20, r24
     f7a:	00 90 cb 04 	lds	r0, 0x04CB
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <__vector_14+0x518>
     f80:	44 0f       	add	r20, r20
     f82:	55 1f       	adc	r21, r21
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <__vector_14+0x514>
     f88:	24 2f       	mov	r18, r20
     f8a:	20 95       	com	r18
     f8c:	23 23       	and	r18, r19
     f8e:	24 b9       	out	0x04, r18	; 4
	PORTB |= _BV(_clock_pin_port_b); // activates pull-up resistor
     f90:	25 b1       	in	r18, 0x05	; 5
     f92:	00 90 cb 04 	lds	r0, 0x04CB
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <__vector_14+0x530>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <__vector_14+0x52c>
     fa0:	82 2b       	or	r24, r18
     fa2:	85 b9       	out	0x05, r24	; 5
	_NOP();
     fa4:	00 00       	nop
			}
		}
		if (_trans_in_progress) {
			_conf_clock_input_high();
			// we send something to the host
			switch (_bit_index) {
     fa6:	80 91 cc 04 	lds	r24, 0x04CC
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	61 f1       	breq	.+88     	; 0x1006 <__vector_14+0x59a>
     fae:	24 f4       	brge	.+8      	; 0xfb8 <__vector_14+0x54c>
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__vector_14+0x54a>
     fb4:	47 c0       	rjmp	.+142    	; 0x1044 <__vector_14+0x5d8>
     fb6:	52 c0       	rjmp	.+164    	; 0x105c <__vector_14+0x5f0>
     fb8:	8b 30       	cpi	r24, 0x0B	; 11
     fba:	0c f0       	brlt	.+2      	; 0xfbe <__vector_14+0x552>
     fbc:	4f c0       	rjmp	.+158    	; 0x105c <__vector_14+0x5f0>
				case BIT_3_INDEX:
				case BIT_4_INDEX:
				case BIT_5_INDEX:
				case BIT_6_INDEX:
				case BIT_7_INDEX:
					if (_char_to_send & 1) {
     fbe:	80 91 d0 04 	lds	r24, 0x04D0
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <__vector_14+0x574>
						PORTB |= _BV(_data_pin_port_b);
     fc6:	25 b1       	in	r18, 0x05	; 5
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	00 90 ca 04 	lds	r0, 0x04CA
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <__vector_14+0x56a>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <__vector_14+0x566>
     fda:	82 2b       	or	r24, r18
     fdc:	85 b9       	out	0x05, r24	; 5
     fde:	0d c0       	rjmp	.+26     	; 0xffa <__vector_14+0x58e>
						} else {
						PORTB &= ~_BV(_data_pin_port_b);
     fe0:	25 b1       	in	r18, 0x05	; 5
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	00 90 ca 04 	lds	r0, 0x04CA
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <__vector_14+0x584>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <__vector_14+0x580>
     ff4:	80 95       	com	r24
     ff6:	82 23       	and	r24, r18
     ff8:	85 b9       	out	0x05, r24	; 5
					}
					_char_to_send >>= 1;
     ffa:	80 91 d0 04 	lds	r24, 0x04D0
     ffe:	86 95       	lsr	r24
    1000:	80 93 d0 04 	sts	0x04D0, r24
					break;
    1004:	2b c0       	rjmp	.+86     	; 0x105c <__vector_14+0x5f0>
				case BIT_PARITY_INDEX:
					if (_char_to_send_parity & 1) {
    1006:	80 91 cf 04 	lds	r24, 0x04CF
    100a:	80 ff       	sbrs	r24, 0
    100c:	0e c0       	rjmp	.+28     	; 0x102a <__vector_14+0x5be>
						PORTB &= ~_BV(_data_pin_port_b);
    100e:	25 b1       	in	r18, 0x05	; 5
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	00 90 ca 04 	lds	r0, 0x04CA
    1018:	02 c0       	rjmp	.+4      	; 0x101e <__vector_14+0x5b2>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <__vector_14+0x5ae>
    1022:	80 95       	com	r24
    1024:	82 23       	and	r24, r18
    1026:	85 b9       	out	0x05, r24	; 5
    1028:	19 c0       	rjmp	.+50     	; 0x105c <__vector_14+0x5f0>
						} else {
						PORTB |= _BV(_data_pin_port_b);
    102a:	25 b1       	in	r18, 0x05	; 5
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	00 90 ca 04 	lds	r0, 0x04CA
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__vector_14+0x5ce>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <__vector_14+0x5ca>
    103e:	82 2b       	or	r24, r18
    1040:	85 b9       	out	0x05, r24	; 5
    1042:	0c c0       	rjmp	.+24     	; 0x105c <__vector_14+0x5f0>
					}
					break;
				case BIT_STOP_INDEX:
					PORTB |= _BV(_data_pin_port_b);
    1044:	25 b1       	in	r18, 0x05	; 5
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	00 90 ca 04 	lds	r0, 0x04CA
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <__vector_14+0x5e8>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <__vector_14+0x5e4>
    1058:	82 2b       	or	r24, r18
    105a:	85 b9       	out	0x05, r24	; 5
					break;
				case BIT_ACK_INDEX:
					break;
			}
		}
		_bit_index--;
    105c:	80 91 cc 04 	lds	r24, 0x04CC
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	80 93 cc 04 	sts	0x04CC, r24
	}
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <setup_ps2device>:
	_send_char_to_host(PS2DEVICE_BAT_OK);
	debug_log("<BAT_OK\r\n");
}

void setup_ps2device(uint8_t clock_pin_port_b, uint8_t data_pin_port_b) {
	_clock_pin_port_b = clock_pin_port_b;
    108c:	80 93 cb 04 	sts	0x04CB, r24
	_data_pin_port_b = data_pin_port_b;
    1090:	60 93 ca 04 	sts	0x04CA, r22
	_reset_state();
    1094:	0e 94 03 04 	call	0x806	; 0x806 <_reset_state>
    1098:	08 95       	ret

0000109a <do_ps2device_work>:
}

void do_ps2device_work() {
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
				debug_log(">TypemR n\r\n");
				_send_char_to_host(PS2DEVICE_CMD_ACK);
				debug_log("<ACK\r\n");
				continue;
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    109e:	c1 e0       	ldi	r28, 0x01	; 1
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    10a0:	ee c0       	rjmp	.+476    	; 0x127e <do_ps2device_work+0x1e4>
	_recv_buf_len=0;
	sei();
}

static void _clear_send_buf() {
	cli();
    10a2:	f8 94       	cli
	_send_buf_head=0;
    10a4:	10 92 d6 04 	sts	0x04D6, r1
	_send_buf_len=0;
    10a8:	10 92 d5 04 	sts	0x04D5, r1
	sei();
    10ac:	78 94       	sei
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
		_clear_send_buf();
		if (_recv_buf_overflow) {
    10ae:	80 91 d7 04 	lds	r24, 0x04D7
    10b2:	88 23       	and	r24, r24
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <do_ps2device_work+0x28>
			debug_log("_recv_buf oflw\r\n");
    10b6:	8a e3       	ldi	r24, 0x3A	; 58
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			_recv_buf_overflow = false;
    10be:	10 92 d7 04 	sts	0x04D7, r1
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static char _get_char_from_rcv_buf()
{
	cli();
    10c2:	f8 94       	cli
	if (_recv_buf_len == 0) {
    10c4:	80 91 d8 04 	lds	r24, 0x04D8
    10c8:	81 11       	cpse	r24, r1
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <do_ps2device_work+0x38>
		sei();
    10cc:	78 94       	sei
		return 0x0;
    10ce:	e0 e0       	ldi	r30, 0x00	; 0
    10d0:	19 c0       	rjmp	.+50     	; 0x1104 <do_ps2device_work+0x6a>
	}
	char c = _recv_buf[_recv_buf_head];
    10d2:	e0 91 d9 04 	lds	r30, 0x04D9
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	e6 51       	subi	r30, 0x16	; 22
    10da:	fb 4f       	sbci	r31, 0xFB	; 251
    10dc:	80 81       	ld	r24, Z
	_recv_buf_head++;
    10de:	90 91 d9 04 	lds	r25, 0x04D9
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	90 93 d9 04 	sts	0x04D9, r25
	_recv_buf_len--;
    10e8:	90 91 d8 04 	lds	r25, 0x04D8
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	90 93 d8 04 	sts	0x04D8, r25
	if (_recv_buf_head >= RCV_BUF_SIZE)
    10f2:	90 91 d9 04 	lds	r25, 0x04D9
    10f6:	91 11       	cpse	r25, r1
		_recv_buf_head = 0;
    10f8:	10 92 d9 04 	sts	0x04D9, r1
	sei();
    10fc:	78 94       	sei
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    10fe:	80 3c       	cpi	r24, 0xC0	; 192
    1100:	f0 f4       	brcc	.+60     	; 0x113e <do_ps2device_work+0xa4>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    1102:	e8 2f       	mov	r30, r24
		if (_recv_buf_overflow) {
			debug_log("_recv_buf oflw\r\n");
			_recv_buf_overflow = false;
		}
		uint8_t c = _get_char_from_rcv_buf();
		if (c < 0b11000000 && (_next_byte_led || _next_byte_typematic_rate)) {
    1104:	80 91 d3 04 	lds	r24, 0x04D3
    1108:	81 11       	cpse	r24, r1
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <do_ps2device_work+0x7a>
    110c:	80 91 d4 04 	lds	r24, 0x04D4
    1110:	88 23       	and	r24, r24
    1112:	b1 f0       	breq	.+44     	; 0x1140 <do_ps2device_work+0xa6>
			if (_next_byte_typematic_rate) {
    1114:	80 91 d4 04 	lds	r24, 0x04D4
    1118:	88 23       	and	r24, r24
    111a:	21 f0       	breq	.+8      	; 0x1124 <do_ps2device_work+0x8a>
				debug_log(">TypemR v\r\n");
    111c:	8b e4       	ldi	r24, 0x4B	; 75
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			}
			if (_next_byte_led) {
    1124:	80 91 d3 04 	lds	r24, 0x04D3
    1128:	88 23       	and	r24, r24
    112a:	21 f0       	breq	.+8      	; 0x1134 <do_ps2device_work+0x9a>
				debug_log(">LED v\r\n");
    112c:	87 e5       	ldi	r24, 0x57	; 87
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
			}
			_next_byte_led = _next_byte_typematic_rate = false;
    1134:	10 92 d4 04 	sts	0x04D4, r1
    1138:	10 92 d3 04 	sts	0x04D3, r1
			return;
    113c:	d3 c0       	rjmp	.+422    	; 0x12e4 <do_ps2device_work+0x24a>
	_recv_buf_head++;
	_recv_buf_len--;
	if (_recv_buf_head >= RCV_BUF_SIZE)
		_recv_buf_head = 0;
	sei();
	return c;
    113e:	e8 2f       	mov	r30, r24
				debug_log(">LED v\r\n");
			}
			_next_byte_led = _next_byte_typematic_rate = false;
			return;
		}
		switch (c) {
    1140:	8e 2f       	mov	r24, r30
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	fc 01       	movw	r30, r24
    1146:	ed 5e       	subi	r30, 0xED	; 237
    1148:	f1 09       	sbc	r31, r1
    114a:	e3 31       	cpi	r30, 0x13	; 19
    114c:	f1 05       	cpc	r31, r1
    114e:	08 f0       	brcs	.+2      	; 0x1152 <do_ps2device_work+0xb8>
    1150:	92 c0       	rjmp	.+292    	; 0x1276 <do_ps2device_work+0x1dc>
    1152:	e3 5c       	subi	r30, 0xC3	; 195
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__tablejump2__>
			case PS2HOST_CMD_ECHO:
				debug_log(">Echo\r\n");
    115a:	80 e6       	ldi	r24, 0x60	; 96
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ECHO);
    1162:	8e ee       	ldi	r24, 0xEE	; 238
    1164:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<Echo\r\n");
    1168:	88 e6       	ldi	r24, 0x68	; 104
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    1170:	b9 c0       	rjmp	.+370    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_RESEND:
				//we don't care - so we send just an ack
				debug_log(">Resend\r\n");
    1172:	80 e7       	ldi	r24, 0x70	; 112
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    117a:	8a ef       	ldi	r24, 0xFA	; 250
    117c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    1180:	8a e7       	ldi	r24, 0x7A	; 122
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				continue;
    1188:	7a c0       	rjmp	.+244    	; 0x127e <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_RESET:
				debug_log(">Reset\r\n");
    118a:	81 e8       	ldi	r24, 0x81	; 129
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1192:	8a ef       	ldi	r24, 0xFA	; 250
    1194:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    1198:	8a e7       	ldi	r24, 0x7A	; 122
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_reset_state();
    11a0:	0e 94 03 04 	call	0x806	; 0x806 <_reset_state>
				return;
    11a4:	9f c0       	rjmp	.+318    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE:
			case PS2HOST_CMD_SET_ALL_KEYS_MAKE_BREAK:
			case PS2HOST_CMD_SET_ALL_KEYS_TYPEMATIC:
				// this is generally not the correct handling but we dont care.
				debug_log(">Set m/b/t\r\n");
    11a6:	8a e8       	ldi	r24, 0x8A	; 138
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    11ae:	8a ef       	ldi	r24, 0xFA	; 250
    11b0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    11b4:	8a e7       	ldi	r24, 0x7A	; 122
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    11bc:	93 c0       	rjmp	.+294    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_TYPEMATIC_RATE_DELAY:
				_next_byte_typematic_rate = true;
    11be:	c0 93 d4 04 	sts	0x04D4, r28
				debug_log(">TypemR n\r\n");
    11c2:	87 e9       	ldi	r24, 0x97	; 151
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    11ca:	8a ef       	ldi	r24, 0xFA	; 250
    11cc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    11d0:	8a e7       	ldi	r24, 0x7A	; 122
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				continue;
    11d8:	52 c0       	rjmp	.+164    	; 0x127e <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_SET_RESET_LEDS:
				_next_byte_led = true;
    11da:	c0 93 d3 04 	sts	0x04D3, r28
				debug_log(">LED n\r\n");
    11de:	83 ea       	ldi	r24, 0xA3	; 163
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    11e6:	8a ef       	ldi	r24, 0xFA	; 250
    11e8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    11ec:	8a e7       	ldi	r24, 0x7A	; 122
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				continue;
    11f4:	44 c0       	rjmp	.+136    	; 0x127e <do_ps2device_work+0x1e4>
			case PS2HOST_CMD_READ_ID:
				debug_log(">SendId\r\n");
    11f6:	8c ea       	ldi	r24, 0xAC	; 172
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_ID_1);
    11fe:	8b ea       	ldi	r24, 0xAB	; 171
    1200:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ID1\r\n");
    1204:	86 eb       	ldi	r24, 0xB6	; 182
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_ID_2);
    120c:	83 e8       	ldi	r24, 0x83	; 131
    120e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ID2\r\n");
    1212:	8d eb       	ldi	r24, 0xBD	; 189
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    121a:	64 c0       	rjmp	.+200    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_SET_DEFAULT:
				debug_log(">Default\r\n");
    121c:	84 ec       	ldi	r24, 0xC4	; 196
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1224:	8a ef       	ldi	r24, 0xFA	; 250
    1226:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    122a:	8a e7       	ldi	r24, 0x7A	; 122
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    1232:	58 c0       	rjmp	.+176    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_DISABLE:
				_ps2dev_enabled = false;
    1234:	10 92 02 01 	sts	0x0102, r1
				_next_byte_led = _next_byte_typematic_rate = false;
    1238:	10 92 d4 04 	sts	0x04D4, r1
    123c:	10 92 d3 04 	sts	0x04D3, r1
				debug_log(">Disable\r\n");
    1240:	8f ec       	ldi	r24, 0xCF	; 207
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1248:	8a ef       	ldi	r24, 0xFA	; 250
    124a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    124e:	8a e7       	ldi	r24, 0x7A	; 122
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    1256:	46 c0       	rjmp	.+140    	; 0x12e4 <do_ps2device_work+0x24a>
			case PS2HOST_CMD_ENABLE:
				_ps2dev_enabled = true;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 02 01 	sts	0x0102, r24
				debug_log(">Enable\r\n");
    125e:	8a ed       	ldi	r24, 0xDA	; 218
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				_send_char_to_host(PS2DEVICE_CMD_ACK);
    1266:	8a ef       	ldi	r24, 0xFA	; 250
    1268:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
				debug_log("<ACK\r\n");
    126c:	8a e7       	ldi	r24, 0x7A	; 122
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
				return;
    1274:	37 c0       	rjmp	.+110    	; 0x12e4 <do_ps2device_work+0x24a>
			default:
				debug_log(">???\r\n");
    1276:	84 ee       	ldi	r24, 0xE4	; 228
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 94 01 	call	0x328	; 0x328 <debug_log>
	_data_pin_port_b = data_pin_port_b;
	_reset_state();
}

void do_ps2device_work() {
	while (_recv_buf_len > 0) {
    127e:	80 91 d8 04 	lds	r24, 0x04D8
    1282:	81 11       	cpse	r24, r1
    1284:	0e cf       	rjmp	.-484    	; 0x10a2 <do_ps2device_work+0x8>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	cd 2f       	mov	r28, r29
    128a:	28 c0       	rjmp	.+80     	; 0x12dc <do_ps2device_work+0x242>
}

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
    128c:	80 91 d5 04 	lds	r24, 0x04D5
    1290:	88 23       	and	r24, r24
    1292:	39 f0       	breq	.+14     	; 0x12a2 <do_ps2device_work+0x208>
		return 0x0;
	}
	return _send_buf[_send_buf_head];
    1294:	e0 91 d6 04 	lds	r30, 0x04D6
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	e6 52       	subi	r30, 0x26	; 38
    129c:	fb 4f       	sbci	r31, 0xFB	; 251
    129e:	80 81       	ld	r24, Z
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <do_ps2device_work+0x20a>

// Scan codes never contain 0xff or 0x00, so we use 0x00 to signal that the buffer is empty
static inline char _get_char_from_snd_buf()
{
	if (_send_buf_len == 0) {
		return 0x0;
    12a2:	8c 2f       	mov	r24, r28
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
    12a4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_send_char_to_host>
    12a8:	81 11       	cpse	r24, r1
    12aa:	18 c0       	rjmp	.+48     	; 0x12dc <do_ps2device_work+0x242>
	}
	return _send_buf[_send_buf_head];
}

static void _remove_char_from_snd_buf() {
	cli();
    12ac:	f8 94       	cli
	if (_send_buf_len == 0) { // just to make sure...
    12ae:	80 91 d5 04 	lds	r24, 0x04D5
    12b2:	81 11       	cpse	r24, r1
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <do_ps2device_work+0x220>
		sei();
    12b6:	78 94       	sei
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <do_ps2device_work+0x242>
		return;
	}
	_send_buf_head++;
    12ba:	80 91 d6 04 	lds	r24, 0x04D6
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 d6 04 	sts	0x04D6, r24
	_send_buf_len--;
    12c4:	80 91 d5 04 	lds	r24, 0x04D5
    12c8:	81 50       	subi	r24, 0x01	; 1
    12ca:	80 93 d5 04 	sts	0x04D5, r24
	if (_send_buf_head >= SND_BUF_SIZE) {
    12ce:	80 91 d6 04 	lds	r24, 0x04D6
    12d2:	80 31       	cpi	r24, 0x10	; 16
    12d4:	10 f0       	brcs	.+4      	; 0x12da <do_ps2device_work+0x240>
		_send_buf_head = 0;
    12d6:	d0 93 d6 04 	sts	0x04D6, r29
	}
	sei();
    12da:	78 94       	sei
			default:
				debug_log(">???\r\n");
				break;
		}
	}	
	while(_send_buf_len > 0) {
    12dc:	80 91 d5 04 	lds	r24, 0x04D5
    12e0:	81 11       	cpse	r24, r1
    12e2:	d4 cf       	rjmp	.-88     	; 0x128c <do_ps2device_work+0x1f2>
		if (!_send_char_to_host(_get_char_from_snd_buf())) {
			_remove_char_from_snd_buf();
		}
	}
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <add_char_to_send_buf>:
	return c;
}

// returning a 0 means buffer is full
static bool _put_char_into_snd_buf(char c) {
	cli();
    12ea:	f8 94       	cli
	if (_send_buf_len >= SND_BUF_SIZE) {
    12ec:	90 91 d5 04 	lds	r25, 0x04D5
    12f0:	90 31       	cpi	r25, 0x10	; 16
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <add_char_to_send_buf+0x10>
		sei();
    12f4:	78 94       	sei
		return false;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret
	}
	uint8_t i = _send_buf_head + _send_buf_len;
    12fa:	90 91 d6 04 	lds	r25, 0x04D6
    12fe:	e0 91 d5 04 	lds	r30, 0x04D5
    1302:	e9 0f       	add	r30, r25
	if (i >= SND_BUF_SIZE)
    1304:	e0 31       	cpi	r30, 0x10	; 16
    1306:	08 f0       	brcs	.+2      	; 0x130a <add_char_to_send_buf+0x20>
		i -= SND_BUF_SIZE;
    1308:	e0 51       	subi	r30, 0x10	; 16
	_send_buf[i] = c;
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	e6 52       	subi	r30, 0x26	; 38
    130e:	fb 4f       	sbci	r31, 0xFB	; 251
    1310:	80 83       	st	Z, r24
	_send_buf_len++;
    1312:	80 91 d5 04 	lds	r24, 0x04D5
    1316:	8f 5f       	subi	r24, 0xFF	; 255
    1318:	80 93 d5 04 	sts	0x04D5, r24
	sei();
    131c:	78 94       	sei
	return true;
    131e:	81 e0       	ldi	r24, 0x01	; 1
	}
}

bool add_char_to_send_buf(char c) {
	return _put_char_into_snd_buf(c);
    1320:	08 95       	ret

00001322 <__mulsi3>:
    1322:	db 01       	movw	r26, r22
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	0e 94 a7 09 	call	0x134e	; 0x134e <__muluhisi3>
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	a2 9f       	mul	r26, r18
    1332:	80 0d       	add	r24, r0
    1334:	91 1d       	adc	r25, r1
    1336:	a3 9f       	mul	r26, r19
    1338:	90 0d       	add	r25, r0
    133a:	b2 9f       	mul	r27, r18
    133c:	90 0d       	add	r25, r0
    133e:	11 24       	eor	r1, r1
    1340:	08 95       	ret

00001342 <__tablejump2__>:
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	05 90       	lpm	r0, Z+
    1348:	f4 91       	lpm	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	09 94       	ijmp

0000134e <__muluhisi3>:
    134e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__umulhisi3>
    1352:	a5 9f       	mul	r26, r21
    1354:	90 0d       	add	r25, r0
    1356:	b4 9f       	mul	r27, r20
    1358:	90 0d       	add	r25, r0
    135a:	a4 9f       	mul	r26, r20
    135c:	80 0d       	add	r24, r0
    135e:	91 1d       	adc	r25, r1
    1360:	11 24       	eor	r1, r1
    1362:	08 95       	ret

00001364 <__umulhisi3>:
    1364:	a2 9f       	mul	r26, r18
    1366:	b0 01       	movw	r22, r0
    1368:	b3 9f       	mul	r27, r19
    136a:	c0 01       	movw	r24, r0
    136c:	a3 9f       	mul	r26, r19
    136e:	70 0d       	add	r23, r0
    1370:	81 1d       	adc	r24, r1
    1372:	11 24       	eor	r1, r1
    1374:	91 1d       	adc	r25, r1
    1376:	b2 9f       	mul	r27, r18
    1378:	70 0d       	add	r23, r0
    137a:	81 1d       	adc	r24, r1
    137c:	11 24       	eor	r1, r1
    137e:	91 1d       	adc	r25, r1
    1380:	08 95       	ret

00001382 <sprintf>:
    1382:	ae e0       	ldi	r26, 0x0E	; 14
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 ec       	ldi	r30, 0xC7	; 199
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__prologue_saves__+0x1c>
    138e:	0d 89       	ldd	r16, Y+21	; 0x15
    1390:	1e 89       	ldd	r17, Y+22	; 0x16
    1392:	86 e0       	ldi	r24, 0x06	; 6
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	1a 83       	std	Y+2, r17	; 0x02
    1398:	09 83       	std	Y+1, r16	; 0x01
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f e7       	ldi	r25, 0x7F	; 127
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	ae 01       	movw	r20, r28
    13a4:	47 5e       	subi	r20, 0xE7	; 231
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	6f 89       	ldd	r22, Y+23	; 0x17
    13aa:	78 8d       	ldd	r23, Y+24	; 0x18
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <vfprintf>
    13b4:	2f 81       	ldd	r18, Y+7	; 0x07
    13b6:	38 85       	ldd	r19, Y+8	; 0x08
    13b8:	f8 01       	movw	r30, r16
    13ba:	e2 0f       	add	r30, r18
    13bc:	f3 1f       	adc	r31, r19
    13be:	10 82       	st	Z, r1
    13c0:	2e 96       	adiw	r28, 0x0e	; 14
    13c2:	e4 e0       	ldi	r30, 0x04	; 4
    13c4:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__epilogue_restores__+0x1c>

000013c8 <vfprintf>:
    13c8:	ac e0       	ldi	r26, 0x0C	; 12
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ea ee       	ldi	r30, 0xEA	; 234
    13ce:	f9 e0       	ldi	r31, 0x09	; 9
    13d0:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__prologue_saves__>
    13d4:	7c 01       	movw	r14, r24
    13d6:	6b 01       	movw	r12, r22
    13d8:	8a 01       	movw	r16, r20
    13da:	fc 01       	movw	r30, r24
    13dc:	17 82       	std	Z+7, r1	; 0x07
    13de:	16 82       	std	Z+6, r1	; 0x06
    13e0:	83 81       	ldd	r24, Z+3	; 0x03
    13e2:	81 ff       	sbrs	r24, 1
    13e4:	bd c1       	rjmp	.+890    	; 0x1760 <vfprintf+0x398>
    13e6:	ce 01       	movw	r24, r28
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	4c 01       	movw	r8, r24
    13ec:	f7 01       	movw	r30, r14
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	f6 01       	movw	r30, r12
    13f2:	93 fd       	sbrc	r25, 3
    13f4:	85 91       	lpm	r24, Z+
    13f6:	93 ff       	sbrs	r25, 3
    13f8:	81 91       	ld	r24, Z+
    13fa:	6f 01       	movw	r12, r30
    13fc:	88 23       	and	r24, r24
    13fe:	09 f4       	brne	.+2      	; 0x1402 <vfprintf+0x3a>
    1400:	ab c1       	rjmp	.+854    	; 0x1758 <vfprintf+0x390>
    1402:	85 32       	cpi	r24, 0x25	; 37
    1404:	39 f4       	brne	.+14     	; 0x1414 <vfprintf+0x4c>
    1406:	93 fd       	sbrc	r25, 3
    1408:	85 91       	lpm	r24, Z+
    140a:	93 ff       	sbrs	r25, 3
    140c:	81 91       	ld	r24, Z+
    140e:	6f 01       	movw	r12, r30
    1410:	85 32       	cpi	r24, 0x25	; 37
    1412:	29 f4       	brne	.+10     	; 0x141e <vfprintf+0x56>
    1414:	b7 01       	movw	r22, r14
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    141c:	e7 cf       	rjmp	.-50     	; 0x13ec <vfprintf+0x24>
    141e:	51 2c       	mov	r5, r1
    1420:	31 2c       	mov	r3, r1
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	20 32       	cpi	r18, 0x20	; 32
    1426:	a0 f4       	brcc	.+40     	; 0x1450 <vfprintf+0x88>
    1428:	8b 32       	cpi	r24, 0x2B	; 43
    142a:	69 f0       	breq	.+26     	; 0x1446 <vfprintf+0x7e>
    142c:	30 f4       	brcc	.+12     	; 0x143a <vfprintf+0x72>
    142e:	80 32       	cpi	r24, 0x20	; 32
    1430:	59 f0       	breq	.+22     	; 0x1448 <vfprintf+0x80>
    1432:	83 32       	cpi	r24, 0x23	; 35
    1434:	69 f4       	brne	.+26     	; 0x1450 <vfprintf+0x88>
    1436:	20 61       	ori	r18, 0x10	; 16
    1438:	2c c0       	rjmp	.+88     	; 0x1492 <vfprintf+0xca>
    143a:	8d 32       	cpi	r24, 0x2D	; 45
    143c:	39 f0       	breq	.+14     	; 0x144c <vfprintf+0x84>
    143e:	80 33       	cpi	r24, 0x30	; 48
    1440:	39 f4       	brne	.+14     	; 0x1450 <vfprintf+0x88>
    1442:	21 60       	ori	r18, 0x01	; 1
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <vfprintf+0xca>
    1446:	22 60       	ori	r18, 0x02	; 2
    1448:	24 60       	ori	r18, 0x04	; 4
    144a:	23 c0       	rjmp	.+70     	; 0x1492 <vfprintf+0xca>
    144c:	28 60       	ori	r18, 0x08	; 8
    144e:	21 c0       	rjmp	.+66     	; 0x1492 <vfprintf+0xca>
    1450:	27 fd       	sbrc	r18, 7
    1452:	27 c0       	rjmp	.+78     	; 0x14a2 <vfprintf+0xda>
    1454:	30 ed       	ldi	r19, 0xD0	; 208
    1456:	38 0f       	add	r19, r24
    1458:	3a 30       	cpi	r19, 0x0A	; 10
    145a:	78 f4       	brcc	.+30     	; 0x147a <vfprintf+0xb2>
    145c:	26 ff       	sbrs	r18, 6
    145e:	06 c0       	rjmp	.+12     	; 0x146c <vfprintf+0xa4>
    1460:	fa e0       	ldi	r31, 0x0A	; 10
    1462:	5f 9e       	mul	r5, r31
    1464:	30 0d       	add	r19, r0
    1466:	11 24       	eor	r1, r1
    1468:	53 2e       	mov	r5, r19
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <vfprintf+0xca>
    146c:	8a e0       	ldi	r24, 0x0A	; 10
    146e:	38 9e       	mul	r3, r24
    1470:	30 0d       	add	r19, r0
    1472:	11 24       	eor	r1, r1
    1474:	33 2e       	mov	r3, r19
    1476:	20 62       	ori	r18, 0x20	; 32
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <vfprintf+0xca>
    147a:	8e 32       	cpi	r24, 0x2E	; 46
    147c:	21 f4       	brne	.+8      	; 0x1486 <vfprintf+0xbe>
    147e:	26 fd       	sbrc	r18, 6
    1480:	6b c1       	rjmp	.+726    	; 0x1758 <vfprintf+0x390>
    1482:	20 64       	ori	r18, 0x40	; 64
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0xca>
    1486:	8c 36       	cpi	r24, 0x6C	; 108
    1488:	11 f4       	brne	.+4      	; 0x148e <vfprintf+0xc6>
    148a:	20 68       	ori	r18, 0x80	; 128
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <vfprintf+0xca>
    148e:	88 36       	cpi	r24, 0x68	; 104
    1490:	41 f4       	brne	.+16     	; 0x14a2 <vfprintf+0xda>
    1492:	f6 01       	movw	r30, r12
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	6f 01       	movw	r12, r30
    149e:	81 11       	cpse	r24, r1
    14a0:	c1 cf       	rjmp	.-126    	; 0x1424 <vfprintf+0x5c>
    14a2:	98 2f       	mov	r25, r24
    14a4:	9f 7d       	andi	r25, 0xDF	; 223
    14a6:	95 54       	subi	r25, 0x45	; 69
    14a8:	93 30       	cpi	r25, 0x03	; 3
    14aa:	28 f4       	brcc	.+10     	; 0x14b6 <vfprintf+0xee>
    14ac:	0c 5f       	subi	r16, 0xFC	; 252
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ff e3       	ldi	r31, 0x3F	; 63
    14b2:	f9 83       	std	Y+1, r31	; 0x01
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <vfprintf+0x108>
    14b6:	83 36       	cpi	r24, 0x63	; 99
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <vfprintf+0xfe>
    14ba:	83 37       	cpi	r24, 0x73	; 115
    14bc:	71 f0       	breq	.+28     	; 0x14da <vfprintf+0x112>
    14be:	83 35       	cpi	r24, 0x53	; 83
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <vfprintf+0xfc>
    14c2:	5b c0       	rjmp	.+182    	; 0x157a <vfprintf+0x1b2>
    14c4:	22 c0       	rjmp	.+68     	; 0x150a <vfprintf+0x142>
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 81       	ld	r24, Z
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	0e 5f       	subi	r16, 0xFE	; 254
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	44 24       	eor	r4, r4
    14d2:	43 94       	inc	r4
    14d4:	51 2c       	mov	r5, r1
    14d6:	54 01       	movw	r10, r8
    14d8:	15 c0       	rjmp	.+42     	; 0x1504 <vfprintf+0x13c>
    14da:	38 01       	movw	r6, r16
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	6f 0e       	add	r6, r31
    14e0:	71 1c       	adc	r7, r1
    14e2:	f8 01       	movw	r30, r16
    14e4:	a0 80       	ld	r10, Z
    14e6:	b1 80       	ldd	r11, Z+1	; 0x01
    14e8:	26 ff       	sbrs	r18, 6
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <vfprintf+0x12a>
    14ec:	65 2d       	mov	r22, r5
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x12e>
    14f2:	6f ef       	ldi	r22, 0xFF	; 255
    14f4:	7f ef       	ldi	r23, 0xFF	; 255
    14f6:	c5 01       	movw	r24, r10
    14f8:	2c 87       	std	Y+12, r18	; 0x0c
    14fa:	0e 94 c1 0b 	call	0x1782	; 0x1782 <strnlen>
    14fe:	2c 01       	movw	r4, r24
    1500:	83 01       	movw	r16, r6
    1502:	2c 85       	ldd	r18, Y+12	; 0x0c
    1504:	2f 77       	andi	r18, 0x7F	; 127
    1506:	22 2e       	mov	r2, r18
    1508:	17 c0       	rjmp	.+46     	; 0x1538 <vfprintf+0x170>
    150a:	38 01       	movw	r6, r16
    150c:	f2 e0       	ldi	r31, 0x02	; 2
    150e:	6f 0e       	add	r6, r31
    1510:	71 1c       	adc	r7, r1
    1512:	f8 01       	movw	r30, r16
    1514:	a0 80       	ld	r10, Z
    1516:	b1 80       	ldd	r11, Z+1	; 0x01
    1518:	26 ff       	sbrs	r18, 6
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <vfprintf+0x15a>
    151c:	65 2d       	mov	r22, r5
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0x15e>
    1522:	6f ef       	ldi	r22, 0xFF	; 255
    1524:	7f ef       	ldi	r23, 0xFF	; 255
    1526:	c5 01       	movw	r24, r10
    1528:	2c 87       	std	Y+12, r18	; 0x0c
    152a:	0e 94 b6 0b 	call	0x176c	; 0x176c <strnlen_P>
    152e:	2c 01       	movw	r4, r24
    1530:	2c 85       	ldd	r18, Y+12	; 0x0c
    1532:	20 68       	ori	r18, 0x80	; 128
    1534:	22 2e       	mov	r2, r18
    1536:	83 01       	movw	r16, r6
    1538:	23 fc       	sbrc	r2, 3
    153a:	1b c0       	rjmp	.+54     	; 0x1572 <vfprintf+0x1aa>
    153c:	83 2d       	mov	r24, r3
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	48 16       	cp	r4, r24
    1542:	59 06       	cpc	r5, r25
    1544:	b0 f4       	brcc	.+44     	; 0x1572 <vfprintf+0x1aa>
    1546:	b7 01       	movw	r22, r14
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    1550:	3a 94       	dec	r3
    1552:	f4 cf       	rjmp	.-24     	; 0x153c <vfprintf+0x174>
    1554:	f5 01       	movw	r30, r10
    1556:	27 fc       	sbrc	r2, 7
    1558:	85 91       	lpm	r24, Z+
    155a:	27 fe       	sbrs	r2, 7
    155c:	81 91       	ld	r24, Z+
    155e:	5f 01       	movw	r10, r30
    1560:	b7 01       	movw	r22, r14
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    1568:	31 10       	cpse	r3, r1
    156a:	3a 94       	dec	r3
    156c:	f1 e0       	ldi	r31, 0x01	; 1
    156e:	4f 1a       	sub	r4, r31
    1570:	51 08       	sbc	r5, r1
    1572:	41 14       	cp	r4, r1
    1574:	51 04       	cpc	r5, r1
    1576:	71 f7       	brne	.-36     	; 0x1554 <vfprintf+0x18c>
    1578:	e5 c0       	rjmp	.+458    	; 0x1744 <vfprintf+0x37c>
    157a:	84 36       	cpi	r24, 0x64	; 100
    157c:	11 f0       	breq	.+4      	; 0x1582 <vfprintf+0x1ba>
    157e:	89 36       	cpi	r24, 0x69	; 105
    1580:	39 f5       	brne	.+78     	; 0x15d0 <vfprintf+0x208>
    1582:	f8 01       	movw	r30, r16
    1584:	27 ff       	sbrs	r18, 7
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <vfprintf+0x1ce>
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	0c 5f       	subi	r16, 0xFC	; 252
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <vfprintf+0x1de>
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	07 2e       	mov	r0, r23
    159c:	00 0c       	add	r0, r0
    159e:	88 0b       	sbc	r24, r24
    15a0:	99 0b       	sbc	r25, r25
    15a2:	0e 5f       	subi	r16, 0xFE	; 254
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	2f 76       	andi	r18, 0x6F	; 111
    15a8:	72 2e       	mov	r7, r18
    15aa:	97 ff       	sbrs	r25, 7
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <vfprintf+0x1f8>
    15ae:	90 95       	com	r25
    15b0:	80 95       	com	r24
    15b2:	70 95       	com	r23
    15b4:	61 95       	neg	r22
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	20 68       	ori	r18, 0x80	; 128
    15be:	72 2e       	mov	r7, r18
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	a4 01       	movw	r20, r8
    15c6:	0e 94 04 0c 	call	0x1808	; 0x1808 <__ultoa_invert>
    15ca:	a8 2e       	mov	r10, r24
    15cc:	a8 18       	sub	r10, r8
    15ce:	44 c0       	rjmp	.+136    	; 0x1658 <vfprintf+0x290>
    15d0:	85 37       	cpi	r24, 0x75	; 117
    15d2:	29 f4       	brne	.+10     	; 0x15de <vfprintf+0x216>
    15d4:	2f 7e       	andi	r18, 0xEF	; 239
    15d6:	b2 2e       	mov	r11, r18
    15d8:	2a e0       	ldi	r18, 0x0A	; 10
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	25 c0       	rjmp	.+74     	; 0x1628 <vfprintf+0x260>
    15de:	f2 2f       	mov	r31, r18
    15e0:	f9 7f       	andi	r31, 0xF9	; 249
    15e2:	bf 2e       	mov	r11, r31
    15e4:	8f 36       	cpi	r24, 0x6F	; 111
    15e6:	c1 f0       	breq	.+48     	; 0x1618 <vfprintf+0x250>
    15e8:	18 f4       	brcc	.+6      	; 0x15f0 <vfprintf+0x228>
    15ea:	88 35       	cpi	r24, 0x58	; 88
    15ec:	79 f0       	breq	.+30     	; 0x160c <vfprintf+0x244>
    15ee:	b4 c0       	rjmp	.+360    	; 0x1758 <vfprintf+0x390>
    15f0:	80 37       	cpi	r24, 0x70	; 112
    15f2:	19 f0       	breq	.+6      	; 0x15fa <vfprintf+0x232>
    15f4:	88 37       	cpi	r24, 0x78	; 120
    15f6:	21 f0       	breq	.+8      	; 0x1600 <vfprintf+0x238>
    15f8:	af c0       	rjmp	.+350    	; 0x1758 <vfprintf+0x390>
    15fa:	2f 2f       	mov	r18, r31
    15fc:	20 61       	ori	r18, 0x10	; 16
    15fe:	b2 2e       	mov	r11, r18
    1600:	b4 fe       	sbrs	r11, 4
    1602:	0d c0       	rjmp	.+26     	; 0x161e <vfprintf+0x256>
    1604:	8b 2d       	mov	r24, r11
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	b8 2e       	mov	r11, r24
    160a:	09 c0       	rjmp	.+18     	; 0x161e <vfprintf+0x256>
    160c:	24 ff       	sbrs	r18, 4
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <vfprintf+0x25c>
    1610:	9f 2f       	mov	r25, r31
    1612:	96 60       	ori	r25, 0x06	; 6
    1614:	b9 2e       	mov	r11, r25
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0x25c>
    1618:	28 e0       	ldi	r18, 0x08	; 8
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <vfprintf+0x260>
    161e:	20 e1       	ldi	r18, 0x10	; 16
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <vfprintf+0x260>
    1624:	20 e1       	ldi	r18, 0x10	; 16
    1626:	32 e0       	ldi	r19, 0x02	; 2
    1628:	f8 01       	movw	r30, r16
    162a:	b7 fe       	sbrs	r11, 7
    162c:	07 c0       	rjmp	.+14     	; 0x163c <vfprintf+0x274>
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	0c 5f       	subi	r16, 0xFC	; 252
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <vfprintf+0x280>
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 5f       	subi	r16, 0xFE	; 254
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	a4 01       	movw	r20, r8
    164a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__ultoa_invert>
    164e:	a8 2e       	mov	r10, r24
    1650:	a8 18       	sub	r10, r8
    1652:	fb 2d       	mov	r31, r11
    1654:	ff 77       	andi	r31, 0x7F	; 127
    1656:	7f 2e       	mov	r7, r31
    1658:	76 fe       	sbrs	r7, 6
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <vfprintf+0x2aa>
    165c:	37 2d       	mov	r19, r7
    165e:	3e 7f       	andi	r19, 0xFE	; 254
    1660:	a5 14       	cp	r10, r5
    1662:	50 f4       	brcc	.+20     	; 0x1678 <vfprintf+0x2b0>
    1664:	74 fe       	sbrs	r7, 4
    1666:	0a c0       	rjmp	.+20     	; 0x167c <vfprintf+0x2b4>
    1668:	72 fc       	sbrc	r7, 2
    166a:	08 c0       	rjmp	.+16     	; 0x167c <vfprintf+0x2b4>
    166c:	37 2d       	mov	r19, r7
    166e:	3e 7e       	andi	r19, 0xEE	; 238
    1670:	05 c0       	rjmp	.+10     	; 0x167c <vfprintf+0x2b4>
    1672:	ba 2c       	mov	r11, r10
    1674:	37 2d       	mov	r19, r7
    1676:	03 c0       	rjmp	.+6      	; 0x167e <vfprintf+0x2b6>
    1678:	ba 2c       	mov	r11, r10
    167a:	01 c0       	rjmp	.+2      	; 0x167e <vfprintf+0x2b6>
    167c:	b5 2c       	mov	r11, r5
    167e:	34 ff       	sbrs	r19, 4
    1680:	0d c0       	rjmp	.+26     	; 0x169c <vfprintf+0x2d4>
    1682:	fe 01       	movw	r30, r28
    1684:	ea 0d       	add	r30, r10
    1686:	f1 1d       	adc	r31, r1
    1688:	80 81       	ld	r24, Z
    168a:	80 33       	cpi	r24, 0x30	; 48
    168c:	11 f4       	brne	.+4      	; 0x1692 <vfprintf+0x2ca>
    168e:	39 7e       	andi	r19, 0xE9	; 233
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <vfprintf+0x2dc>
    1692:	32 ff       	sbrs	r19, 2
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x2da>
    1696:	b3 94       	inc	r11
    1698:	b3 94       	inc	r11
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <vfprintf+0x2dc>
    169c:	83 2f       	mov	r24, r19
    169e:	86 78       	andi	r24, 0x86	; 134
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <vfprintf+0x2dc>
    16a2:	b3 94       	inc	r11
    16a4:	33 fd       	sbrc	r19, 3
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <vfprintf+0x306>
    16a8:	30 ff       	sbrs	r19, 0
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x2f0>
    16ac:	5a 2c       	mov	r5, r10
    16ae:	b3 14       	cp	r11, r3
    16b0:	18 f4       	brcc	.+6      	; 0x16b8 <vfprintf+0x2f0>
    16b2:	53 0c       	add	r5, r3
    16b4:	5b 18       	sub	r5, r11
    16b6:	b3 2c       	mov	r11, r3
    16b8:	b3 14       	cp	r11, r3
    16ba:	68 f4       	brcc	.+26     	; 0x16d6 <vfprintf+0x30e>
    16bc:	b7 01       	movw	r22, r14
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	3c 87       	std	Y+12, r19	; 0x0c
    16c4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    16c8:	b3 94       	inc	r11
    16ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    16cc:	f5 cf       	rjmp	.-22     	; 0x16b8 <vfprintf+0x2f0>
    16ce:	b3 14       	cp	r11, r3
    16d0:	10 f4       	brcc	.+4      	; 0x16d6 <vfprintf+0x30e>
    16d2:	3b 18       	sub	r3, r11
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <vfprintf+0x310>
    16d6:	31 2c       	mov	r3, r1
    16d8:	34 ff       	sbrs	r19, 4
    16da:	12 c0       	rjmp	.+36     	; 0x1700 <vfprintf+0x338>
    16dc:	b7 01       	movw	r22, r14
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	3c 87       	std	Y+12, r19	; 0x0c
    16e4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    16e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    16ea:	32 ff       	sbrs	r19, 2
    16ec:	17 c0       	rjmp	.+46     	; 0x171c <vfprintf+0x354>
    16ee:	31 fd       	sbrc	r19, 1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <vfprintf+0x330>
    16f2:	88 e7       	ldi	r24, 0x78	; 120
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x334>
    16f8:	88 e5       	ldi	r24, 0x58	; 88
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	b7 01       	movw	r22, r14
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <vfprintf+0x350>
    1700:	83 2f       	mov	r24, r19
    1702:	86 78       	andi	r24, 0x86	; 134
    1704:	59 f0       	breq	.+22     	; 0x171c <vfprintf+0x354>
    1706:	31 ff       	sbrs	r19, 1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x346>
    170a:	8b e2       	ldi	r24, 0x2B	; 43
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <vfprintf+0x348>
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	37 fd       	sbrc	r19, 7
    1712:	8d e2       	ldi	r24, 0x2D	; 45
    1714:	b7 01       	movw	r22, r14
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    171c:	a5 14       	cp	r10, r5
    171e:	38 f4       	brcc	.+14     	; 0x172e <vfprintf+0x366>
    1720:	b7 01       	movw	r22, r14
    1722:	80 e3       	ldi	r24, 0x30	; 48
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    172a:	5a 94       	dec	r5
    172c:	f7 cf       	rjmp	.-18     	; 0x171c <vfprintf+0x354>
    172e:	aa 94       	dec	r10
    1730:	f4 01       	movw	r30, r8
    1732:	ea 0d       	add	r30, r10
    1734:	f1 1d       	adc	r31, r1
    1736:	80 81       	ld	r24, Z
    1738:	b7 01       	movw	r22, r14
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    1740:	a1 10       	cpse	r10, r1
    1742:	f5 cf       	rjmp	.-22     	; 0x172e <vfprintf+0x366>
    1744:	33 20       	and	r3, r3
    1746:	09 f4       	brne	.+2      	; 0x174a <vfprintf+0x382>
    1748:	51 ce       	rjmp	.-862    	; 0x13ec <vfprintf+0x24>
    174a:	b7 01       	movw	r22, r14
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 cc 0b 	call	0x1798	; 0x1798 <fputc>
    1754:	3a 94       	dec	r3
    1756:	f6 cf       	rjmp	.-20     	; 0x1744 <vfprintf+0x37c>
    1758:	f7 01       	movw	r30, r14
    175a:	86 81       	ldd	r24, Z+6	; 0x06
    175c:	97 81       	ldd	r25, Z+7	; 0x07
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x39c>
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	9f ef       	ldi	r25, 0xFF	; 255
    1764:	2c 96       	adiw	r28, 0x0c	; 12
    1766:	e2 e1       	ldi	r30, 0x12	; 18
    1768:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__epilogue_restores__>

0000176c <strnlen_P>:
    176c:	fc 01       	movw	r30, r24
    176e:	05 90       	lpm	r0, Z+
    1770:	61 50       	subi	r22, 0x01	; 1
    1772:	70 40       	sbci	r23, 0x00	; 0
    1774:	01 10       	cpse	r0, r1
    1776:	d8 f7       	brcc	.-10     	; 0x176e <strnlen_P+0x2>
    1778:	80 95       	com	r24
    177a:	90 95       	com	r25
    177c:	8e 0f       	add	r24, r30
    177e:	9f 1f       	adc	r25, r31
    1780:	08 95       	ret

00001782 <strnlen>:
    1782:	fc 01       	movw	r30, r24
    1784:	61 50       	subi	r22, 0x01	; 1
    1786:	70 40       	sbci	r23, 0x00	; 0
    1788:	01 90       	ld	r0, Z+
    178a:	01 10       	cpse	r0, r1
    178c:	d8 f7       	brcc	.-10     	; 0x1784 <strnlen+0x2>
    178e:	80 95       	com	r24
    1790:	90 95       	com	r25
    1792:	8e 0f       	add	r24, r30
    1794:	9f 1f       	adc	r25, r31
    1796:	08 95       	ret

00001798 <fputc>:
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	fb 01       	movw	r30, r22
    17a2:	23 81       	ldd	r18, Z+3	; 0x03
    17a4:	21 fd       	sbrc	r18, 1
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <fputc+0x16>
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	28 c0       	rjmp	.+80     	; 0x17fe <fputc+0x66>
    17ae:	22 ff       	sbrs	r18, 2
    17b0:	16 c0       	rjmp	.+44     	; 0x17de <fputc+0x46>
    17b2:	46 81       	ldd	r20, Z+6	; 0x06
    17b4:	57 81       	ldd	r21, Z+7	; 0x07
    17b6:	24 81       	ldd	r18, Z+4	; 0x04
    17b8:	35 81       	ldd	r19, Z+5	; 0x05
    17ba:	42 17       	cp	r20, r18
    17bc:	53 07       	cpc	r21, r19
    17be:	44 f4       	brge	.+16     	; 0x17d0 <fputc+0x38>
    17c0:	a0 81       	ld	r26, Z
    17c2:	b1 81       	ldd	r27, Z+1	; 0x01
    17c4:	9d 01       	movw	r18, r26
    17c6:	2f 5f       	subi	r18, 0xFF	; 255
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	31 83       	std	Z+1, r19	; 0x01
    17cc:	20 83       	st	Z, r18
    17ce:	8c 93       	st	X, r24
    17d0:	26 81       	ldd	r18, Z+6	; 0x06
    17d2:	37 81       	ldd	r19, Z+7	; 0x07
    17d4:	2f 5f       	subi	r18, 0xFF	; 255
    17d6:	3f 4f       	sbci	r19, 0xFF	; 255
    17d8:	37 83       	std	Z+7, r19	; 0x07
    17da:	26 83       	std	Z+6, r18	; 0x06
    17dc:	10 c0       	rjmp	.+32     	; 0x17fe <fputc+0x66>
    17de:	eb 01       	movw	r28, r22
    17e0:	09 2f       	mov	r16, r25
    17e2:	18 2f       	mov	r17, r24
    17e4:	00 84       	ldd	r0, Z+8	; 0x08
    17e6:	f1 85       	ldd	r31, Z+9	; 0x09
    17e8:	e0 2d       	mov	r30, r0
    17ea:	09 95       	icall
    17ec:	89 2b       	or	r24, r25
    17ee:	e1 f6       	brne	.-72     	; 0x17a8 <fputc+0x10>
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	81 2f       	mov	r24, r17
    17fc:	90 2f       	mov	r25, r16
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <__ultoa_invert>:
    1808:	fa 01       	movw	r30, r20
    180a:	aa 27       	eor	r26, r26
    180c:	28 30       	cpi	r18, 0x08	; 8
    180e:	51 f1       	breq	.+84     	; 0x1864 <__ultoa_invert+0x5c>
    1810:	20 31       	cpi	r18, 0x10	; 16
    1812:	81 f1       	breq	.+96     	; 0x1874 <__ultoa_invert+0x6c>
    1814:	e8 94       	clt
    1816:	6f 93       	push	r22
    1818:	6e 7f       	andi	r22, 0xFE	; 254
    181a:	6e 5f       	subi	r22, 0xFE	; 254
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	af 4f       	sbci	r26, 0xFF	; 255
    1824:	b1 e0       	ldi	r27, 0x01	; 1
    1826:	3e d0       	rcall	.+124    	; 0x18a4 <__ultoa_invert+0x9c>
    1828:	b4 e0       	ldi	r27, 0x04	; 4
    182a:	3c d0       	rcall	.+120    	; 0x18a4 <__ultoa_invert+0x9c>
    182c:	67 0f       	add	r22, r23
    182e:	78 1f       	adc	r23, r24
    1830:	89 1f       	adc	r24, r25
    1832:	9a 1f       	adc	r25, r26
    1834:	a1 1d       	adc	r26, r1
    1836:	68 0f       	add	r22, r24
    1838:	79 1f       	adc	r23, r25
    183a:	8a 1f       	adc	r24, r26
    183c:	91 1d       	adc	r25, r1
    183e:	a1 1d       	adc	r26, r1
    1840:	6a 0f       	add	r22, r26
    1842:	71 1d       	adc	r23, r1
    1844:	81 1d       	adc	r24, r1
    1846:	91 1d       	adc	r25, r1
    1848:	a1 1d       	adc	r26, r1
    184a:	20 d0       	rcall	.+64     	; 0x188c <__ultoa_invert+0x84>
    184c:	09 f4       	brne	.+2      	; 0x1850 <__ultoa_invert+0x48>
    184e:	68 94       	set
    1850:	3f 91       	pop	r19
    1852:	2a e0       	ldi	r18, 0x0A	; 10
    1854:	26 9f       	mul	r18, r22
    1856:	11 24       	eor	r1, r1
    1858:	30 19       	sub	r19, r0
    185a:	30 5d       	subi	r19, 0xD0	; 208
    185c:	31 93       	st	Z+, r19
    185e:	de f6       	brtc	.-74     	; 0x1816 <__ultoa_invert+0xe>
    1860:	cf 01       	movw	r24, r30
    1862:	08 95       	ret
    1864:	46 2f       	mov	r20, r22
    1866:	47 70       	andi	r20, 0x07	; 7
    1868:	40 5d       	subi	r20, 0xD0	; 208
    186a:	41 93       	st	Z+, r20
    186c:	b3 e0       	ldi	r27, 0x03	; 3
    186e:	0f d0       	rcall	.+30     	; 0x188e <__ultoa_invert+0x86>
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__ultoa_invert+0x5c>
    1872:	f6 cf       	rjmp	.-20     	; 0x1860 <__ultoa_invert+0x58>
    1874:	46 2f       	mov	r20, r22
    1876:	4f 70       	andi	r20, 0x0F	; 15
    1878:	40 5d       	subi	r20, 0xD0	; 208
    187a:	4a 33       	cpi	r20, 0x3A	; 58
    187c:	18 f0       	brcs	.+6      	; 0x1884 <__ultoa_invert+0x7c>
    187e:	49 5d       	subi	r20, 0xD9	; 217
    1880:	31 fd       	sbrc	r19, 1
    1882:	40 52       	subi	r20, 0x20	; 32
    1884:	41 93       	st	Z+, r20
    1886:	02 d0       	rcall	.+4      	; 0x188c <__ultoa_invert+0x84>
    1888:	a9 f7       	brne	.-22     	; 0x1874 <__ultoa_invert+0x6c>
    188a:	ea cf       	rjmp	.-44     	; 0x1860 <__ultoa_invert+0x58>
    188c:	b4 e0       	ldi	r27, 0x04	; 4
    188e:	a6 95       	lsr	r26
    1890:	97 95       	ror	r25
    1892:	87 95       	ror	r24
    1894:	77 95       	ror	r23
    1896:	67 95       	ror	r22
    1898:	ba 95       	dec	r27
    189a:	c9 f7       	brne	.-14     	; 0x188e <__ultoa_invert+0x86>
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	61 05       	cpc	r22, r1
    18a0:	71 05       	cpc	r23, r1
    18a2:	08 95       	ret
    18a4:	9b 01       	movw	r18, r22
    18a6:	ac 01       	movw	r20, r24
    18a8:	0a 2e       	mov	r0, r26
    18aa:	06 94       	lsr	r0
    18ac:	57 95       	ror	r21
    18ae:	47 95       	ror	r20
    18b0:	37 95       	ror	r19
    18b2:	27 95       	ror	r18
    18b4:	ba 95       	dec	r27
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <__ultoa_invert+0xa2>
    18b8:	62 0f       	add	r22, r18
    18ba:	73 1f       	adc	r23, r19
    18bc:	84 1f       	adc	r24, r20
    18be:	95 1f       	adc	r25, r21
    18c0:	a0 1d       	adc	r26, r0
    18c2:	08 95       	ret

000018c4 <__prologue_saves__>:
    18c4:	2f 92       	push	r2
    18c6:	3f 92       	push	r3
    18c8:	4f 92       	push	r4
    18ca:	5f 92       	push	r5
    18cc:	6f 92       	push	r6
    18ce:	7f 92       	push	r7
    18d0:	8f 92       	push	r8
    18d2:	9f 92       	push	r9
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	ca 1b       	sub	r28, r26
    18ee:	db 0b       	sbc	r29, r27
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	09 94       	ijmp

000018fc <__epilogue_restores__>:
    18fc:	2a 88       	ldd	r2, Y+18	; 0x12
    18fe:	39 88       	ldd	r3, Y+17	; 0x11
    1900:	48 88       	ldd	r4, Y+16	; 0x10
    1902:	5f 84       	ldd	r5, Y+15	; 0x0f
    1904:	6e 84       	ldd	r6, Y+14	; 0x0e
    1906:	7d 84       	ldd	r7, Y+13	; 0x0d
    1908:	8c 84       	ldd	r8, Y+12	; 0x0c
    190a:	9b 84       	ldd	r9, Y+11	; 0x0b
    190c:	aa 84       	ldd	r10, Y+10	; 0x0a
    190e:	b9 84       	ldd	r11, Y+9	; 0x09
    1910:	c8 84       	ldd	r12, Y+8	; 0x08
    1912:	df 80       	ldd	r13, Y+7	; 0x07
    1914:	ee 80       	ldd	r14, Y+6	; 0x06
    1916:	fd 80       	ldd	r15, Y+5	; 0x05
    1918:	0c 81       	ldd	r16, Y+4	; 0x04
    191a:	1b 81       	ldd	r17, Y+3	; 0x03
    191c:	aa 81       	ldd	r26, Y+2	; 0x02
    191e:	b9 81       	ldd	r27, Y+1	; 0x01
    1920:	ce 0f       	add	r28, r30
    1922:	d1 1d       	adc	r29, r1
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	ed 01       	movw	r28, r26
    1930:	08 95       	ret

00001932 <_exit>:
    1932:	f8 94       	cli

00001934 <__stop_program>:
    1934:	ff cf       	rjmp	.-2      	; 0x1934 <__stop_program>
